{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Snowflake LDW to EDM Transition","text":""},{"location":"#this-is-the-place-where-we-share-learn-and-collaborate-with-each-other","title":"This is the place where we share, learn and collaborate with each other","text":""},{"location":"azure/","title":"Azure","text":""},{"location":"azure/#azure-sql","title":"AZURE SQL","text":""},{"location":"azure/#presentation-stock-change","title":"Presentation Stock Change","text":"<pre><code>SELECT mpi.division_id, mpi.district_cd, mpi.store, mpi.upc, mpi.item_desc, mpi.user_id, mpi.business_date, spi.start_pi, epi.end_pi, mpi.pi_change\nFROM (\nSELECT DISTINCT str.division_id, str.district_cd, store, upc, item_desc, user_id, business_date, SUM(pi_change) AS pi_change\nFROM scmrep.store_manual_pi mpi\nINNER JOIN scmrep.lu_store_finance_om str ON str.store_id = mpi.store\nINNER JOIN scmrep.lu_day_merge dy ON dy.d_date = mpi.business_date\nWHERE dy.week_id between 202201 and 202253\n--AND mpi.upc IN ${hivevar:upc}\nAND str.store_id = 177\nGROUP BY str.division_id, str.district_cd, store, upc, item_desc, user_id, business_date) mpi\nINNER JOIN (\nSELECT store, upc, user_id, business_date, start_pi, adjustment_timestamp,\nROW_NUMBER() OVER (PARTITION BY store, upc, user_id, business_date ORDER BY adjustment_timestamp ASC) AS rn\nFROM scmrep.store_manual_pi mpi\nINNER JOIN scmrep.lu_store_finance_om str ON str.store_id = mpi.store\nINNER JOIN scmrep.lu_day_merge dy ON dy.d_date = mpi.business_date\nWHERE dy.week_id between 202201 and 202253\n-- AND mpi.upc IN ${hivevar:upc}\nAND str.store_id = 177\n) spi ON mpi.store = spi.store AND mpi.upc = spi.upc AND mpi.user_id = spi.user_id AND mpi.business_date = spi.business_date AND spi.rn = 1\nINNER JOIN (\nSELECT store, upc, user_id, business_date, end_pi, adjustment_timestamp,\nROW_NUMBER() OVER (PARTITION BY store, upc, user_id, business_date ORDER BY adjustment_timestamp DESC) AS rn\nFROM scmrep.store_manual_pi mpi\nINNER JOIN scmrep.lu_store_finance_om str ON str.store_id = mpi.store\nINNER JOIN scmrep.lu_day_merge dy ON dy.d_date = mpi.business_date\nWHERE dy.week_id between 202201 and 202253\n--  AND mpi.upc IN ${hivevar:upc}\nAND str.store_id = 177\n) epi ON mpi.store = epi.store AND mpi.upc = epi.upc AND mpi.user_id = epi.user_id AND mpi.business_date = epi.business_date AND epi.rn = 1\n</code></pre>"},{"location":"azure/#warehouse-to-store-order-history","title":"Warehouse to Store Order History","text":"<pre><code>SELECT store.division_id, dept_section_id, store.district_cd, store.store_id, dtl.orig_cic_id, cic.internet_item_dsc, chrono.week_id,\nSUM(CASE WHEN hdr.order_type_cd = 'FAR' THEN 1 ELSE 0 END) AS far_order_count,\nSUM(CASE WHEN hdr.order_type_cd = 'FAR' THEN COALESCE(dtl.order_qty, COALESCE(dtl.exe_demand_qty, 0)) ELSE 0 END) AS far_cases_ordered,\nSUM(CASE WHEN hdr.order_type_cd = 'FAR' THEN COALESCE(dtl.exe_ship_qty, COALESCE(dtl.modify_qty, 0)) ELSE 0 END) AS far_cases_shipped,\nSUM(CASE WHEN NOT hdr.order_type_cd = 'FAR' THEN 1 ELSE 0 END) AS store_add_count,\nSUM(CASE WHEN NOT hdr.order_type_cd = 'FAR' THEN COALESCE(dtl.order_qty, COALESCE(dtl.exe_demand_qty, 0)) ELSE 0 END) AS store_add_cases_ordered,\nSUM(CASE WHEN NOT hdr.order_type_cd = 'FAR' THEN COALESCE(dtl.exe_ship_qty, COALESCE(dtl.modify_qty, 0)) ELSE 0 END) AS store_add_cases_shipped,\nSUM(COALESCE(dtl.firm_order_qty, 0)) AS firm_qty\nFROM scmrep.ov_order_hdr_hist hdr\nINNER JOIN scmrep.lu_day_merge chrono ON chrono.d_date = hdr.schedule_delivery_dt\nINNER JOIN scmrep.lu_store_finance_om store ON store.store_id = hdr.dest_facility_id\nINNER JOIN scmrep.ov_order_dtl_hist dtl ON dtl.order_hdr_sk = hdr.order_hdr_sk AND dtl.order_dt = hdr.order_dt\nINNER JOIN (SELECT DISTINCT dept_section_id, CAST(corp_item_cd AS BIGINT) AS corp_item_cd, internet_item_dsc FROM scmrep.lu_cic) cic ON cic.corp_item_cd = dtl.orig_cic_id\nWHERE store.division_id = 30\nAND store.store_id = 177\nAND chrono.week_id IN (select week_id from scmrep.lu_day_merge where d_date = current_date group by 1)\nAND cic.dept_section_id IN (301, 302, 313, 318, 327, 335, 338, 314, 323, 324, 325, 317)\nGROUP BY store.division_id, dept_section_id, store.district_cd, store.store_id, dtl.orig_cic_id, cic.internet_item_dsc, chrono.week_id\nORDER BY store.division_id, dept_section_id, store.district_cd, store.store_id, dtl.orig_cic_id, cic.internet_item_dsc, chrono.week_id\n</code></pre>"},{"location":"azure/#store-order-and-polltime","title":"Store Order and polltime","text":"<pre><code>select distinct\nstr.loadid,\nstr.ordertype,\nstr.divisionid,\nstr.districtid,\nstr.storeid,\ncic.u_section,\nstr.polltimestamp,\nstr.corporationitemcode,\nstr.upc,\nstr.corporationitemcode,\ncic.descr,\nstr.itemorderqtyeaches,\nstr.itemorderqtywhseunits\nfrom scmrep.inbound_from_jda_storeorder str\n--join scmrep.corporate_item itm\n--on itm.corporate_item_cd = str.corporationitemcode\njoin scmrep.jda_cic cic\non cic.u_cic_code =  str.corporationitemcode\njoin scmrep.jda_assortment ast\non ast.u_cic_code = str.corporationitemcode\nwhere cast(str.POLLTIMESTAMP as date) = '2022-08-15'\nand str.STOREID in ('0177')\nand u_data_batch_cd in ('0117','0170','0119','0101','0168','0123','0133','0135')\n</code></pre>"},{"location":"azure/#tag-subscription","title":"Tag Subscription","text":"<pre><code>SELECT DISTINCT\nTAG.DEPT_SECTION_ID\n, TAG.CORP_ITEM_CD\n, UPC_ID, CIC.INTERNET_ITEM_DSC\n, CIC.PACK_WHSE_QTY\n, CIC. NUMERIC_SIZE_QTY\n, CIC.SIZE_UOM_CD\n, TAG.LOC_ID\n, TAG.AISLE_NBR\n, TAG.SECT_NBR\n, TAG.SHELF_CD\n, max(source_last_updt_ts)\nFROM SCMREP.TAG_SUBSCRIPTION TAG\nJOIN SCMREP.LU_CIC CIC\nON CIC.CORP_ITEM_CD = TAG.CORP_ITEM_CD\nWHERE TAG.STORE_ID = 177\n--and source_last_updt_ts = max(source_last_updt_ts)\n--and corp_item_cd in (9900038,9014962,2011658,2020403,9152218,2900013,9151571,2020809,9014972,9150355,2020043,9050236,2010741,2011796,9101008,9012301,2011525,9014255,9011118,9010943,9050117,9100566,2020253,9150899,9050313,9150693,9015920,9014968,9018498,30031468,30010042,30040061,30030416,30010902,74401173,30030578,30030130,30010051,30010903,30030470,30031225,74400906,30040094,30030955,88660894,88661232,88290110,88661616,86930414,84740054,38450027,39500369,38250451,38250151,39550022,38250149,38250095,74450602,74500019,74450190,1050525,1014390,1050088,1050721,1052303,1050659,1050173,1050163,1050089,1054026,1056324,1052400,1050253,1050707,1051599,1060873,1054601,1059634,1051089,1051172,1052352,1052678,1058988,1055451,1050258,1011222,1056317,1059564,1011272,1050015,1059025,1061149,1055443,1056322,1061151,1053679,1051102,1052062,1050643,42050710,42050332,42011366,48050110,42200044,47050674,42011754,42100034,48200224,48100252,42200070,48020113,45010196,48010184,42200067,47050173,48050107,42050640,48011217,42011102,42011717,42050970,42052001,42011141,42050022,42050360,48040124,48020437,45010315,47010663,48050157,48050030,48013414,42051549,48100302,42050018,42051591,42011032,42051601,42052064,48050082,42012037,42050334,42050476,42051022,36150034,36450227,36304174,36300150,36301337,36100051,36302913,36050352,36100369,36050095,36050275,36050359,3300349,8051060,3300403,8050980,3200792,3200255,3300398,8050230,3250537,3200781,8010404,3200137,3200217,3200086,3200662,3100363,3250239,8100081,8200213,3300570,8250009,3200136,3300346,3300338,3100295,3100116,3300327,3350154,8100086,8150129,8100052,8010933,3200804,8200035,3200471,3100294,74100627,75800302,75800274,28350414,13100090,7150016,28202443,25100014,15200001,22400027,25100225,13450001,15100351,13010071,4050054,25100155,25100129,23010838,6041112,22500021,13050220,22010059,28350494,22200016,5850056,22100290,4100012,7050005,7150017,13150320,15150070,25050142,23010217,25100051,24010025,25100028,23010629,22400013,5250237,14151944,6041109,4100133,5850133,6040263,4100063,28200382,13500347,14150407,17200143,4050192,4050297,28350231,14201304,7200109,25300068,21300226,13050184,5300152,13050173,14200364,14200398,15200117,7050018,15200002,5201193,5400690,28350026,14200565,13500345,14150405,28200289,22150044,7010372,14250040,25150014,6060157,11011247,20020071,19010837,27050488,27050300,20020953,20070078,26330194,11010589,20070186,20080005,11010416,20030006,20020555,11010941,19020024,11100311,19090116,11014456,11101807,26321114,20070546,20070535,20030051,26250271,11010990,26250168,20060257,20070305,20060274,20030258,10050779,19150399,26320364,11101906,20060101,19030930,20020277,19031680,20070138,20070070,11100057,26150184,20010028,19050746,27101512,19030452,20050417,20070059,20060420,20020028,29011108,26400505\n\n--)\nand TAG.DEPT_SECTION_ID in (301,302,313,318,327,335,338,314,323,324,325,317,311,312,322)\ngroup by\nTAG.DEPT_SECTION_ID\n, TAG.CORP_ITEM_CD\n, UPC_ID, CIC.INTERNET_ITEM_DSC\n, CIC.PACK_WHSE_QTY\n, CIC. NUMERIC_SIZE_QTY\n, CIC.SIZE_UOM_CD\n, TAG.LOC_ID\n, TAG.AISLE_NBR\n, TAG.SECT_NBR\n, TAG.SHELF_CD\n</code></pre>"},{"location":"azure/#order-closed-in-route-to-stores","title":"Order Closed in Route to Stores","text":"<pre><code>select\nhdr.order_dt\n, hdr.com_received_ts\n, hdr.com_extract_ts\n, hdr.schedule_cutoff_ts\n, hdr.bomb_dt\n, hdr.schedule_pick_dt\n, hdr.com_schedule_delivery_dt\n, hdr.schedule_delivery_dt\n, hdr.inv_billing_dt\n, hdr.inv_dt\n, hdr.order_hdr_sk\n, hdr.dest_div_nbr\n, hdr.rog_cd\n, hdr.dest_facility_id  -- 4-character store number\n, hdr.ship_div_nbr\n, hdr.ship_facility_id  -- warehouse code\n, hdr.order_nbr\n, hdr.inv_nbr\n, hdr.register_id\n, hdr.com_order_nbr\n, hdr.exe_order_nbr\n, hdr.order_type_cd\n, hdr.order_sts_cd\n, dtl.orig_cic_id\n, dtl.upc_cntry_id\n, dtl.upc_sys_id\n, dtl.upc_manuf_id\n, dtl.upc_sales_id\n, dtl.item_dsc\n, dtl.order_qty\n, dtl.exe_ship_qty\nfrom scmrep.ov_order_hdr_hist hdr\njoin scmrep.ov_order_dtl_hist dtl\non dtl.order_dt = hdr.order_dt\nand dtl.order_hdr_sk = hdr.order_hdr_sk\nwhere\nhdr.dest_facility_id = '0161'   -- 4-character store number\nand hdr.delivery_dt = current_date\nand dtl.orig_cic_id = 36300065\n</code></pre>"},{"location":"azure/#store-current-pi","title":"Store Current PI","text":"<pre><code>SELECT DISTINCT\nU_STORE,\nUPC.DEPT_SECTION_ID,\nPI.AVAILDATE,\nPI.U_CIC_CODE,\nUPC.UPC_ID,\nUPC.INTERNET_ITEM_DSC,\nPI.QTY,\nPI.U_PS_QTY,\nlast_updt_ts\nFROM HIVE_METASTORE.SCMREP.JDA_INVENTORY_STORE PI\nJOIN HIVE_METASTORE.SCMREP.LU_UPC UPC\nON UPC.CORP_ITEM_CD = PI.U_CIC_CODE\njoin hive_metastore.scmrep.lu_store_finance_om str\non str.store_id = pi.u_store\nwhere AVAILDATE  =  CURRENT_DATE() -2\nand str.store_id = 3441\n</code></pre>"},{"location":"azure/#future-store-orders","title":"Future Store Orders","text":"<pre><code>select distinct\nstr.loadid,\nstr.ordertype,\nstr.divisionid,\nstr.districtid,\nstr.storeid,\ncic.u_section,\nstr.polltimestamp,\nstr.corporationitemcode,\nstr.upc,\nstr.corporationitemcode,\ncic.descr,\nstr.itemorderqtyeaches,\nstr.itemorderqtywhseunits\nfrom scmrep.inbound_from_jda_storeorder str\n--join scmrep.corporate_item itm\n--on itm.corporate_item_cd = str.corporationitemcode\njoin scmrep.jda_cic cic\non cic.u_cic_code =  str.corporationitemcode\njoin scmrep.jda_assortment ast\non ast.u_cic_code = str.corporationitemcode\nwhere cast(str.POLLTIMESTAMP as date) = '2022-08-15'\nand str.STOREID in ('0177')\nand u_data_batch_cd in ('0117','0170','0119','0101','0168','0123','0133','0135')\n--and u_data_batch_cd in ('0101')\n--select distinct u_data_batch_cd\n</code></pre>"},{"location":"code_snippets/","title":"Code Snippets","text":""},{"location":"code_snippets/#collections-of-node-snippets","title":"Collections of node snippets","text":""},{"location":"code_snippets/#tabulator-hide-column-snowlow-solution-is-to-disable-table-redraw","title":"Tabulator hide column snowlow - solution is to disable table redraw","text":"<pre><code>table.blockRedraw();\n  for (const col of table.getColumns()) {\n    if (!firstCol) {\n      col.toggle();\n    }\n    firstCol = false;\n  }\ntable.restoreRedraw();\n</code></pre>"},{"location":"db2/","title":"DB2 SQL","text":""},{"location":"db2/#all-items-with-vendor-contact","title":"All Items With Vendor Contact","text":"<pre><code>SELECT DISTINCT\nPG.PROMO_GRP_SK AS PG_ID,\nPG.PROMO_GRP_NM,\nPG.UNIT_TYP_CD AS UT,\nPG.PROMO_TYP_GRP_CD AS PGT,\nPG.DIV_ID AS DIV,\nwds.vend_num,\nCOALESCE(PDI.CORP_ITEM_CD, ITM.CORP_ITEM_CD) AS CIC_EXPECTED,\nCOALESCE(DLV.DEAL_VEND_NM,'') AS VENDOR,\nCOALESCE(PCG.DIV_PROMO_GRP_CD, 0) AS CIG,\nIRX.CORP_ITEM_CD AS CIC_FOUND,\nCASE\nWHEN PRI.BRKR_NM IS NULL THEN 'VC1'\nWHEN VC1.CONT_NM IS NULL THEN 'BR1'\nEND AS CONT1,\nCOALESCE(PRI.BRKR_NM,VC1.CONT_NM) AS PRIMARY_NM,\nCOALESCE\n(PRI.BRKR_EMAIL_TXT, VC1.CONT_EMAIL_TXT) AS PRIMARY_EMAIL,\nCOALESCE\n(SEC.BRKR_NM,VC2.CONT_NM, '') AS SECOND_NM,\nCOALESCE\n(SEC.BRKR_EMAIL_TXT,VC2.CONT_EMAIL_TXT, '') AS SECOND_EMAIL,\nCOALESCE\n(THD.BRKR_NM,VC3.CONT_NM, '') AS THIRD_NAME,\nCOALESCE\n(THD.BRKR_EMAIL_TXT,VC3.CONT_EMAIL_TXT, '') AS THIRD_EMAIL,\nPG.PROMO_GRP_SK AS PG_ID,\nPG.PROMO_GRP_NM\nFROM SQLDATA.PPAPPRGP_TABLE PG\n\nLEFT JOIN SQLDATA.PPAPPGC_TABLE JP\nON JP.PROMO_GRP_SK = PG.PROMO_GRP_SK\nAND JP.CONT_ROLE_NM = 'PRIMARY'\nLEFT JOIN SQLDATA.PPAPPBC_TABLE PRI\nON PRI.BRKR_CONT_SK = JP.BRKR_CONT_SK\nAND PRI.DIV_ID = PG.DIV_ID\nAND JP.VEND_CONT_SK = 0\nLEFT JOIN SQLDATA.PPAPDLVC_TABLE VC1\nON VC1.VEND_CONT_SK = JP.VEND_CONT_SK\nAND VC1.DIV_ID = PG.DIV_ID\nAND JP.BRKR_CONT_SK = 0\nLEFT JOIN SQLDATA.PPAPPGI_TABLE ITM\nON ITM.PROMO_GRP_SK = PG.PROMO_GRP_SK\nLEFT JOIN SQLDATA.PPAPPGCG_TABLE PCG\nON PCG.PROMO_GRP_SK = PG.PROMO_GRP_SK\nLEFT JOIN SQLDATA.PPAPPGC_TABLE JP2\nON JP2.PROMO_GRP_SK = PG.PROMO_GRP_SK\nAND JP2.CONT_ROLE_NM = 'SECONDARY'\nLEFT JOIN SQLDATA.PPAPPBC_TABLE SEC\nON SEC.BRKR_CONT_SK = JP2.BRKR_CONT_SK\nAND SEC.DIV_ID = PG.DIV_ID\nAND JP2.VEND_CONT_SK = 0\nLEFT JOIN SQLDATA.PPAPDLVC_TABLE VC2\nON VC2.VEND_CONT_SK = JP2.VEND_CONT_SK\nAND VC2.DIV_ID = PG.DIV_ID\nAND JP2.BRKR_CONT_SK = 0\nLEFT JOIN SQLDATA.PPAPPGC_TABLE JP3\nON JP3.PROMO_GRP_SK = PG.PROMO_GRP_SK\nAND JP3.CONT_ROLE_NM = 'TEAM LEAD'\nLEFT JOIN SQLDATA.PPAPPBC_TABLE THD\nON THD.BRKR_CONT_SK = JP3.BRKR_CONT_SK\nAND THD.DIV_ID = PG.DIV_ID\nAND JP3.VEND_CONT_SK = 0\nLEFT JOIN SQLDATA.PPAPDLVC_TABLE VC3\nON VC3.VEND_CONT_SK = JP3.VEND_CONT_SK\nAND VC3.DIV_ID = PG.DIV_ID\nAND JP3.BRKR_CONT_SK = 0\nLEFT JOIN SQLDATA.PPAPPDI_TABLE PDI\nON PDI.DIV_PROMO_GRP_CD = PCG.DIV_PROMO_GRP_CD\nAND PDI.DIVISION_ID = PCG.DIV_ID\nLEFT JOIN SQLDATA.PPAPDLV_TABLE DLV\nON DLV.DEAL_VEND_SK = PG.DEAL_VEND_SK\nLEFT JOIN SQLDAT3.SSITMCDS_TABLE ICD\nON ICD.CORP_ITEM_CD = PDI.CORP_ITEM_CD\nOR ICD.CORP_ITEM_CD = ITM.CORP_ITEM_CD\nLEFT JOIN SQLDATA.SSITMROG_TABLE IRG\nON IRG.CORP = '001'\n--AND (IRG.DIVISION = PG.DIV_ID OR IRG.DIVISION in ('32','99'))\nAND IRG.CORP_ITEM_CD = ICD.CORP_ITEM_CD\nLEFT JOIN SQLDATA.SSITMURX_TABLE IRX\nON IRX.CORP = IRG.CORP\nAND IRX.ROG = IRG.ROG\nAND IRX.CORP_ITEM_CD = IRG.CORP_ITEM_CD\nAND IRX.UNIT_TYPE = PG.UNIT_TYP_CD\nLEFT JOIN SQLDAT3.SSITMWDS WDS\nON wds.corp_item_cd = icd.corp_item_cd\nAND wds.division = pg.div_id\n--WHERE PG.DIV_ID in ('32','99')\n--And PG.PROMO_GRP_SK = '32'\nORDER BY 1, 7, 8\n</code></pre>"},{"location":"decision_making_algorithm/","title":"Decision Making","text":""},{"location":"decision_making_algorithm/#decision-making-algorithm","title":"Decision Making Algorithm","text":""},{"location":"decision_making_algorithm/#computer-model-to-evaluate-pugh-matrix","title":"computer model to evaluate pugh matrix","text":"<pre><code>% Decision Making Algorithm\n% computer model to evaluate pugh matrix\n\n% Input\n%   A: matrix of the pugh matrix\n%   B: matrix of the pugh matrix\n%   C: matrix of the pugh matrix\n%   D: matrix of the pugh matrix\n\n\n% Output\n%   M: matrix of the pugh matrix\n%   N: matrix of the pugh matrix\n%   O: matrix of the pugh matrix\n%   P: matrix of the pugh matrix\n\n\n% Example\n%   A = [1 2 3 4 5 6 7 8 9 10 11 12];\n%   B = [1 2 3 4 5 6 7 8 9 10 11 12];\n%   C = [1 2 3 4 5 6 7 8 9 10 11 12];\n%   D = [1 2 3 4 5 6 7 8 9 10 11 12];\n%   [M,N,O,P] = pugh(A,B,C,D)\n</code></pre> <p><pre><code>Building a computer model to evaluate the Pugh Matrix involves several steps:\n\nDefine the criteria: The first step is to define the criteria that will be used to evaluate the options in the Pugh Matrix. These criteria should be relevant, objective, and free from bias. They should also be specific and measurable.\n\nInput the data: Once the criteria have been defined, the next step is to input the data for each option. This data should include the strengths and weaknesses of each option in relation to the defined criteria.\n\nDevelop the algorithm: The next step is to develop the algorithm that will be used to evaluate each option. This algorithm should take into account the strengths and weaknesses of each option and assign a score based on the criteria defined.\n\nProgram the model: Once the algorithm has been developed, the next step is to program the model using a suitable programming language. This could be a high-level language such as Python or a lower-level language such as C++.\n\nTest the model: After the model has been programmed, it is important to test it to ensure that it is working correctly and producing the expected results. This may involve testing the model with different data sets and adjusting the algorithm as needed.\n\nImplement the model: Once the model has been tested and refined, it can be implemented in the organization and used to evaluate the options in the Pugh Matrix.\n\nIn conclusion, building a computer model to evaluate the Pugh Matrix requires careful planning and a structured approach to ensure that the model is accurate, reliable, and free from bias.\n</code></pre> <pre><code># Define the criteria\ncriteria = ['Cost', 'Ease of Use', 'Features', 'Performance']\n\n# Define the options\noptions = ['Option 1', 'Option 2', 'Option 3']\n\n# Define the strengths and weaknesses of each option\ndata = {\n    'Option 1': {\n        'Cost': 'Weakness',\n        'Ease of Use': 'Strength',\n        'Features': 'Strength',\n        'Performance': 'Weakness'\n    },\n    'Option 2': {\n        'Cost': 'Strength',\n        'Ease of Use': 'Weakness',\n        'Features': 'Weakness',\n        'Performance': 'Strength'\n    },\n    'Option 3': {\n        'Cost': 'Neutral',\n        'Ease of Use': 'Neutral',\n        'Features': 'Strength',\n        'Performance': 'Strength'\n    }\n}\n\n# Define the scoring function\ndef score_option(option, criteria, data):\n    total_score = 0\n    for criterion in criteria:\n        strength = data[option][criterion]\n        if strength == 'Strength':\n            total_score += 1\n        elif strength == 'Weakness':\n            total_score -= 1\n    return total_score\n\n# Evaluate each option\nscores = {}\nfor option in options:\n    scores[option] = score_option(option, criteria, data)\n\n# Print the results\nprint('Option\\tScore')\nfor option, score in scores.items():\n    print(f'{option}\\t{score}')\n\n# Determine the best option\nbest_option = max(scores, key=scores.get)\nprint(f'The best option is: {best_option}')\n</code></pre></p> <pre><code>Convergent and divergent decision making are two distinct approaches to problem solving and decision making.\n\nConvergent decision making is a process in which individuals or organizations focus on finding a single, optimal solution to a problem. This approach is often used in situations where the problem and its solution are well-defined and there is a clear right or wrong answer. Convergent decision making is focused on finding the best solution as quickly as possible and often involves a step-by-step process of evaluating and eliminating options until the best solution is found.\n\nDivergent decision making, on the other hand, is a process in which individuals or organizations focus on generating a wide range of possible solutions to a problem. This approach is often used in situations where the problem is complex and there is no clear right or wrong answer. Divergent decision making is focused on generating as many potential solutions as possible, encouraging creativity and innovation. This process helps organizations to explore new ideas and find unexpected solutions to complex problems.\n\nIn conclusion, convergent and divergent decision making are two distinct approaches to problem solving and decision making, each with its own strengths and weaknesses. The best approach to use depends on the specific problem and the desired outcome. In some situations, a combination of both approaches may be used to find the best solution.\n</code></pre>"},{"location":"decision_making_algorithm/#pillar-2-system-thinking","title":"Pillar 2: System thinking","text":""},{"location":"decision_making_algorithm/#what-is-system-thinking","title":"what is system thinking","text":"<pre><code>Systems thinking is an approach to problem-solving that focuses on understanding how different parts of a system are interconnected and how they influence one another. It involves looking at a problem or situation holistically, rather than focusing on individual parts in isolation.\n\nSystems thinking recognizes that complex systems, whether they are natural or man-made, are made up of many different elements that are interdependent and interact with each other in complex ways. By taking a systems thinking approach, you can gain a deeper understanding of these interrelationships and identify the underlying causes of problems, rather than just treating the symptoms.\n\nSystems thinking can be applied in a variety of fields, from engineering and design to business management and public policy. It often involves the use of diagrams or models to visualize the different components of a system and how they are connected, and can help identify feedback loops, delays, and other dynamic relationships that are not immediately apparent.\n\nOverall, systems thinking is a powerful tool for understanding complex problems and finding effective solutions that address the root causes, rather than just the symptoms.\n</code></pre>"},{"location":"decision_making_algorithm/#what-is-emergence-in-system-thinking","title":"what is emergence in system thinking","text":"<pre><code>In the context of systems thinking, emergence refers to the appearance of unexpected properties or behaviors that arise from the interactions between the components of a system. These emergent properties cannot be predicted or explained by looking at the individual parts of the system in isolation.\n\nWhen a system is composed of many interconnected components, these components interact with each other in complex ways that can give rise to emergent properties that are not present in any one component. These emergent properties may be beneficial or detrimental, depending on the context of the system and the goals of the stakeholders involved.\n\nFor example, the emergence of flocking behavior in birds is an example of an emergent property that arises from the interactions between individual birds. Flocking behavior is not present in any one bird, but emerges from the collective behavior of the flock as a whole. Similarly, the emergence of traffic jams on a highway is an example of an emergent property that arises from the interactions between individual cars.\n\nUnderstanding the emergent properties of a system is important for designing and managing complex systems. By taking a systems thinking approach, you can identify the interactions between components that give rise to emergent properties, and design interventions that can leverage or mitigate those properties as needed.\n</code></pre>"},{"location":"decision_making_algorithm/#good-books-about-system-thinking","title":"good books about system thinking","text":"<pre><code>Yes, there are many great books on systems thinking! Here are a few recommendations:\n\n\"Thinking in Systems\" by Donella Meadows: This is a classic book on systems thinking that introduces the key concepts and tools of the field in a clear and accessible way.\n\n\"The Fifth Discipline\" by Peter Senge: This book is a classic on organizational learning and systems thinking, and provides practical guidance on how to apply systems thinking to business and management.\n\n\"Systems Thinking for Social Change\" by David Stroh: This book focuses on the application of systems thinking to social and environmental problems, and provides a practical framework for understanding and addressing complex issues.\n\n\"The Art of Systems Thinking\" by Joseph O'Connor and Ian McDermott: This book provides a practical guide to systems thinking, with tools and techniques for developing a systems perspective and applying it to real-world problems.\n\n\"Systems Thinking Made Simple\" by Michael Goodman: This book provides a concise introduction to systems thinking, with a focus on practical applications and examples from a variety of fields.\n\nThese are just a few examples of the many great books on systems thinking that are available. Depending on your interests and level of experience, there may be other books that are more suitable for your needs.\n</code></pre>"},{"location":"decision_making_algorithm/#concept-of-system-thinking","title":"concept of system thinking","text":"<pre><code>Key Takeaways - The four types of emergence are as follows:\n\nEmergence of function \u2014 the system does something that was never done before \nEmergence of performance \u2014the system does something better than before\nEmergence of the ilities or nonfunctional attributes \u2014 the system has more reliability\nEmergence of an emergency that we don\u2019t want to happen\n\nIn the context of software engineering, emergence can also be categorized into three types based on their relationship to system function, performance, and non-functional attributes:\n\nFunctional Emergence: Functional emergence refers to the appearance of new or unexpected system behavior that affects system function. This type of emergence can be positive or negative, depending on whether the new behavior aligns with the intended system function.\n\nPerformance Emergence: Performance emergence refers to the appearance of new or unexpected system behavior that affects system performance. This type of emergence can be positive or negative, depending on whether the new behavior improves or degrades system performance.\n\nNon-Functional Emergence: Non-functional emergence refers to the appearance of new or unexpected system behavior that affects non-functional attributes of the system, such as security, reliability, or maintainability. This type of emergence can be positive or negative, depending on whether the new behavior improves or degrades these non-functional attributes.\n\nAll three types of emergence are important to consider in software engineering, as they can impact the quality, reliability, and usability of software systems. By taking a systems thinking approach, software engineers can better understand and manage the emergent properties of their systems, and design more effective and robust software solutions.\n\nAdding emergency to the concept of emergence in software engineering would generally refer to the appearance of new or unexpected system behavior that poses an urgent threat to the system or its users. In this case, the emergent property is not just unexpected, but also has the potential to cause harm or damage to the system or its users.\n\nEmergency emergence can arise from a variety of factors, such as security vulnerabilities, hardware or software failures, or unexpected user behavior. For example, an emergency emergence might occur if a security breach exposes sensitive user data or if a software bug causes the system to crash or lose data.\n\nManaging emergency emergence requires a rapid and coordinated response that focuses on identifying and mitigating the immediate threat to the system or its users. This may involve implementing emergency fixes, rolling back changes, or temporarily shutting down the system to prevent further damage.\n\nBy considering the possibility of emergency emergence in software systems, developers and system administrators can be better prepared to respond quickly and effectively in the event of a crisis. This can help minimize the damage caused by emergent properties and reduce the risk of harm to the system or its users.\n</code></pre>"},{"location":"decision_making_algorithm/#first-task-of-system-thinking","title":"first task of system thinking","text":"<pre><code>The first task of systems thinking is to identify the system, its form, and its function. This involves understanding what the system is, how it is structured, and what it is intended to do.\n\nIdentifying the system involves defining the boundaries of the system and determining which components are included within those boundaries. For example, if you are studying a city as a system, you would need to determine what geographic area is included within the boundaries of the city and which elements of the city (such as buildings, roads, and people) are included in your analysis.\n\nIdentifying the form of the system involves understanding how the components of the system are structured and how they relate to one another. This might involve creating a system map or diagram that shows the different components of the system and how they are connected.\n\nIdentifying the function of the system involves understanding what the system is intended to do and how it achieves its goals. This might involve looking at the inputs and outputs of the system, as well as the processes that occur within the system.\n\nBy identifying the system, its form, and its function, systems thinkers can gain a deeper understanding of the underlying structure and dynamics of the system. This can help them identify opportunities for improvement, anticipate potential problems, and design interventions that can help the system achieve its goals more effectively.\n</code></pre>"},{"location":"decision_making_algorithm/#abstraction-in-system-thinking","title":"abstraction in system thinking","text":"<pre><code>Abstraction is a key concept in systems thinking and involves simplifying complex systems by focusing on the most important or relevant elements. Abstraction can be used to help us understand the underlying structure and dynamics of a system, by focusing on the key components and relationships that drive the behavior of the system.\n\nIn systems thinking, abstraction is often used to create models or diagrams that represent the essential components of a system and how they interact. These models can help us understand the system more clearly and identify patterns and relationships that might not be immediately apparent.\n\nFor example, if we are studying a city as a system, we might create a map that shows the key components of the city (such as streets, buildings, and parks) and how they are connected. This abstraction can help us understand how the city functions as a system and identify opportunities for improvement or intervention.\n\nHowever, it's important to recognize that abstraction is a simplification of reality, and that there may be important details or nuances that are left out of an abstract model. Therefore, it's important to use abstraction judiciously and to be aware of its limitations.\n\nOverall, abstraction is a powerful tool for understanding complex systems and identifying the key components and relationships that drive their behavior. When used appropriately, abstraction can help us make sense of complex phenomena and design effective interventions that can improve the performance of a system.\n</code></pre>"},{"location":"decision_making_algorithm/#functions-and-forms-in-system-thinking","title":"functions and forms in system thinking","text":"<pre><code>The statement \"A system can be decomposed into entities, and entities can be composed into a system\" highlights the idea that systems and their components (entities) can be analyzed and understood at multiple levels of abstraction. This allows us to break down complex systems into more manageable parts and study them in greater detail, or to assemble smaller components into larger systems with more complex behavior.\n\nDecomposition involves breaking a system down into its component parts or entities, in order to understand how the system works and how its behavior arises from the interactions between its components. This can be a powerful tool for managing complex systems, as it allows us to identify specific components that may be causing problems or that could be improved.\n\nComposition involves combining smaller entities into a larger system, in order to create a more complex behavior that is not present in any one entity. This can be a powerful tool for designing new systems or improving the performance of existing ones, by leveraging the strengths of different entities and creating new emergent properties.\n\nThe idea that every system is part of a larger system and can be decomposed into smaller systems emphasizes the nested nature of systems, with each level of the hierarchy containing smaller subsystems that interact with one another. This can help us understand how the behavior of a system at one level of the hierarchy is influenced by the behavior of the subsystems at lower levels, and how changes at one level can propagate through the system as a whole.\n\nFinally, the idea that systems and entities can be placed in a hierarchy based on issues of form or function highlights the idea that there are many different ways to break down and understand complex systems. By organizing systems and entities into a hierarchy, we can more easily understand how they relate to one another and how they can be managed effectively.\n</code></pre>"},{"location":"decision_making_algorithm/#identify-the-entities-in-a-system","title":"Identify the entities in a system","text":"<pre><code>Identify the entities by decomposition or composition: This means that you can break down a system into smaller components (decomposition) or combine smaller components into a larger system (composition) in order to understand the system better. For example, if you were trying to understand a computer system, you might decompose it into its hardware and software components, or you might compose a set of smaller applications into a larger suite of software.\n\nTry to limit the number of entities to 7 +/- 2: This guideline is based on research in cognitive psychology, which suggests that the human brain can only hold a limited number of items in short-term memory. By limiting the number of entities to 7 +/- 2, you can make it easier to remember and manage the components of a system.\n\nUse holistic thinking to identify all reasonable entities of a system: Holistic thinking involves looking at a system as a whole, rather than just focusing on its individual components. By using holistic thinking, you can identify all the entities of a system that are necessary to understand its behavior, rather than just focusing on a subset of the components.\n\nFocus on the minimum set of essential entities: This means identifying the key components of a system that are necessary to understand its behavior, without including any unnecessary or extraneous entities. By focusing on the minimum set of essential entities, you can make it easier to understand and manage the system.\n\nDraw a boundary that divides the system from its context: This involves defining the boundary of a system, and separating it from its larger context. By drawing a clear boundary, you can make it easier to understand the behavior of the system, without being distracted by external factors that are not directly related to the system.\n\nOverall, these guidelines can be useful for identifying the key entities of a system and understanding how they interact with one another. By breaking a system down into smaller components, focusing on the essential entities, and using holistic thinking, you can gain a deeper understanding of the system and make it easier to manage effectively.\n</code></pre>"},{"location":"decision_making_algorithm/#relationships-between-forms-and-functions-in-system-thinking","title":"relationships between forms and functions in system thinking","text":"<pre><code>The statement \"A system can be decomposed into entities, and entities can be composed into a system\" highlights the idea that systems and their components (entities) can be analyzed and understood at multiple levels of abstraction. This allows us to break down complex systems into more manageable parts and study them in greater detail, or to assemble smaller components into larger systems with more complex behavior.\n\nThe first point you mentioned is that a group of entities becomes a system when there are relationships between them. This is because the behavior of a system arises from the interactions and relationships between its components.\n\nThe second point is that relationships have both form and function. The form of a relationship refers to how the components are connected or related to one another, while the function of a relationship refers to what that relationship is supposed to achieve or accomplish within the system.\n\nThe third point is that functional relationships are interactions, meaning that one entity affects another and some kind of operand (data, energy, or other resources) is either passed or shared between them. These interactions can be direct, such as when two entities physically touch or communicate with each other, or indirect, such as when one entity affects the environment and another entity is affected by that change.\n\nThe fourth point is that functional relationships can exist within the system, between the entities within the system, or between the entities in the system and entities outside of the system in the context. This is because a system is not an isolated entity, but is embedded within a larger context that can influence its behavior.\n\nOverall, these points emphasize the importance of understanding the relationships between the entities in a system, and how those relationships give rise to emergent properties and behaviors. By understanding the functional relationships within a system, systems thinkers can identify opportunities for improvement, anticipate potential problems, and design interventions that can help the system achieve its goals more effectively.\n</code></pre>"},{"location":"decision_making_algorithm/#computational-thinking-in-system-thinking","title":"computational thinking in system thinking","text":"<pre><code>Sure, here\u2019s a more detailed explanation of each of those points:\n\nThink about a system as form and function \u2013 form is what the system is, the function is what it does: This means that when we\u2019re analyzing a system, we should understand both its structure (the physical components, entities, and relationships) as well as its purpose (what it\u2019s designed to achieve or do).\n\nThink about the entities of the system \u2013 they have a form that enables their function: In any system, there are different entities (components or actors) that have specific roles and functions. To understand how the system works, it\u2019s important to analyze each of these entities, their properties, and how they interact with other entities.\n\nThink about the relationships \u2013 the structure that enables the interactions: The relationships between the entities in a system are what enable them to work together towards a common goal. Analyzing these relationships (how they\u2019re structured, how information or resources flow, etc.) is key to understanding how the system functions.\n\nUnderstand how the functions of entities interact to produce emergence and value: Emergence refers to the idea that a system can produce outcomes or properties that aren\u2019t inherent in any individual entity or component. By understanding how the entities and relationships in a system work together, we can identify emergent properties and behaviors that can add value or create problems.\n\nBy approaching systems thinking in this way, we can break down complex systems into their component parts, analyze how those parts work together, and identify potential areas for improvement or optimization. This can be useful in a wide range of contexts, from understanding the supply chain of a business to analyzing the ecological impact of human activity.\n\nKey Takeaways:\n\nA system is an entity with interrelated and interdependent parts. It is defined by its modules, by the boundaries between the modules, and by their interaction.\nThe computational systems thinking design process is as follows: database -&gt; choose modules -&gt; compose modules -&gt; simulate and verify -&gt; fabricate.\n</code></pre>"},{"location":"decision_making_algorithm/#solution-neutral","title":"solution neutral","text":"<pre><code>Architecture is a representation of entities organized in a way that supports reasoning about the entities and describes behaviors and relationships amongst the entities. \nA concept is a product or system vision, idea, notion, or mental image that maps function to form in brief. It is a simplification of the system architecture that allows for high-level reasoning.\nA solution-neutral function explains a function without specifying the solution that allows one to achieve that function. Solution-neutral is not an absolute property but rather a spectrum of more solution-neutral to less solution-neutral.\nArchitecture is a way to organize and reason about entities, including their behaviors and relationships. It provides a high-level view of a system that can be used to guide its development and evolution.\n\nA concept is a high-level idea or vision for a product or system that maps function to form. It is often used in the early stages of development to help define the goals and scope of the system.\n\nA solution-neutral function is a way to describe a function without specifying a specific solution or implementation. It allows for more flexibility and creativity in finding solutions to meet the function, and is often used in the early stages of design.\n\nTogether, these concepts provide a framework for thinking about and designing complex systems. By using architecture to organize and reason about entities, concepts to define the goals and scope of a system, and solution-neutral functions to describe what a system should do without specifying how it should do it, designers and developers can create innovative and effective solutions to complex problems.\n\nYes, the transition point from solution-neutral to solution-specific marks the point at which design parameters and technology choices become more explicit.\n\nAt the solution-neutral end of the spectrum, functions are described without reference to any specific solution or implementation. As a result, design parameters and technology choices are not yet explicit, and there is more flexibility to explore different solutions.\n\nAs a design moves towards the solution-specific end of the spectrum, design parameters and technology choices become more explicit. This is necessary to enable value-related functions to be executed and enabled by form, and to establish the vocabulary and architecture of the system. At this point, the designer must make more concrete decisions about how the system will be implemented, including the level of technology to be used.\n\nIn general, the transition from solution-neutral to solution-specific marks the point at which a design becomes more concrete and detailed, and moves from the realm of high-level vision and concept to the realm of practical implementation. This transition is critical to the success of any design project, as it sets the stage for the development of a detailed architecture and the implementation of a functional system.\n\nYes, these are correct definitions of sensitivity and connectivity.\n\nSensitivity refers to the degree to which a particular decision or input affects the output or performance of a system. Sensitivity analysis is a technique used to evaluate the sensitivity of a system to changes in specific inputs or parameters, and is often used to identify the most critical inputs or factors affecting system performance.\n\nConnectivity, on the other hand, refers to the degree to which making a particular decision or change affects other decisions or parts of a system. In other words, connectivity measures the interdependence of different parts of a system, and how changes to one part can ripple through the rest of the system. Connectivity analysis is often used to identify potential bottlenecks, dependencies, or conflicts within a system, and to optimize the system for overall performance.\n\nBoth sensitivity and connectivity are important concepts in systems thinking and analysis, and are often used in conjunction with other techniques and methods to understand and improve the performance of complex systems.\n</code></pre>"},{"location":"decision_making_algorithm/#dsm-design-structure-matrix","title":"DSM - Design Structure Matrix","text":"<pre><code>The Design Structure Matrix (DSM) is a tool used to represent the relationships between the components or activities in a complex system or project. It is a square matrix that shows the interactions between the different parts of a system or project, such as the flow of information, dependencies, and feedback loops. The rows and columns of the matrix represent the components or activities, and the cells show the strength and nature of the relationships between them.\n\nThe DSM is a powerful tool for visualizing the complexity of a system or project, and it can be used to identify areas of high interdependency, potential bottlenecks, and opportunities for optimization. It can also be used to track changes in the system over time, and to identify the impact of changes on other components or activities.\n\nThere are different types of DSMs, such as binary DSMs, valued DSMs, and hybrid DSMs. Binary DSMs represent the relationships between components or activities as either present or absent, while valued DSMs assign a numerical value to each relationship to represent its strength. Hybrid DSMs combine both binary and valued relationships to provide a more comprehensive view of the system.\n\nDSMs are commonly used in engineering, project management, and systems analysis to improve the design, development, and implementation of complex systems and projects. They are also useful in other fields, such as organizational design, supply chain management, and software development.\n\nYour statements are mostly correct. I\u2019ll just make a few adjustments for clarity and completeness:\n\nDecomposition is the breaking down of a larger entity into smaller, more manageable components or parts.\nA process is a set of actions or operations that transform inputs into outputs, and typically occurs over time.\nThe Design Structure Matrix (DSM) is a tool for representing the relationships between components or activities in a complex system or project, and is often used in systems engineering and project management.\nSystem architecture is the process of defining the structure and behavior of a system, including its components, their relationships, and the interfaces between them.\nAn interface is a shared boundary or connection between two systems, components, or subsystems, through which they interact or exchange information.\nProcess architecture is the design of the overall structure and flow of a process system, including its components, functions, and interactions. It is a key aspect of process engineering and optimization.\n\nCertainly! Here\u2019s a more detailed explanation of the concepts I mentioned:\n\nDecomposition: This is a technique used in engineering and other fields to simplify complex systems by breaking them down into smaller, more manageable parts or components. Each component can then be designed, analyzed, and optimized separately, before being integrated back into the larger system. Decomposition is often used in systems engineering, software development, and project management.\n\nProcess: A process is a set of actions or operations that transform inputs into outputs. Processes can be applied to a wide range of domains, from manufacturing and logistics to software development and business operations. Examples of processes include production lines, supply chains, software development workflows, and customer service interactions. A process typically involves multiple steps or stages, and may include feedback loops, decision points, and quality control measures.\n\nDesign Structure Matrix (DSM): The DSM is a tool used to represent the relationships between components or activities in a complex system or project. It is a square matrix where each row and column represents a component or activity, and the cells represent the strength and nature of the relationships between them. DSMs are often used in systems engineering and project management to model the structure of complex systems or processes, and to identify areas of high interdependency or potential bottlenecks.\n\nSystem architecture: System architecture is the process of defining the structure and behavior of a system, including its components, their relationships, and the interfaces between them. This involves identifying the key functions and requirements of the system, and designing the overall structure and organization of its components to meet those requirements. System architecture is a critical aspect of systems engineering, software development, and other fields where complex systems need to be designed and optimized.\n\nInterface: An interface is a shared boundary or connection between two systems, components, or subsystems, through which they interact or exchange information. Interfaces can take many forms, such as hardware ports, software APIs, or human-machine interfaces. A well-designed interface is essential for ensuring efficient and effective communication between different parts of a system, and for enabling interoperability with other systems.\n\nProcess architecture: Process architecture is the design of the overall structure and flow of a process system, including its components, functions, and interactions. It is a key aspect of process engineering and optimization, and involves analyzing the inputs and outputs of a process, identifying the key stages and functions, and designing the flow of materials, information, and resources through the system. Process architecture is important for improving process efficiency, reducing waste, and enhancing product quality.\n</code></pre>"},{"location":"decision_making_algorithm/#different-tools-to-decopose-system-into-components","title":"different tools to decopose system into components.","text":"<pre><code>There are several tools and techniques that can be used for decomposing systems into components. Here are some common ones:\n\nFunctional Decomposition: This involves breaking down a system into its functional components, based on the system\u2019s primary objectives and requirements. Each functional component represents a distinct set of capabilities or behaviors that contribute to the overall function of the system. This approach is often used in systems engineering and software development.\n\nObject-Oriented Design: This involves breaking down a system into its object-oriented components, based on the system\u2019s data structures and behavior patterns. Each object represents a distinct data structure and a set of methods or functions that operate on that data. This approach is often used in software development.\n\nHierarchical Task Analysis: This involves breaking down a system into its component tasks and sub-tasks, based on the system\u2019s operational requirements and human factors. Each task represents a distinct set of actions or operations that contribute to the overall function of the system. This approach is often used in human factors engineering and usability design.\n\nValue Stream Mapping: This involves breaking down a system into its value streams, based on the system\u2019s key inputs, outputs, and value-adding activities. Each value stream represents a distinct set of activities that contribute to the overall value proposition of the system. This approach is often used in lean manufacturing and process optimization.\n\nFailure Mode and Effects Analysis (FMEA): This involves breaking down a system into its potential failure modes and their effects, based on the system\u2019s criticality and risk factors. Each failure mode represents a distinct potential point of failure in the system, and the associated effects represent the potential consequences of that failure. This approach is often used in quality management and risk analysis.\n\nEach of these tools and techniques can be used to decompose a system into its component parts and provide insights into the system\u2019s structure, function, and performance. The choice of tool or technique will depend on the specific requirements of the system and the goals of the analysis.\n\nAgile is not a tool for decomposing systems into components, but rather a project management methodology for developing software and other products. However, Agile can be used in conjunction with some of the tools and techniques for decomposing systems into components that I mentioned earlier.\n\nFor example, the Agile methodology emphasizes iterative and incremental development, which can be supported by functional decomposition and object-oriented design. By breaking down the system into functional components or objects, Agile teams can develop and test each component or object in isolation, and then integrate them into the larger system over time.\n\nSimilarly, Agile teams can use value stream mapping and hierarchical task analysis to identify and prioritize the most valuable and critical components or tasks of the system, and to develop and test them in an iterative and incremental manner. Failure mode and effects analysis can also be used to identify potential risks and failures in the system, and to develop mitigation strategies as part of the Agile development process.\n\nSo while Agile is not a tool for decomposing systems into components per se, it can be used in conjunction with other tools and techniques to support the development and optimization of complex systems.\n\nSure, here\u2019s some more information on Hierarchical Task Analysis (HTA):\n\n-- expand on Hierarchical Task Analysis (HTA) and how it can be used to decompose systems into components.\n\nHierarchical Task Analysis (HTA) is a structured method for analyzing and decomposing complex tasks or systems into their constituent sub-tasks and activities. It is based on the premise that complex tasks can be broken down into simpler, more manageable sub-tasks, which can then be analyzed and optimized separately.\n\nHTA is typically used in the fields of human factors engineering, usability design, and process optimization. It can be used to identify areas of inefficiency, complexity, and error-proneness in a system, and to develop more streamlined and efficient workflows.\n\nThe process of performing HTA involves several steps:\n\nTask identification: Identify the primary tasks or objectives of the system, and break them down into their constituent sub-tasks.\n\nTask analysis: Analyze each sub-task in detail, identifying the specific inputs, outputs, and operations required to perform it.\n\nHierarchical structuring: Organize the sub-tasks into a hierarchical structure, based on their dependencies and relationships to each other.\n\nEvaluation: Evaluate the hierarchical structure to identify areas of redundancy, complexity, or inefficiency, and develop optimization strategies to address these issues.\n\nHTA can be performed using a variety of techniques, such as interviews with subject matter experts, observation of system use, and analysis of task performance data. HTA can also be supported by software tools, such as flowcharting software or task analysis software.\n\nHTA has several benefits, including improved system efficiency, reduced error rates, and enhanced usability. It can also help to identify areas for process improvement and cost savings, and can be used to support continuous improvement initiatives.\n</code></pre>"},{"location":"decision_making_algorithm/#process-architecture-dsm","title":"process architecture DSM","text":"<p><pre><code>A process architecture DSM model is a visual representation of the dependencies between tasks in a process. It is used to identify potential problems or bottlenecks in the process, and to help optimize the flow of work.\n\nA DSM model consists of a matrix that represents the tasks in the process, and the dependencies between them. The matrix is typically square, with each row and column representing a task in the process. The values in the matrix represent the dependencies between tasks, where a 1 indicates that a task depends on another task.\n\nThere are two main types of DSM models:\n\nSequential DSM: In a sequential DSM model, the matrix represents the sequence of tasks in the process. The values in the matrix indicate the order in which the tasks should be performed. A lower value in the matrix indicates that a task should be performed earlier in the process.\n\nCoupled DSM: In a coupled DSM model, the matrix represents the groups of tasks that are coupled together. Tasks that belong to the same group are placed in the same column of the matrix. This type of DSM model is useful for identifying dependencies between groups of tasks, and for optimizing the flow of work between different departments or teams.\n\nDSM models can be created using a variety of tools and techniques, including spreadsheets, specialized software, or programming languages like Python. The choice of tool depends on the complexity of the process, the amount of data to be analyzed, and the specific requirements of the project.\n\nTo create a DSM that shows the sequence of tasks in a process architecture, you can modify the example code I provided earlier. Instead of using a binary matrix to represent dependencies, you can use an integer matrix to represent the sequence of tasks.\n\nHere\u2019s an example code that demonstrates how to create a sequenced process architecture DSM with four tasks:\n\n```python\nimport numpy as np\n\n# Define the tasks in the process architecture\ntasks = [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\"]\n\n# Define the sequence of tasks\nseq_matrix = np.array([\n    [0, 1, 2, 0],  # Task 1 comes first, followed by Task 2 and Task 3\n    [0, 0, 1, 2],  # Task 2 comes after Task 1, followed by Task 3 and Task 4\n    [0, 0, 0, 1],  # Task 3 comes after Task 2, followed by Task 4\n    [0, 0, 0, 0]   # Task 4 has no dependencies\n])\n\n# Create the DSM matrix\ndsm_matrix = np.zeros((len(tasks), len(tasks)))\nfor i in range(len(tasks)):\n    for j in range(len(tasks)):\n        if seq_matrix[i][j] &gt; 0:\n            dsm_matrix[i][j] = seq_matrix[i][j] - 1\n\n# Print the DSM matrix\nprint(\"DSM matrix:\")\nprint(dsm_matrix)\n</code></pre> <pre><code>There are several books and online courses available that cover process DSMs in depth. Here are some recommendations:\n\n\u201cDesign Structure Matrix Methods and Applications\u201d by Steven D. Eppinger and Tyson R. Browning - This book provides a comprehensive overview of DSM methods and their applications in product design, manufacturing, and project management.\n\n\u201cProduct Design and Development\u201d by Karl Ulrich and Steven Eppinger - This textbook includes a chapter on DSMs and their use in product design and development.\n\n\u201cApplied Design Structure Matrix Methods\u201d by Steven D. Eppinger - This book provides a practical guide to using DSMs in product design and development, with case studies and examples.\n\n\u201cSystems Engineering with DSM\u201d by Akao Yoji and Shigeyasu Uno - This book focuses on using DSMs in systems engineering, with a focus on optimizing the flow of work and information between different subsystems.\n\nAs for online courses, there are several platforms that offer courses on process DSMs, including:\n\nCoursera - Offers courses on product design and development, project management, and systems engineering that cover DSM methods and applications.\n\nedX - Offers courses on product design and development, systems engineering, and project management that cover DSM methods and applications.\n\nUdemy - Offers several courses on DSM methods and applications in product design, manufacturing, and project management.\n\nLinkedIn Learning - Offers several courses on DSM methods and their applications in product design and development.\n\nI recommend doing some research and reading reviews before choosing a book or online course that best suits your needs and interests.\n</code></pre></p>"},{"location":"decision_making_algorithm/#how-to-create-a-process-architecture-dsm","title":"How to Create a Process Architecture DSM","text":"<pre><code>Here are the steps to create a Process Architecture DSM:\n\nIdentify the processes: Identify the different processes involved in the project or system. This may involve breaking down the project or system into smaller components, such as tasks, functions, or modules.\n\nDefine the inputs and outputs: For each process, define the inputs and outputs. The inputs are the resources or data that the process requires to function, while the outputs are the results or products that the process generates.\n\nCreate a matrix: Create a matrix with rows and columns representing the different processes. The intersection of each row and column represents the interaction between the processes.\n\nFill in the matrix: For each intersection, indicate whether there is a dependency between the processes. A dependency can be either positive or negative, indicating whether the processes are mutually dependent or independent of each other.\n\nAnalyze the DSM: Analyze the DSM to identify any potential issues or bottlenecks in the process. Look for cycles or loops in the DSM, which indicate circular dependencies that can lead to delays or errors in the process. Also, look for clusters or groups of processes that interact heavily with each other, which can help to identify areas for optimization or streamlining.\n\nOptimize the DSM: Use the DSM to optimize the flow of work between different processes. Look for ways to reduce dependencies or reorganize the process to eliminate bottlenecks or inefficiencies.\n\nRefine the DSM: Refine the DSM as needed based on feedback from stakeholders and changes in the project or system.\n\nCreating a Process Architecture DSM can be a complex and iterative process that requires careful planning and analysis. It is important to involve stakeholders from different departments or teams to ensure that the DSM accurately represents the interactions between different processes and to obtain buy-in for any changes or optimizations.\n</code></pre>"},{"location":"decision_making_algorithm/#process-architecture-dsm-examples","title":"Process Architecture DSM Examples","text":"<p><pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the DSM matrix\ndsm_matrix = np.array([[' ', 'X', 'X', 'X', 'X', 'X', ' ', 'X', ' ', 'X'],\n                       [' ', ' ', 'X', ' ', 'X', ' ', ' ', 'X', ' ', 'X'],\n                       [' ', ' ', ' ', 'X', 'X', ' ', ' ', ' ', ' ', 'X'],\n                       [' ', ' ', ' ', ' ', 'X', ' ', 'X', 'X', ' ', ' '],\n                       [' ', ' ', ' ', ' ', ' ', ' ', 'X', ' ', 'X', 'X'],\n                       [' ', ' ', ' ', ' ', ' ', ' ', ' ', 'X', 'X', ' '],\n                       [' ', ' ', ' ', ' ', ' ', 'X', ' ', 'X', ' ', ' '],\n                       [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'X', 'X'],\n                       [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'X'],\n                       [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])\n\n# Define the keys\nkeys = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\n\n# Sort the DSM matrix\nsort_indices = np.argsort(keys)\ndsm_matrix = dsm_matrix[sort_indices][:, sort_indices]\nkeys = [keys[i] for i in sort_indices]\n\n# Visualize the DSM matrix\nfig, ax = plt.subplots()\nax.axis('off')\ntable = ax.table(cellText=dsm_matrix, rowLabels=keys, colLabels=keys, loc='center')\ntable.auto_set_font_size(False)\ntable.set_fontsize(14)\ntable.scale(1, 2)\n\n# Add dashed boxes for parallel tasks\nfor i in range(len(keys)):\n    if 'X' in dsm_matrix[i]:\n        box_start = np.where(dsm_matrix[i] == 'X')[0][0]\n        box_end = len(keys) - 1\n        for j in range(box_start + 1, len(keys)):\n            if dsm_matrix[i][j] == 'X':\n                box_end = j\n        table.add_cell(i, box_start, box_end - box_start + 1, 1, linestyle='--', edgecolor='black', facecolor='none')\n\n# Add solid boxes for tasks that need to be performed together\nfor i in range(len(keys)):\n    if 'X' in dsm_matrix[:, i]:\n        box_start = np.where(dsm_matrix[:, i] == 'X')[0][0]\n        box_end = len(keys) - 1\n        for j in range(box_start + 1, len(keys)):\n            if dsm_matrix[j][i] == 'X':\n                box_end = j\n        table.add_cell(box_start, i, box_end - box_start + 1, 1, linestyle='-', edgecolor='black', facecolor='gray', alpha=0.3)\n\nplt.show()\n</code></pre> <pre><code>Prof. Crawley\u2019s case studies of the Saturn V launch vehicle and the International Space Station highlight the importance of decomposition in large engineering projects.\n\nThe Saturn V launch vehicle was a massive engineering project that involved many different systems and components, including engines, fuel tanks, guidance systems, and more. To manage such a complex project, the engineering team used a top-down decomposition approach to break the overall system into smaller, more manageable subsystems. Each subsystem was then further decomposed into smaller components, until each component was small enough to be designed and built by a single engineer or team.\n\nThis approach allowed the engineering team to manage the complexity of the overall system and ensure that each subsystem and component was designed and built to meet the overall system requirements. It also allowed for more efficient design and development, as each team could focus on their specific component without worrying about how it fit into the overall system.\n\nThe International Space Station is another example of a complex engineering project that required a decomposition approach. The Space Station was designed and built by multiple international partners, each of whom contributed different subsystems and components. To manage the complexity of the project, the engineering team used a bottom-up decomposition approach, where each subsystem was designed and built independently before being integrated into the overall system.\n\nThis approach allowed each partner to focus on their specific subsystem without worrying about the other subsystems, and also allowed for easier integration of the subsystems into the overall system. However, it required careful coordination and communication between the partners to ensure that each subsystem met the overall system requirements and could be integrated into the final design.\n\nOverall, the case studies of the Saturn V launch vehicle and the International Space Station demonstrate the power of decomposition in managing complex engineering projects. Whether using a top-down or bottom-up approach, decomposition allows engineers to break down the overall system into smaller, more manageable subsystems and components, ensuring that each component is designed and built to meet the overall system requirements and can be easily integrated into the final design.\n</code></pre> <pre><code>This week's central theme was DSM, a tool that maps different entities within a complex system. DSM helps you understand the interactions among entities/subsystems/components. It also allows you to manage these interactions to align product development with the goals and needs of the system.\n\nThere are three types of DSMs:\n\nFormal or structural DSM: Used to map the formal/physical interactions among the various components of the system.\nProcess/Task DSM: Used to identify sequencing and grouping of system tasks or processes.  \nOrganization DSM: Used to map the interactions between people within an organization.\nYou also learned how to cluster entities of a DSM into groups. These groups allow you to better manage the emergence of the system. Additionally, you learned the two down, one up approach that helps generate better decomposition at Level One by looking at interactions between entities/components a level down. You saw this approach applied to real-world systems, such as the International Space Station and Saturn V.   \n\nIn the last section, you looked at change request propagation, which is a fundamental attribute of any complex system and one that an architect must consider when designing the architecture of the system. Gaining clarity on how change requests propagate through a system enables you to manage them more efficiently. For example, you can correlate the likelihood of change propagation to attributes, such as the connectedness of the components to other parts of the system. By having this visibility, you can predict how a change might affect the system and take measures to prevent the propagation of changes to other parts of the system. \n</code></pre></p>"},{"location":"decision_making_algorithm/#multivalue-tradespace-analysis","title":"multivalue tradespace analysis","text":"<pre><code>Multivalue tradespace exploration is a decision support methodology used in systems engineering, project management, and other fields to evaluate and compare various alternatives based on multiple criteria or attributes. The approach aims to help decision-makers identify optimal solutions that strike the right balance between conflicting objectives and values. The term \u201ctradespace\u201d refers to the range of design choices, options, or alternatives available to address a specific problem or achieve a goal.\n\nIn multivalue tradespace exploration, the decision-making process begins by identifying the relevant criteria or attributes that matter to the stakeholders. These criteria can include performance, cost, risk, and other factors that are important for the decision at hand. Next, a range of alternatives is generated, each representing a different combination of choices that meet the defined objectives. Then, the alternatives are evaluated and compared based on the identified criteria, often using quantitative or qualitative measures.\n\nThe exploration of the tradespace allows decision-makers to identify trade-offs between different alternatives and understand how adjusting one attribute might impact others. Visualization tools, such as Pareto frontiers, are often used to graphically represent the relationships between different criteria, enabling stakeholders to see how alternatives compare across multiple dimensions. This process helps decision-makers understand the implications of various choices and supports more informed, objective, and transparent decision-making.\n\nIn summary, multivalue tradespace exploration is a methodology that aids decision-makers in evaluating and comparing a range of alternatives based on multiple criteria. By identifying trade-offs and understanding the relationships between different attributes, stakeholders can make more informed decisions and select optimal solutions that balance competing objectives.\n</code></pre>"},{"location":"decision_making_algorithm/#multiple-criteria-decision-analysis","title":"multiple criteria decision analysis","text":"<p><pre><code>It turns out that many decisions people need to make involve multiple criteria, even though they might tend to fixate on the most important criterion. For example, when purchasing disposable goods, such as groceries, consumers may focus on price as a single criterion. However, sometimes the quality of the grocery item matters as much or more than the price. Consumers are then faced with at least two criteria that may compete with each other: Can I get a high quality good at a low price? Certainly many people search for such deals.\n\nThis problem is heightened even more with complex systems that have multiple stakeholders with (potentially) different needs. Consider, for example, designing a new smartphone. There could be multiple criteria of interest across multiple stakeholders. If you look at the phone from the user\u2019s perspective, some of the important characteristics might include UI, battery life, ruggedization, camera, screen quality, audio, form factor, ease of repair, and support. The phone manufacturer has other needs that are important \u2014 for example, production cost, manufacturing time, availability of suppliers, changes to the existing production facility, impact on existing products, and brand name.\n\nThe development team, suppliers, and other stakeholders similarly have other needs. Some of these needs might directly translate to decision criteria, while others might create one or more criteria. It is a challenge to keep track of and organize the diverse needs on a project of this scale, where the decision makers have to balance so many different decision criteria with no common units on which to compare them. For example, reducing production cost might conflict with improving battery life, or camera or screen quality; furthermore, it's difficult to quantify them on a single common unit. In these cases, it is important to have a structured and formal process that makes the comparison across the numerous attributes more efficient. Such a process also identifies any conflicts and synergies that become the basis of trade-off analyses to make better decisions.\n</code></pre> <pre><code>The table highlights the differences between value-focused thinking and alternative-focused thinking in decision-making processes. Each approach has its unique characteristics, benefits, and drawbacks, which can influence the quality and effectiveness of the decisions made.\n\nValue-Focused Thinking:\n\nValue-focused thinking emphasizes the underlying rationale for creating value and seeks to maximize the value derived from a system or decision. This approach focuses on understanding the objectives, values, and preferences of the decision-makers and stakeholders, which serve as the foundation for decision-making.\nThis method starts with defining the problem and the desired outcomes before considering potential solutions. By doing so, it ensures that the decision-making process remains centered on the core objectives and desired results.\nValue-focused thinking tends to be solution-neutral, meaning it doesn\u2019t favor any specific solution from the outset. This allows for a more open and creative exploration of potential solutions and encourages the generation of new ideas that might not have been considered otherwise.\nThe value-focused approach often requires more time and effort, as it involves a thorough examination of the problem, objectives, and criteria before evaluating and selecting a solution.\n\nAlternative-Focused Thinking:\n\nAlternative-focused thinking aims to identify the best possible solution from a predefined set of alternatives. This approach is more focused on comparing and selecting among existing options rather than exploring new possibilities.\nInstead of starting with the problem, alternative-focused thinking starts with a potential solution or a set of solutions. This can lead to a narrower perspective on the problem and may limit the range of solutions considered.\nThis method is solution-specific, as it evaluates the decision based on the available alternatives. This can result in a more constrained decision-making process and may hinder the discovery of more innovative or effective solutions.\nAlternative-focused thinking tends to be quicker, as it involves selecting a solution from a predetermined set of options. This can be beneficial when time is a critical factor, but it may also lead to less optimal decisions if the available alternatives do not fully address the problem or meet the desired objectives.\n\nIn summary, value-focused and alternative-focused thinking represent two distinct approaches to decision-making. Value-focused thinking emphasizes the underlying rationale for creating value and starts with the problem, while alternative-focused thinking aims to identify the best solution from a set of available alternatives and starts with potential solutions. Each approach has its advantages and disadvantages, and the choice between them depends on the specific context, objectives, and constraints of the decision at hand.\n</code></pre></p>"},{"location":"decision_making_algorithm/#traceability-and-communication","title":"Traceability and Communication","text":"<p><pre><code>One of the key benefits of engaging with stakeholders early and using value-focused thinking is that it increases the likelihood of success at decision time. Most systems engineering processes have key milestone reviews, the outcome of which are critical decisions that shape what a system can end up becoming. These include decisions such as concept selection, budget, and schedule allocation; requirements encoding; assigning specifications to a design; verification that a particular design meets requirements; and validation that a particular system meets the espoused needs.\n\nEvery organization may have a different set of processes and key milestones; however, usually, these are the critical times when preferences (i.e., the values) of critical stakeholders are made known. Sometimes key stakeholder needs are not even known until later in the lifecycle (i.e., new customers using a product after development). In order to reduce delays in the system development processes and increase the chances that the proposed system solutions meet or exceed expectations, you can use quantitative methods to generate compelling and aligned evidence that you are developing good solutions. For example, using quantitative value models as proxies for stakeholder needs ensures alignment of your development efforts in between those critical milestone reviews.\n\nOptional Readings\n\nThe following readings are not required for completion of the program. They are provided as resources if you would like to deepen your understanding.\n\n1. An Evidence-Based Systems Engineering (SE) Data Item Description, Conference on Systems Engineering Research. Barry Boehm et. at. 2013. Conference on Systems Engineering Research. (Links to an external site.)\n\nAbstract: Evidence-based SE is an extension of model-based SE that emphasizes not only using SysML or other system models as a basis of program decisions but also the use of other models to produce evidence that the system models describe a feasible system. Such evidence is generally desired, but it is often not produced because it is not identified as a project deliverable in a data item description (DID). Going forward with such unproven solutions frequently leads to large program overruns.\n\nBased on experience in developing and using such a DID on a very large project, let\u2019s summarize the content and form of such a DID and a rationale for its use. Its basic content is evidence that if a system were produced with the specified architecture, it would:\n\nSatisfy the specified operational concept and requirements;\nBe developable within the specified budget and schedule;\nProvide a superior return on investment over alternatives in terms of mission effectiveness; and\nProvide satisfactory outcomes for the system's success-critical stakeholders.\nOne key factor of the DID is that the content of the evidence should be risk-balanced between having too little evidence (often the case today) and having too much (analysis paralysis). Thus, it is not a one-size-fits-all DID, but it is one that has ways to be tailored to a project's most critical evidence needs.\n\n2. Multi-Attribute Tradespace Exploration with Concurrent Design as a Value-Centric Framework for Space System Architecture and Design. Adam Ross, Masters Thesis, 2003.  Download Multi-Attribute Tradespace Exploration with Concurrent Design as a Value-Centric Framework for Space System Architecture and Design. Adam Ross, Masters Thesis, 2003. \n\nAbstract: The complexity inherent in space systems necessarily requires intense expenditures of resources both human and monetary. The high level of ambiguity present in the early design phases of these systems causes long, highly iterative, and costly design cycles, especially due to the need to create robust systems that are inaccessible after deployment. This thesis looks at incorporating decision theory methods into the early design processes to streamline communication of wants and needs among stakeholders and between levels of design. Communication channeled through formal utility interviews and analysis enables engineers to better understand the key drivers for the system and allows for a broad and more thorough exploration of the design tradespace. \n\nMulti-attribute tradespace exploration (MATE), an evolving process incorporating decision theory into model and simulation-based design, has been applied to several space system projects. The conclusions of these studies indicate that this process can improve the quality of communication to more quickly resolve project ambiguity and enable the engineer to discover better value designs for multiple stakeholders. Sets of design options, as opposed to point designs, in addition to the structure of the solution space, can be analyzed and communicated through the output of this process. \n\nMATE is also being integrated into a concurrent design environment to facilitate the transfer of knowledge of important drivers into higher fidelity design phases. Formal utility theory provides a mechanism to bridge the language barrier between experts of different backgrounds and differing needs (e.g., scientists, engineers, and managers). MATE with concurrent design (MATE-CON) couples decision makers more closely to the design and, most importantly, maintains their presence between formal reviews. The presence of a MATE-CON chair in the concurrent design environment represents a unique contribution of this process. In addition to the development of the process itself, this thesis uses design structure matrix (DSM) analysis to compare the structure of the MATE-CON process to that of the NASA systems engineering process and that of a US space organization to gain insights into their relative temporal performance. Through both qualitative and quantitative discussions, the MATE-CON process, which is derived from the fundamental concept of engineering, is shown to be a \u201cbetter\u201d method for delivering value to key decision makers. \n</code></pre> <pre><code>The book referenced is not a book but rather a conference paper titled \u201cAn Evidence-Based Systems Engineering (SE) Data Item Description,\u201d authored by Barry Boehm et al. and presented at the 2013 Conference on Systems Engineering Research (CSER). This paper focuses on the development of an evidence-based systems engineering (SE) data item description (DID) that aims to improve the effectiveness and efficiency of systems engineering practices.\n\nThe authors propose a DID that is based on empirical evidence from past systems engineering projects, which can help organizations better understand the factors that contribute to project success or failure. By leveraging lessons learned from previous projects, the proposed DID can guide systems engineers in identifying and managing critical elements that influence project outcomes.\n\nThe paper discusses the key components of the evidence-based DID, including the purpose, scope, and approach for collecting and analyzing relevant data from past systems engineering projects. It also presents a case study that demonstrates the application of the evidence-based DID in a real-world project.\n\nOverall, the goal of the paper is to contribute to the advancement of systems engineering practices by promoting the use of empirical evidence in decision-making and project management. By applying an evidence-based DID, organizations can improve the effectiveness of their systems engineering processes, reduce risks, and enhance the chances of project success.\n</code></pre> <pre><code>\u201cMulti-Attribute Tradespace Exploration with Concurrent Design as a Value-Centric Framework for Space System Architecture and Design\u201d is a Master\u2019s thesis written by Adam Ross in 2003. The thesis presents a value-centric framework for evaluating and designing space system architectures using multi-attribute tradespace exploration (MATE) and concurrent design principles.\n\nThe main objective of the research is to develop a systematic approach to support decision-making in the early stages of space system design by identifying and evaluating various alternatives based on multiple criteria or attributes. This is done by integrating MATE, a method that allows decision-makers to analyze trade-offs between different alternatives across multiple dimensions, with concurrent design principles that emphasize simultaneous consideration of all aspects of the system during the design process.\n\nThe value-centric framework proposed in this thesis aims to shift the focus from merely evaluating available alternatives to understanding and maximizing the value delivered by the system. This is achieved by identifying stakeholder preferences, objectives, and values, which serve as the foundation for decision-making. The MATE process enables stakeholders to explore the tradespace and assess the relationships between different design attributes, helping them to identify the most suitable solutions that balance competing objectives.\n\nThe thesis also demonstrates the application of the proposed framework in a case study involving the design of a space-based Earth observation system. The case study illustrates how the value-centric framework and MATE can be used to inform the decision-making process and facilitate the selection of an optimal space system architecture that meets stakeholder needs and maximizes value.\n\nIn summary, Adam Ross\u2019s Master\u2019s thesis presents a value-centric framework that combines multi-attribute tradespace exploration and concurrent design principles for space system architecture and design. The research aims to support decision-making in the early stages of design by enabling stakeholders to assess trade-offs between different alternatives and maximize the value derived from the system.\n</code></pre></p>"},{"location":"decision_making_algorithm/#diagram-of-design-value-loop","title":"Diagram of design value loop","text":"<pre><code>Definitions:\n\nDesign value loop perspective is a problem-to-solution decision-making approach that uses three types of models in two categories \u2014 evaluative models (performance and cost) and value models \u2014 to encourage feedback and the explicit separation of objective (e.g., evaluative models) and subjective (e.g., value) considerations. The goal in this perspective is to find alternatives with a design space that best satisfies expectations on the value space. The basic design value loop includes a design space that contains all the proposed solutions that could address the problem. In order to evaluate the design space, let\u2019s split the evaluation space further into three spaces: the resource space, the performance space, and the value space. The resource space defines what resources or costs are involved in solving the particular problem. These costs and resources are calculated using the cost model. Next is the performance space, which defines the performance criteria that the potential design solutions should meet in order to be considered. These performance criteria are calculated using certain performance models. The third and final one is the value space, which defines the set of value related attributes and criteria to evaluate the potential design space. These value criteria are over and above the resource and performance criteria mentioned earlier, and these attributes are identified using value models, which will be discussed in more detail in the next sections. \nDesign space is the span of possible alternative solutions to the system design problem, from which one or more could be picked and are under the control of the designer, usually consisting of distinct concepts, architectures, and particular designs.\nCost models evaluate potential design in terms of the resources (usually different types of cost, such as design, develop, manufacture, test, operate, and lifecycle) required for their realization.\nPerformance models evaluate potential design in terms of capabilities or performance they provide to help address the underlying goals and objectives. These are usually related to the behavior of the design, such as top speed, range, efficiency, etc.\nValue models assign quantitative scores to potential design in terms of the perceived satisfaction, or benefit at cost, they generate while addressing the underlying goals and objectives. \nValue space is the span of possible alternative solutions to the system design problem, from which one or more could be picked and are under the control of the designer, usually consisting of distinct concepts, architectures, and particular designs.\n</code></pre>"},{"location":"decision_making_algorithm/#single-vs-multiple-attribute-approaches","title":"single vs multiple attribute approaches","text":"<pre><code>There are many single attribute techniques for translating criteria into value metrics, approximating how decision makers interpret the value of different levels of a given criterion. Two common approaches are described below.\n\nNet Present Value (NPV) Method\n\nWith this approach, you calculate a single number to roll up a time series of a metric (usually a cash flow or other monetary stream). It relies on two mathematical abstractions: time period and discount rate. The time period is the time frame discretization of the time-series metric; the discount rate is the exponential decay rate of loss of perceived benefit of that stream over that time period (i.e., a dollar today is worth more than a dollar tomorrow). Alternatives are scored according to their aggregated NPV, and those with the highest score are deemed the best.\n\nSingle Attribute Utility (SAU) Method\n\nWith this approach, you develop a model that quantifies the level of perceived satisfaction of various levels of an attribute under uncertainty. The axioms of this method require a monotonic curve (increasing or decreasing) that ranges (typically) from 0 (least acceptable level) to 1 (most desirable level) across the acceptance range of the considered attribute. Attribute scores above the most desirable level are assigned a \u201c1,\u201d while attribute scores below the minimum acceptable level are assigned \u201cinfeasible.\u201d\n\nAlternatives are assessed in terms of the attribute(s), and a single attribute utility score is interpolated from the SAU function based on the attribute level. Alternatives with the highest SAU scores are the best, although many could tie at 1 and would be considered an equivalently saturating perceived benefit. It is important to recognize that in this implementation of SAU, a score of 0 is still minimally acceptable, while a score of \u201cinfeasible\u201d means that an alternative is unacceptable for having an attribute level below the minimum acceptable threshold.\n\nNote: Generally, any function mapping attribute levels to degree of satisfaction is called a \u201cvalue function.\u201d A utility function is a special case of a value function that also takes into account uncertainty, which is the degree of satisfaction for an attribute level under uncertainty.\n\nYou must use multi-attribute approaches when there is more than one attribute that determines value. Various example multi-attribute methods of quantifying and comparing value are provided below. \n\nLexicographic (Decision Matrix) Method\n\nIn this method, attributes or system goals are ranked according to the stakeholders\u2019 preference. Then, all the alternatives are scored based on the most important attribute (as perceived by stakeholders), either using natural units or by normalizing the units. The alternatives are then ranked based on their calculated score. If there is a tie, you break the tie with the second most important attribute score.\n\nPugh (Controlled Convergence) Method \n\nIn Pugh, a baseline alternative/solution is first selected. Then, each attribute of the baseline is compared with the corresponding attribute for the other available alternatives and marked with either \u201c+\u201d, \u201cS\u201d or \u201c-\u201d: \u201c+\u201d (Plus) if the attribute value of the alternative is better than that of the baseline; - (Minus) if the attribute value of the alternative is worse than that of the baseline; and S (Same) if it is the same as that of the baseline. \n\nOnce all the alternatives have been compared, each of the +, S and - values for every alternative are summed. The alternative that has the best scores for each of the three comparison values is ranked first, and so on. \n\nQFD-Like Method\n\nIn this method, attributes are ranked according to the stakeholders\u2019 preference and assigned weights (they typically add up to 1). The scoring of the alternatives for each of the given attributes is done using a scale with four values: 0 (none), 1 (weak), 3 (moderate), and 9 (strong). Once all the attributes of every alternative have been scored, a weighted sum of the scores based on the attribute ranking is calculated. Alternatives are then ranked according to their weighted sum from the highest to the lowest.\n\nModified Decision Matrix Method \n\nThe modified decision matrix method is similar to the lexicographic method. First, attributes are ranked by weight according to the stakeholders\u2019 preference. Then, all the alternatives are scored on each of the given attributes either using natural units or by normalizing the units. A weighted score for each attribute for each alternative is then calculated by multiplying each individual attribute score times its attribute weight. Then, the weighted attribute scores are summed for each alternative, resulting in the overall weighted score. Once the overall weighted scores are calculated, each alternative is ranked from the highest to the lowest overall weighted score.\n\nMulti-Attribute Utility (MAU) Method\n\nFor each attribute, you create a single attribute utility curve for that attribute, which maps the acceptance range for that attribute on a 0 (worst) to 1 (best) scale. Then, you assign weights for each of the attributes based on how well they satisfy the stakeholders\u2019 objectives. Next, find the single attribute utility scores for each attribute across all of the alternatives by interpolating its utility value from the appropriate single attribute utility curve. Finally, create a score for each alternative by summing all of the utility values multiplied by their corresponding attribute weights. The alternatives with the highest score values are ranked first, and so on. \n</code></pre>"},{"location":"decision_making_algorithm/#other-models","title":"Other models","text":"<pre><code>Cost-Benefit Analysis (CBA)\n\nCost-benefit analysis is a prescriptive methodology that quantifies the net benefits yielded by a system relative to its respective net costs. CBA serves as a useful value-centric tool for cardinally weighting the positive and negative effects of various outcomes and combining them into a single metric. Most often, the costs and benefits are quantified using a monetary metric, which requires that all the direct costs and benefits associated with the system are transformed into monetary units. However, any cardinal scale may be used for CBA.\n\nCumulative Prospect Theory (CPT)\n\nCPT is a descriptive-based tool developed in response to the belief that the normative expected utility theory does not appropriately characterize decision making under uncertainty. It is an improvement on prospect theory. CPT is directly aimed at modifying utility theory to account for observed violations of expected utility theory while making as few modifications as possible. The result of CPT is evident in its respective loss-gain, or \u201cS\u201d, curve, which forms a value function representing the behavioral characteristics of stakeholders under uncertainty, much as utility theory does, but in monetary terms instead. \n\nValue Functions (VFs)\n\nValue functions can be broadly categorized as functions that quantify, in any cardinal unit of measure (although usually in monetary units), the intrinsic value of a system, which in turn is determined under certainty, and VFs may be ascertained so that they exist as an ordinal or cardinal function. VFs capture the elicitation of stakeholder preferences about the outcome of a situation, which is known with certainty, in terms of how much they would be willing to pay to have that outcome occur or not occur. Hence, VFs most often assume a monetary form and embody a stakeholder\u2019s change in wealth relative to a given set of outcomes. \n\nAnalytic Hierarchy Process (AHP)\n\nAHP is a method for systematically decomposing a system into a hierarchy of desirable attributes that aggregate to an overarching goal. The manifestation of this is a decision tree (or matrix), where the highest order of the tree/matrix is the goal to be achieved, and logically disseminating from this are a set of decisions, or attributes, where each attribute aggregates a set of attributes that collectively comprise that attribute at the next higher level in the hierarchy. Through a simple algorithm and appropriate weighting of each ensuing node of the decision tree via pairwise comparisons, this hierarchy is then used to mathematically inform decisions as to the most valuable system or decision meeting the overarching goal. \n\nThere are many value models in use. In general, value models are a quantitative proxy for a decision maker, and seek to map \u201cdegree of satisfaction\u201d across a possible attribute range or set of ranges. Value models include various single and multiple attribute transformations. The key takeaway is that all value models are abstractions. Use of particular value models should take into account their assumptions and applicability, along with considerations for how they will be used in the decision-making process (e.g., availability of data and transparency of recommendations)\n</code></pre>"},{"location":"decision_making_algorithm/#lexicographic-method","title":"Lexicographic Method","text":"<pre><code>The lexicographic method is a multi-attribute method that is used to rank alternatives based on a set of attributes. The method is based on the idea that the decision maker has a set of attributes that are important to them, and that the decision maker ranks the attributes in order of importance. The method is also known as the decision matrix method.\n\nThe lexicographic method is a decision-making technique used to rank or select alternatives based on multiple criteria or attributes. In this method, the decision-maker orders the criteria in terms of importance or priority. The alternatives are then compared based on the most important criterion first. If there is a clear winner based on the most important criterion, the decision is made. If not, the decision-maker proceeds to the next most important criterion and continues this process until a winner is found or all the criteria have been considered.\n\nThe lexicographic method can be described in the following steps:\n\nIdentify the alternatives and criteria: List all the available alternatives and the criteria relevant to the decision-making process.\nPrioritize the criteria: Order the criteria by importance, with the most important criterion ranked first and the least important criterion ranked last.\nCompare alternatives based on the most important criterion: Evaluate the alternatives based on the highest-ranked criterion. If one alternative is clearly superior to the others, it is selected as the best choice. If there is a tie, proceed to the next step.\nCompare alternatives based on the next most important criterion: If a tie exists, evaluate the tied alternatives based on the next highest-ranked criterion. If a clear winner emerges, it is selected as the best choice. If there is still a tie, continue with the next criterion.\nRepeat the process until a winner is found or all criteria have been considered: Continue comparing the alternatives based on the prioritized criteria until a clear winner is identified or all criteria have been exhausted. If a winner is not found after considering all criteria, the decision-maker may need to revisit the criteria, priorities, or decision-making process.\n\nThe lexicographic method is a simple and intuitive decision-making technique, but it has some limitations. It does not account for the relative importance of criteria beyond their ordinal ranking and does not allow for trade-offs between criteria. This can lead to biased or suboptimal decisions, especially when the differences between criteria are small or the relative importance of criteria is not accurately captured by their ordinal ranking. In such cases, alternative decision-making techniques, such as the weighted sum method or multi-criteria decision analysis, may be more appropriate.\n\nGiven the limitations of the lexicographic method, a better alternative for decision-making could be the Analytic Hierarchy Process (AHP) or Multi-Criteria Decision Analysis (MCDA). Both of these methods are more robust and capable of addressing the complexities that arise when dealing with multiple criteria and their relative importance.\n\nAnalytic Hierarchy Process (AHP): AHP is a structured decision-making technique that uses a hierarchical framework to evaluate and prioritize alternatives based on multiple criteria. In AHP, decision-makers assign relative importance (weights) to the criteria and pairwise compare the alternatives for each criterion. The process involves the following steps:\n\nDefine the problem and identify the alternatives and criteria.\nOrganize the criteria into a hierarchical structure.\nPerform pairwise comparisons of criteria to establish their relative importance (weights).\nPerform pairwise comparisons of alternatives for each criterion.\nCalculate the overall scores for each alternative by combining the pairwise comparisons and criteria weights.\nRank the alternatives based on their overall scores and select the one with the highest score.\n\nMulti-Criteria Decision Analysis (MCDA): MCDA is a general term for a group of decision-making techniques that involve evaluating and ranking alternatives based on multiple criteria. These techniques take into account the relative importance (weights) of the criteria and often allow for trade-offs between them. Some popular MCDA methods include the Weighted Sum Model (WSM), the Weighted Product Model (WPM), and the Technique for Order of Preference by Similarity to Ideal Solution (TOPSIS). These methods involve assigning weights to criteria, scoring alternatives based on the criteria, and aggregating the scores to rank the alternatives.\n\nBoth AHP and MCDA offer more flexibility and transparency in the decision-making process compared to the lexicographic method. They can accommodate the relative importance of criteria and allow for trade-offs, resulting in more accurate and well-informed decisions. However, they can also be more complex and time-consuming to implement, requiring additional data and expertise. Choosing the most appropriate method will depend on the specific context and requirements of the decision at hand.\n\nThe Pugh Method, also known as the Pugh Matrix or Pugh Concept Selection, is a decision-making technique used to compare and rank multiple alternatives based on multiple criteria. It is particularly useful in the early stages of product design or system development when multiple concepts are being evaluated. The method uses a structured approach that enables decision-makers to systematically compare alternatives against a chosen baseline or reference concept, resulting in a better understanding of the advantages and disadvantages of each option.\n\nHere are the steps to implement the Pugh Method:\n\nDefine the problem and identify the alternatives and criteria: Clearly state the problem and list all the potential alternatives (concepts or solutions) and the criteria relevant to the decision-making process.\n\nChoose a reference concept or baseline: Select one of the alternatives as a reference or baseline against which all other alternatives will be compared. The choice of reference concept can be arbitrary, or it can be an existing solution, a best-in-class product, or a concept that is familiar to the decision-makers.\n\nCreate a decision matrix: Set up a matrix with the alternatives listed in rows and the criteria listed in columns. Place the reference concept in the first row.\n\nPerform pairwise comparisons: For each criterion, compare the remaining alternatives to the reference concept. If an alternative is better than the reference concept for a specific criterion, assign a score of +1. If it is worse, assign a score of -1. If there is no significant difference, assign a score of 0.\n\nCalculate the total scores for each alternative: Sum the scores for each alternative across all criteria to obtain the total score.\n\nRank the alternatives: Rank the alternatives based on their total scores, with higher scores indicating better performance relative to the reference concept.\n\nIterate and refine: The Pugh Method can be an iterative process. If needed, repeat the process with a new reference concept or revised criteria to obtain a more accurate ranking of the alternatives.\n\nThe Pugh Method is a simple and intuitive decision-making technique that can be used to compare and rank multiple alternatives based on multiple criteria. It is particularly useful in the early stages of product design or system development when multiple concepts are being evaluated. The method uses a structured approach that enables decision-makers to systematically compare alternatives against a chosen baseline or reference concept, resulting in a better understanding of the advantages and disadvantages of each option.\n</code></pre>"},{"location":"decision_making_algorithm/#modified-decision-matrix-method","title":"Modified Decision Matrix Method","text":"<p><pre><code>Method Overview\nRank the attributes according to the system objectives.\nScore the alternatives with their natural units and normalize the score.\nSelect the alternatives with the highest weighted sum across the normalized attribute score.\n</code></pre> <pre><code>Operationalizing value with attributes refers to the process of breaking down a broader concept of value into specific, measurable, and tangible attributes that can be used to assess, compare, and optimize various aspects of a product, service, or system. This approach helps organizations make informed decisions based on objective and reliable data. Here are the steps to operationalize value with attributes:\n\nIdentify the overall value: Begin by defining the overarching concept of value for your organization or project, which might include factors such as customer satisfaction, profitability, or market share.\n\nBreak down value into components: Divide the overall value into smaller, more manageable components. These could be subcategories that contribute to the larger concept of value, such as cost-effectiveness, efficiency, and quality.\n\nDefine specific attributes: For each component, identify specific attributes that can be measured and analyzed. These attributes should be concrete and quantifiable, such as response time, error rate, or customer ratings.\n\nEstablish measurement criteria: Develop a clear and consistent method for measuring each attribute. This could involve creating scales, setting benchmarks, or using existing industry standards.\n\nCollect data: Gather information on each attribute, either through existing data sources or by conducting new research. Make sure the data is accurate, reliable, and up-to-date to ensure informed decision-making.\n\nAnalyze and interpret data: Use statistical methods or qualitative analysis techniques to draw insights from the data. Identify trends, patterns, and areas of improvement related to each attribute.\n\nPrioritize attributes: Determine the importance of each attribute in relation to the overall value. This can be done using techniques like the Analytic Hierarchy Process (AHP) or by conducting stakeholder surveys.\n\nSet goals and targets: Based on the analysis, set realistic and achievable targets for each attribute. These should be aligned with the organization\u2019s broader objectives and strategies.\n\nImplement improvements: Develop and implement action plans to improve performance on the prioritized attributes. This might involve process changes, new investments, or employee training.\n\nMonitor progress: Regularly track progress towards the set goals and targets. Adjust the action plans as needed to ensure continuous improvement and optimization of value.\n\nBy operationalizing value with attributes, organizations can gain a better understanding of their performance, make data-driven decisions, and prioritize resources to maximize value creation.\n</code></pre></p>"},{"location":"decision_making_algorithm/#axioms-of-utility-theory","title":"Axioms of Utility Theory","text":"<pre><code>Axioms of Utility Theory\nOne of the benefits of using an axiomatically based theory is that it is \u201ccorrect\u201d as long as the axioms hold. Such theories for decision making are deemed to be normative. That is, they describe how people should make decisions (if they adhered to the axioms, usually related to concepts of being \u201crational\u201d). Research has shown that people do not really make decisions in such a \u201crational\u201d manner but rather succumb to various heuristics and biases due to limited resources, such as attention, cognitive capacity, memory, training, and available information.\n\nHowever, after being shown the axioms, decision makers often express a desire to make decisions in such a way that the axioms do hold. This means you can use normative decision theories, such as utility theory, in a prescriptive manner. That is, the decisions made with the assistance of these techniques could be better than those made unassisted. Any user of such decision theories needs to understand the underlying axioms and how to best apply them (i.e., utility theory is unlikely to predict how a decision maker might make a decision if left unassisted).\n\nThe existence of single attribute utility theory, as described in the previous section, relies on five basic axioms (de Neufville 1990) \u2014 that is, the assumptions about the situations. These axioms are:\n\nRelative Preference  \nAs the name suggests, the axiom states the existence of relative preference from a set of all of the outcomes. It is also called the axiom of completeness, and it basically asserts that, for every pair of outcomes from a set of all of the outcomes, a person will either prefer one or the other or will show indifference between the two options. \n\nMathematically, this can be represented as one of the following: \n\nX1 &gt; X2          \nX1 ~ X2\nX1 &lt; X2\nThis represents reasonable assumptions. In real life, people may encounter situations where the possible outcomes have slightly different attributes, and thus they may be undecided regarding which solution to pick or to fairly assess or compare them on the same scale. But, even in these situations, they eventually make a decision that is aligned with their preference for the given choices.\n\nTransitivity\nThe axiom of transitivity states that you can infer a preference order between a pair of consequences given that you know the preference order between those consequences and a given intermediate consequence. In other words, given X1, X2 and X3, if you know that X1 &gt; X2 and X2 &gt; X3, then you can say that X1 &gt; X3.\n\nThis assumption is valid for a group with a common set of attributes or preferences. However, this might not hold for a group that has a diverse set of attributes, since the implied conditions that determine a preference order between one pair of consequences might not be valid for another pair. \n\nMonotonicity\nThe axiom of monotonicity, in simple terms, states that more of a good thing is better. A more formal definition states that the value of an item in a series is the weighted average of the values of the extreme. Given the greatest and the least value as Xmax and Xmin respectively, for all Xi, Xj within the series, where Xmax &gt;= Xi, Xj &gt;= Xmin, there is a number w that ranges between zero and one (0 w 1), such that some other Xk, lying between Xi and Xj, can be expressed as V(Xk) = wV(Xi) + (1 - w)V(Xj).\n\nThis can only be true if the preferences are monotonic. \n\nExistence\nThis axiom of utility functions is straightforward: it states that the probability of each outcome (consequences) exists and could be quantified for the given set of possible outcomes. The axiom is easy to verify as valid; however, it might be difficult to properly and accurately quantify the probability of some specific outcomes.\n\nSubstitution\nAs the name suggests, the probability monotonicity axiom states that a person prefers a greater chance of receiving a prize, given a particular outcome, rather than a lesser chance. In other words, given that we have two choices, each with the same uncertain outcomes X1 and X2, where X1 is preferred to X2, a person will prefer the choice with the greater probability of getting X1 (and the complementary, lesser probability of getting X2). The axiom assumes that the person\u2019s preferences are linear in probability \u2014 i.e., for a given outcome, the better (or worse, depending on the criteria) the probability, the more value the person derives.\n</code></pre>"},{"location":"decision_making_algorithm/#considerations-for-utility-elicitation","title":"Considerations for Utility Elicitation","text":"<pre><code>In addition to ensuring adherence to the assumptions of the theory, it is important to recognize the limitations in implementation as well. Decision makers must have preferences about the attributes for them to be useful. A common mistake made when implementing the multi-attribute utility approach is to select the attributes for the decision makers. The attribute selection process should be performed in close collaboration with decision making, actively involving them in the discussions until an agreed set of attributes have been derived. \n\nAnother issue regarding attributes is the need to ensure that they are the appropriate decision metrics for the process. According to Smith et al. (1990), such sets must satisfy the following characteristics:\n\nCompleteness: The set characterizes all important factors to be considered in the decision-making process.\nComprehensiveness: Each attribute adequately characterizes its associated objective.\nImportance: Each attribute is significant in that it has the potential to affect the preference ordering.\nMeasurability: Each attribute can be somehow quantified.\nFamiliarity: Decision makers must have a preference about each attribute. \nNon-redundancy: Two attributes should not measure the same objective to avoid double counting.\nIndependence: Each attribute must be perceived as independent of one another in order to ensure MAUA form (see Utility Independence Assumption).\nIt is important to remember that the human mind can typically only consider 7 \u00b1 2 attributes simultaneously (Miller 1956). Beyond seven attributes, the decision maker will tend to focus solely on the most important attributes and will underweight the additional attributes. (This number will limit the number of attributes that can be considered during the corner point interviews.)\n\nAdditionally, it is important to be aware of human cognitive limitations. Kahneman and Tversky (1979) proposed that people in fact do not make decisions based on the absolute level of an outcome but rather in terms of gains or losses. They outlined four biases in how people actually make decisions that are inconsistent with traditional utility theory. These biases are: \n\nPeople make decisions based on changes of wealth rather than the absolute level.\nPeople are loss-averse. People weight a loss of $100 about twice as much as a gain of $100.\nPeople are risk-seeking in the loss domain and risk-averse in the gain domain.\nPeople subjectively interpret probabilities.\nWhen eliciting utility information from decision makers (either formally or informally), it is important to put the interviewee at ease and appreciate the challenge of uncovering latent value models when a person is limited by the above issues. In particular, there are a number of techniques developed over the years to help reduce the stress of an interview, speed up the process itself, and provide for validation of the results. Typically interviews involve three rounds: \n\nConversation around what the decision criteria might be (e.g., brainstorming, value-focused thinking, or value hierarchies) and results in a ranked list of attributes with their associated acceptance ranges.\nConfirmation of the attributes and elicitation of their single attribute utility functions, usually via a lottery-based questionnaire (see de Neufville 1990, for example) and weights for the multi-attribute utility function.\nValidation of the single and multi-attribute utility functions via a number of alternatives rank comparisons (i.e., decision maker ranks alternatives by judgment and is compared to rankings by utility functions) and consistency checks (e.g., re-elicitation of points within utility functions). A caution here is that utility theory is normative and not descriptive, and therefore unaided decision making is likely to diverge from the predictions of the theory. This means that \u201cvalidation\u201d is more of a conversation rather than a simple check that the utility approach comes to the same conclusion as the decision maker.\n</code></pre>"},{"location":"decision_making_algorithm/#considerations-for-multiple-decision-makers","title":"Considerations for Multiple Decision Makers","text":"<pre><code>One of the biggest concerns when applying decision analysis is effectively managing the issue of multiple decision makers. Different decision makers might access a system on different attributes, or they might have a different preference hierarchy for the attributes. In either case, a different utility function for each of the stakeholders is required, and it is difficult to compare values across these different utility functions. Only by making certain value assumptions can a single aggregate utility metric be defined.\n\nFor example, preferences of people can be stack ranked from the most important to the least important, which allows you to aggregate utility using weighted preference. Keeney and Raiffa (1993) recommend using a \u201csupra-decision maker\u201d model, where one person creates a multi-attribute utility function whose single attribute utility functions are the multi-attribute utility functions of each decision maker. The weights for each decision maker are then subjectively determined by the supra-decision maker.\n\nEconomist Kenneth Arrow won the Nobel Prize partly for showing that no aggregation method exists without making someone dictator (i.e., imposing preferences on others); or, in other words, no consistent, equitable method for social choice exists (Arrow 1963). Scott and Antonosson (2000), however, propose that Arrow\u2019s Theorem may not apply to engineering design, since it is not a \u201csocial choice problem.\u201d Comparisons of strength of preference, coupled with questioning the necessity of equity for engineering design, may allow for the creation of aggregate decision maker functions for design.\n\nConsiderations for Multiple Decision Makers.png \n\nIt is often most useful to keep decision maker preferences separate, as this avoids potential imposition of preferences and running afoul of the issues above. Not aggregating the decision makers avoids the creation of intransitivity of the group preference, allowing the decision makers to resolve conflicts via negotiation (Fitzgerald and Ross 2014). In this way, the designers would avoid biasing the decision tools and instead highlight important tensions in the preferences and their consequences on the set of alternatives.\n\nReferences\n\nKeeney, R. L. and Raiffa, H. 1993. Decisions with Multiple Objectives \u2014 Preferences and Value Trade-Offs. Cambridge, Cambridge University Press.\nArrow, K. J. 1963. Social Choice and Individual Values. New Haven, Yale University Press.\nScott, M. J. and Antonosson, E. K. 2000. Arrow's Theorem and Engineering Design Decision Making. Research in Engineering Design 11(4): 218-228.\n</code></pre>"},{"location":"decision_making_algorithm/#week-8-take-aways","title":"week 8 take aways","text":"<pre><code>Framing Decision Making and Trade-Offs\nIntro to core concepts: Value is benefit at cost that a stakeholder cares about, addressing three concepts: 1) degree of satisfaction (i.e., benefit); 2) resources used (i.e., cost); 3) degree of importance (i.e., priority); using attributes as multiple decision criteria, cost versus benefit framing decision opportunities, exploring many potential alternatives in a tradespace.\nExamples of multiple criteria decisions: Cell phone (user: UI, battery life, ruggedization, camera, screen quality, etc.; manufacturer: production cost, manufacturing time, availability of suppliers, changes to existing production facility, etc.)\nValue-Focused Thinking and Value-Driven Design\nValue- vs. alternative-focused thinking: Alternative-focused thinking identifies potential solutions for the problem up front and then compares alternatives to select the one that best solves the given problem. Value-focused thinking starts with the problem, trying to formulate in a more solution-neutral manner, identifying how to maximize the value derived from the system. Using (preferably solution-neutral) values as a focus, it encourages creative problem solving and opens the solution space.\nTraceability and communication support: One of the key benefits of engaging with stakeholders early and using value-focused thinking is that it increases the likelihood of success at decision time.\nDeveloping Value Models\nOverview of value models: Design-value loop perspective, evaluative models as performance and cost models, and value models.\nAlternative single and multi-attribute value models: Some examples of single attribute approaches are \"Net Present Value\" and \"Single Attribute Utility\"; examples of multi-attribute approaches are Lexicographic, Pugh, QFD-like, Modified Decision Matrix, and Multi-Attribute Utility (MAU).\nExample application of value models: Buying a car had different rankings of four alternatives via Lexicographic, Pugh, QFD-like, Modified Decision Matrix, and Multi-Attribute Utility methods. Each method has a different level of effort required and different degree of confidence in its results. It is important to understand the advantages and limitations of each method before using them.\nOperationalizing Value Models\nOperationalizing value with attributes: An attribute is a decision maker-perceived metric of how well the decision maker\u2019s perceived objective is met; a decision maker is a type of stakeholder who has influence or control over driving the needs and setting the goals for the system. \nAxioms of utility theory: Normative theories are useful even when known to be descriptively invalid, as they can be used prescriptively to help improve decision making if decision makers want the axioms to hold. The axioms of utility theory are: relative preference, transitivity, monotonicity, existence, and substitution.\nConsiderations for utility elicitation: Decision makers must have preference over the attributes, and the characteristics of the set include completeness, comprehensiveness, importance, measurability, non-redundancy, and independence. Human cognitive limitations lead to the recognition that only about five attributes can be considered simultaneously. Likewise, people tend to think about changes in levels to be loss-averse, risk-seeking in the loss domain, risk-averse in the gain domain, and tend to interpret probabilities subjectively. When interviewing people, it is important to put them at ease and frame questions in the proper context. Typically, utility information is elicited in three rounds: 1) identification of attributes and their rankings; 2) confirmation of attributes and elicitation of single-attribute utility functions and multi-attribute utility weights; 3) validation of the elicited information.\nConsiderations for multiple decision makers: Technically, it is unsound to aggregate utility across decision makers, since no absolute universal scale exists to convert across their individual scales. In hierarchical organizations, use of supra-decision makers may be possible, with subordinates\u2019 multi-attribute utility (MAU) as attributes for the higher-level decision maker. The best practice is to keep decision maker utilities separate and leverage computational or negotiation-based techniques to find win-win solutions for all parties.\nValue hierarchies: When there are more than 3-5 attributes, we can often simplify the problem via decomposition and abstraction using a hierarchy. Parents are decomposed into children, with no more than 3-5 children for a given parent. Weights can be assigned to each node (locally) and via aggregation functions, and global weights can be determined. When all children independently contribute value, linear weighted sums can be used, and all weights for children of a given parent must add up to one.\n</code></pre>"},{"location":"merch_sql/","title":"Merch SQL","text":""},{"location":"merch_sql/#hourly-sales","title":"Hourly Sales","text":"<pre><code>SELECT\nTRY_TO_NUMBER(LUS.DISTRICT_CD)::INTEGER AS DISTRICT_ID\n,HDR.STORE_ID\n,REF.RTL_DEPT_ID\n,LDAY.DAY_OF_FISCAL_WEEK_NBR AS WEEKDAY_NBR\n,HDR.TXN_DTE\n,EXTRACT(HOUR FROM HDR.TXN_TM) AS TXN_HOUR\n,SUM(ITM.NET_AMT) AS SALES\n,COUNT(DISTINCT HDR.TXN_ID) AS BASKETS\n\nFROM EDM_VIEWS_PRD.DW_EDW_VIEWS.TXN_HDR HDR\nINNER JOIN EDM_VIEWS_PRD.DW_EDW_VIEWS.TXN_ITEM ITM\nON HDR.TXN_DTE = ITM.TXN_DT\nAND HDR.TXN_ID = ITM.TXN_ID\nAND ITM.DTL_SUBTYPE_ID NOT IN (4)\nAND HDR.TXN_DTE BETWEEN '06/20/2021' AND '09/11/2021'\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE LUS\nON TRY_TO_NUMBER(LUS.RETAIL_STORE_FACILITY_NBR)::INTEGER = HDR.STORE_ID\nAND LUS.DIVISION_ID = '19'\nAND LUS.RETAIL_STORE_FACILITY_NBR NOT IN ('1542','4904')\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.D0_FISCAL_DAY LDAY\nON LDAY.CALENDAR_DT = HDR.TXN_DTE\nINNER JOIN EDM_VIEWS_PRD.DW_EDW_VIEWS.DEPT_XREF REF\nON REF.TLOG_DEPT_ID = ITM.STORE_DEPT_ID\nAND HDR.STORE_ID = REF.STORE_ID\ngroup by 1,2,3,4,5,6;\n</code></pre>"},{"location":"merch_sql/#category-report-by-week","title":"Category Report by Week","text":"<pre><code>select\nFISCAL_WEEK_ID AS week_id,\nFISCAL_PERIOD_ID as PERIOD_ID,\nFISCAL_QUARTER_ID as QUARTER_ID,\nDivision_nm,\nDISTRICT_ID,\nRETAIL_STORE_FACILITY_NBR as STORE_ID,\ngroup_nm,\ncategory_id,\ncategory_nm,\nclass_id,\nclass_nm,\nsubclass_id,\nsubclass_nm,\nMANUF_TYPE_CD AS OWN_BRANDS,\nCORP_ITEM_CD as CIC_Code,\nupc_dsc,\nupc_nbr,\nSUM(TOTAL_NET_AMT) AS TOTAL_NET_AMT_TY,\nSUM(ITEM_QTY) AS ITEM_QTY_TY,\nSUM(COST_OF_GOODS_AMT) AS COST_OF_GOODS_AMT_TY,\nSUM(MEASURED_QTY) AS MEASURED_QTY_TY,\nSUM(AGP_EXTENDED_AMT) AS AGP_EXTENDED_AMT_TY,\ncast (0.00 as decimal (19,1))  AS TOTAL_NET_AMT_LY,\ncast (0.00 as decimal (19,1)) as ITEM_QTY_LY,\ncast (0.00 as decimal (19,1)) AS COST_OF_GOODS_AMT_LY,\ncast (0.00 as decimal (19,1)) AS MEASURED_QTY_LY,\ncast (0.00 as decimal (19,1)) AS AGP_EXTENDED_AMT_LY\n\n\nfrom\nEDM_VIEWS_PRD.\"DW_VIEWS\".\"STORE_UPC_AGP\" AGP\n\njoin \"EDM_VIEWS_PRD\".\"DW_VIEWS\".\"D1_RETAIL_STORE\" LUS\non AGP.FACILITY_INTEGRATION_ID = LUS.FACILITY_INTEGRATION_ID\n--AND lus.DIVISION_ID = 5\nand CLOSE_DT &gt; current_date\nand OPEN_DT &lt; (current_date)-365\nand agp.transaction_dt BETWEEN CURRENT_DATE -181 AND CURRENT_DATE-1 --full timeframe\n--and agp.transaction_dt = '04/05/2022'\n\njoin \"EDM_VIEWS_PRD\".\"DW_EDW_VIEWS\".\"LU_UPC\" UPC\non UPC_NBR = UPC_ID\nAND (CATEGORY_ID &lt;9900 OR (CATEGORY_ID IN (9902,9931,9932,9933,9934,9935,9937,9938,9939,9959,9961,9962,9963,9964,9966,9967,9968,9969,9972,9973,9974,9975,9976,9977,9978,9979,9985,9986,9987,9988,9989,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999)))\nAND upc.DEPARTMENT_ID in (315,329)\nAND UPC.CORPORATION_ID = 1\n\njoin \"EDM_VIEWS_PRD\".\"DW_VIEWS\".\"D0_FISCAL_DAY\" LDAY\non TRANSACTION_DT = CALENDAR_DT\n\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n\nunion all\n\nselect\nFISCAL_WEEK_ID + 100 AS week_id,\nFISCAL_PERIOD_ID + 100 as PERIOD_ID,\nFISCAL_QUARTER_ID + 100 as QUARTER_ID,\nDivision_nm,\nDISTRICT_ID,\nRETAIL_STORE_FACILITY_NBR as STORE_ID,\ngroup_nm,\ncategory_id,\ncategory_nm,\nclass_id,\nclass_nm,\nsubclass_id,\nsubclass_nm,\nmanuf_type_cd as OWN_BRANDS,\nCORP_ITEM_CD as CIC_Code,\nupc_dsc,\nupc_nbr,\ncast (0.00 as decimal (19,1))  AS TOTAL_NET_AMT_TY,\ncast (0.00 as decimal (19,1)) as ITEM_QTY_TY,\ncast (0.00 as decimal (19,1)) AS COST_OF_GOODS_AMT_TY,\ncast (0.00 as decimal (19,1)) AS MEASURED_QTY_TY,\ncast (0.00 as decimal (19,1)) AS AGP_EXTENDED_AMT_TY,\nSUM(TOTAL_NET_AMT) AS TOTAL_NET_AMT_LY,\nSUM(ITEM_QTY) AS ITEM_QTY_LY,\nSUM(COST_OF_GOODS_AMT) AS COST_OF_GOODS_AMT_LY,\nSUM(MEASURED_QTY) AS MEASURED_QTY_LY,\nSUM(AGP_EXTENDED_AMT) AS AGP_EXTENDED_AMT_LY\n\n\nfrom\nEDM_VIEWS_PRD.\"DW_VIEWS\".\"STORE_UPC_AGP\" AGP\n\njoin \"EDM_VIEWS_PRD\".\"DW_VIEWS\".\"D1_RETAIL_STORE\" LUS\non AGP.FACILITY_INTEGRATION_ID = LUS.FACILITY_INTEGRATION_ID\n\nand CLOSE_DT &gt; current_date\nand OPEN_DT &lt; (current_date)-365\nand agp.transaction_dt BETWEEN TO_DATE(CURRENT_DATE)-545 AND TO_DATE(CURRENT_DATE)-365 --full timeframe\n--and agp.transaction_dt = to_date('2022-04-05')-364\n\njoin \"EDM_VIEWS_PRD\".\"DW_EDW_VIEWS\".\"LU_UPC\" UPC\non UPC_NBR = UPC_ID\nAND (CATEGORY_ID &lt;9900 OR (CATEGORY_ID IN (9902,9931,9932,9933,9934,9935,9937,9938,9939,9959,9961,9962,9963,9964,9966,9967,9968,9969,9972,9973,9974,9975,9976,9977,9978,9979,9985,9986,9987,9988,9989,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999)))\nAND upc.DEPARTMENT_ID in (315,329)\nAND UPC.CORPORATION_ID = 1\n\njoin \"EDM_VIEWS_PRD\".\"DW_VIEWS\".\"D0_FISCAL_DAY\" LDAY\non TRANSACTION_DT = CALENDAR_DT\n\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n</code></pre>"},{"location":"merch_sql/#store-sales-by-quarter-period-department-item","title":"Store Sales by Quarter Period Department Item","text":"<pre><code>SELECT\nPD.FISCAL_PERIOD_NBR AS PERIOD,         --LU.PERIOD_ID as PERIOD,\nPD.FISCAL_QUARTER_NBR AS QUARTER,                  --LU.QUARTER_ID as QUARTER,\nSTR.DISTRICT_CD AS DISTRICT,            --STR.DISTRICT_CD AS DISTRICT,\nSTR.RETAIL_STORE_FACILITY_NBR AS STORE,            --STR.STORE_ID AS STORE,\nROG.DEPARTMENT_ID ||' '||ROG.SMIC_GROUP_DSC AS DEPARTMENT,         --ITM.DEPARTMENT_ID ||' '||ITM.DEPARTMENT_NM AS DEPARTMENT,\nROG.CATEGORY_ID||' '||ROG.SMIC_CATEGORY_DSC AS CATEGORY,            --ITM.CATEGORY_ID ||' '|| ITM.CATEGORY_NM AS CATEGORY,\nROG.CLASS_ID||' '||ROG.SMIC_CLASS_DSC AS CLASS,            --ITM.CLASS_ID ||' '|| ITM.CLASS_NM AS CLASS,\nTXN.UPC_ID||' '||CI.ITEM_DSC||' - CIC '||CI.CORPORATE_ITEM_CD AS DESCRIPTION,            --ITM.UPC_ID ||' '|| ITM.UPC_DSC ||' - CIC '||ITM.CORP_ITEM_CD AS DESCRIPTION,\nSUM(TXN.NET_AMT) AS SALES_TY            --SUM(TXN.NET_AMT) AS SALES_TY\n\nFROM DW_EDW_VIEWS.TXN_FACTS TXN             --FROM DW_DSS.TXN_FACTS TXN\nJOIN DW_VIEWS.RETAIL_ORDER_GROUP_UPC_EXTENDED ROG            --JOIN DW_DSS.LU_UPC ITM\nON TXN.UPC_ID = ROG.UPC_NBR            --ON TXN.UPC_ID = ITM.UPC_ID\n\nJOIN DW_VIEWS.CORPORATE_ITEM CI\nON  TXN.CORPORATION_ID = CI.CORPORATION_ID\nAND ROG.COMMON_RETAIL_CD = CI.COMMON_RETAIL_CD\nAND CI.CORPORATE_ITEM_CD = ROG.PREFERRED_CORPORATE_ITEM_CD\n\nJOIN DW_VIEWS.D1_RETAIL_STORE STR            --JOIN DW_DSS.LU_STORE_FINANCE_OM STR\nON TXN.STORE_ID = STR.RETAIL_STORE_FACILITY_NBR            --ON TXN.STORE_ID = STR.STORE_ID\nAND ROG.ROG_ID = STR.ROG_ID                     -- had to join ROG_ID to prevent overstated numbers\n\nJOIN DW_VIEWS.CALENDAR CAL            --JOIN DW_DSS.LU_DAY_MERGE LU\nON TXN.TXN_DTE = CAL.CALENDAR_DT            --ON TXN.txn_dte = LU.D_DATE\n\nJOIN DW_VIEWS.FISCAL_PERIOD PD\nON CAL.FISCAL_PERIOD_NBR = PD.FISCAL_PERIOD_NBR\nAND CAL.FISCAL_YEAR_NBR = PD.FISCAL_YEAR_NBR -- ADDING THIS JOIN IN EDM REDUCES THE OVERSTATEMENT BY HALF VS NOT INCLUDING\n\nWHERE CAL.CALENDAR_DT BETWEEN '04/01/2022' and CURRENT_DATE-1            --WHERE TXN.TXN_DTE BETWEEN '02/28/2021' and CURRENT_DATE-1\nAND STR.DIVISION_ID = '32'            --AND STR.OP_AREA_FINANCE_CD = 32 --DIVISION\nAND STR.CORPORATION_ID = '001'\nAND STR.DIVISION_NM LIKE '%JEWEL%'\nAND ROG.DEPARTMENT_ID IN (306,309)            --AND ITM.DEPARTMENT_ID IN (306,309) --DEPARTMENT\n\nAND ROG.DW_CURRENT_VERSION_IND = TRUE\nAND STR.DW_LOGICAL_DELETE_IND = FALSE\nAND PD.DW_CURRENT_VERSION_IND = TRUE\nAND PD.DW_LOGICAL_DELETE_IND = FALSE\nAND CAL.DW_CURRENT_VERSION_IND = TRUE\nAND CAL.DW_LOGICAL_DELETE_IND = FALSE\nAND CI.DW_CURRENT_VERSION_IND = TRUE\nAND CI.DW_LOGICAL_DELETE_IND = FALSE\nGROUP BY 1,2,3,4,5,6,7,8;\n</code></pre>"},{"location":"merch_sql/#store-upc-agp","title":"Store UPC Agp","text":"<pre><code>SELECT\n'SUA EDW' AS SRC\n,STORE_ID\n,UPC_ID\n,DAY_DT\n,SUM_ITEM_QTY\n,SUM_NET_AMT\n, AGP_EXT_AMT\nFROM EDM_VIEWS_PRD.DW_EDW_VIEWS.store_upc_agp\nWHERE STORE_ID = 1467\nAND UPC_ID     = 954201519\nAND DAY_DT BETWEEN '2021-12-01'::DATE AND '2021-12-28'::DATE\nUNION\n-- EDM Query:\nSELECT\n'EDM SUA'           AS SRC\n,FACILITY_NBR       AS STORE_ID\n,UPC_NBR            AS UPC_ID\n,TRANSACTION_DT     AS DAY_DT\n,ITEM_QTY           AS SUM_ITEM_QTY\n,NET_AMT            AS SUM_NET_AMT\n,AGP_EXTENDED_AMT   AS AGP_EXT_AMT\nFROM EDM_VIEWS_prd.DW_VIEWS.store_upc_agp agp\nINNER JOIN EDM_VIEWS_prd.DW_VIEWS.retail_store str\nON str.FACILITY_INTEGRATION_ID = agp.FACILITY_INTEGRATION_ID\nAND str.DW_CURRENT_VERSION_IND = TRUE\nWHERE TRANSACTION_DT &gt; '2022-09-08'::DATE - 1000\nAND FACILITY_NBR     = 1467\nAND UPC_NBR          = 954201519\nAND TRANSACTION_DT BETWEEN '2021-12-01'::DATE AND '2021-12-28'::DATE;\n</code></pre>"},{"location":"merch_sql/#get-unieq-fiscal-periods","title":"Get Unieq Fiscal Periods","text":"<pre><code>WITH lu_day_merge as\n(\nSELECT DISTINCT\ncal.calendar_dt                                 AS d_date,\nfw.fiscal_period_id                             AS period_id\nFROM        edm_views_prd.dw_views.calendar                 AS cal\nINNER JOIN  edm_views_prd.dw_views.d0_fiscal_week           AS fw\nON  cal.fiscal_year_nbr                             =  fw.fiscal_year_nbr\nAND  cal.fiscal_week_nbr                             =  fw.fiscal_week_nbr\nWHERE       cal.dw_logical_delete_ind                       =  False\nAND       cal.dw_current_version_ind                      =  True\n),\nlu_period_merge as\n(\nSELECT DISTINCT fiscal_period_id as period_id\n,fiscal_period_end_dt        AS end_dt\nFROM EDM_VIEWS_PRD.DW_VIEWS.D0_FISCAL_PERIOD\n)\nselect period_id from lu_period_merge where period_id between\n(select period_id\nfrom lu_day_merge d where d_date = (select max(d_date) as end_date from lu_day_merge where\nperiod_id = (select max(period_id) as end_period from lu_period_merge\nwhere end_dt &lt; current_date and end_dt &gt; current_date - 60)) - 500 group by 1)\nand\n(select period_id from lu_day_merge where\nperiod_id = (select max(period_id) as end_period from lu_period_merge\nwhere end_dt &lt; current_date and end_dt &gt; current_date - 60) group by 1)\norder by 1 desc\n</code></pre>"},{"location":"merch_sql/#get-active-items-by-vendor","title":"Get Active Items by Vendor","text":"<pre><code>with cat_id as (5701) , vendor_id as (1026)\nSELECT luc.Item_Status_Cd AS corp_status_cd\n, SCAT.SMIC_Group_Cd*100+SCAT.SMIC_Category_Cd AS cat_id\n, CASE WHEN VITEM.Vendor_UPC_Id &gt; 0   AND (luc.Display_Item_Ind = 'Y'\nOR (SCI.ship_unit_pack_type_cd &lt;&gt; '' AND SCI.ship_unit_pack_type_cd IS NOT NULL))\nTHEN luc.Vendor_UPC_Id\nELSE cur.UPC_NBR\nEND AS  upc_id\n, luc.item_dsc AS  cic_desc          , luc.CORPORATE_ITEM_CD AS  corp_item_cd\n, luc.Ship_Unit_Pack_Qty AS  pack_qty\n, cur.SHELF_UNIT_SIZE_DSC AS item_size\n, SLS.SMIC_Group_Cd*10000+ SLS.SMIC_Category_Cd*100+SLS.SMIC_Class_Cd AS class_id\n, SLS.SMIC_Class_Dsc AS class_name\n, wco.VENDOR_UNIT_COST_AMT  AS vend_unit_cost\n, vit.Vendor_Id AS vendor_nbr     , CIGI.common_item_group_cd AS cig\n, SCAT.SMIC_Category_Dsc AS cat_name\n, luc.Ship_Unit_Pack_Qty AS min_order_qty\n, luc.Buyer_Nbr AS buyer_nbr\n, CASE WHEN luc.Ship_Unit_Pack_Qty = 1\nTHEN 2 -- eaches\nELSE 1 -- cases\nEND AS retail_order\n\nFROM EDM_VIEWS_PRD.DW_VIEWS.Retail_Order_Group_Corporate_item wir\nJOIN EDM_VIEWS_PRD.DW_VIEWS.WAREHOUSE luw ON luw.WAREHOUSE_ID = wir.WAREHOUSE_ID\nAND wir.corporation_id = 1    AND luw.DW_CURRENT_VERSION_IND = TRUE\nAND luw.DW_LOGICAL_DELETE_IND = FALSE\nAND WIR.DW_CURRENT_VERSION_IND = TRUE\nAND WIR.DW_LOGICAL_DELETE_IND = FALSE\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE cur ON cur.Corporate_Item_Integration_Id = wir.Corporate_Item_Integration_id\nAND cur.ROG_ID = wir.Rog_Id\nAND current_date BETWEEN to_date(cur.DW_FIRST_EFFECTIVE_DT) AND to_date(cur.DW_LAST_EFFECTIVE_DT)\nAND cur.DW_CURRENT_VERSION_IND = TRUE\nAND cur.DW_LOGICAL_DELETE_IND = FALSE INNER JOIN EDM_VIEWS_PRD.DW_VIEWS.Common_Item_Group_Item CIGI\nON CIGI.CORPORATE_ITEM_INTEGRATION_ID = cur.CORPORATE_ITEM_INTEGRATION_ID\nAND CIGI.DW_CURRENT_VERSION_IND = TRUE\nAND CIGI.DW_LOGICAL_DELETE_IND = FALSE\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.Corporate_Item luc ON luc.Corporate_Item_Integration_Id   = wir.Corporate_Item_Integration_id\nAND luc.corporation_id = 1\nAND luc.DW_CURRENT_VERSION_IND = TRUE\nAND luc.DW_LOGICAL_DELETE_IND = FALSE\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.SMIC_Category SCAT\nON SCAT.SMIC_Group_Cd = luc.SMIC_Group_Cd\nAND SCAT.DW_CURRENT_VERSION_IND = TRUE\nAND SCAT.DW_LOGICAL_DELETE_IND = FALSE\nAND (SCAT.SMIC_Group_Cd*100+SCAT.SMIC_Category_Cd)= 5705 -- category id\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.Supply_Chain_Item SCI\nON SCI.CORPORATE_ITEM_INTEGRATION_ID = luc.CORPORATE_ITEM_INTEGRATION_ID\nAND SCI.DW_CURRENT_VERSION_IND = TRUE\nAND SCI.DW_LOGICAL_DELETE_IND = FALSE\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.Vendor_item VITEM\nON VITEM.CORPORATE_ITEM_INTEGRATION_ID = luc.CORPORATE_ITEM_INTEGRATION_ID\nAND VITEM.WAREHOUSE_ID=SCI.WAREHOUSE_ID\nAND VITEM.DW_CURRENT_VERSION_IND = TRUE\nAND VITEM.DW_LOGICAL_DELETE_IND = FALSE\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.SMIC_Class SLS\nON SLS.SMIC_Group_Cd = luc.SMIC_Group_Cd\nAND SLS.SMIC_CATEGORY_CD= LUC.SMIC_CATEGORY_CD\nAND SLS.SMIC_CLASS_CD= LUC.SMIC_CLASS_CD\nAND SLS.DW_CURRENT_VERSION_IND = TRUE\nAND SLS.DW_LOGICAL_DELETE_IND = FALSE\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.Supply_Chain_Item scm\nON scm.Warehouse_Id = wir.WAREHOUSE_ID\nAND scm.DW_CURRENT_VERSION_IND = TRUE\nAND scm.DW_LOGICAL_DELETE_IND = FALSE\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.Vendor_Item vit on vit.CORPORATE_ITEM_INTEGRATION_ID = scm.CORPORATE_ITEM_INTEGRATION_ID\nAND vit.DW_CURRENT_VERSION_IND = TRUE\nAND vit.DW_LOGICAL_DELETE_IND = FALSE\n\njoin EDM_VIEWS_PRD.DW_VIEWS.Corporate_Item ci\non ci.CORPORATE_ITEM_INTEGRATION_ID = vit.CORPORATE_ITEM_INTEGRATION_ID\nAND ci.DW_CURRENT_VERSION_IND = TRUE\nAND ci.DW_LOGICAL_DELETE_IND = FALSE\n\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.WAREHOUSE_COST  wco ON wco.WAREHOUSE_ID = wir.WAREHOUSE_ID\nAND wco.CORPORATE_ITEM_INTEGRATION_ID = wir.Corporate_Item_Integration_id\nAND wco.VENDOR_ID = vit.Vendor_Id\nAND try_to_number(vit.Vendor_Id) = 1026 -- vendor id\nAND wco.ACTIVE_VENDOR_IND = 'A'\nAND wco.VENDOR_UNIT_COST_AMT  &gt; 0\nAND wco.DW_CURRENT_VERSION_IND = TRUE\n\nWHERE  luc.Display_Item_Ind    = 'N' OR luc.Display_Item_Ind    = ''\nOR (luc.Display_Item_Ind = 'Y' -- displayer item\nAND VITEM.Vendor_UPC_Id &gt; 0)\nOR (luc.Display_Item_Ind = 'Y' -- displayer item\nAND VITEM.Vendor_UPC_Id = 0)\nAND scm.SELECTED_ITEM_CD  in ('S', ' ')\n\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 ORDER BY 12 DESC\n</code></pre>"},{"location":"merch_sql/#periscope-forecast-by-item","title":"Periscope Forecast By Item","text":"<pre><code>SELECT WEEK_ID,\nCORPORATE_ITEM_CD,\nCORPORATE_ITEM_CODE_DSC,\nDIVISION_ID, ROG_ID,\nCASE_SIZE_NBR,\nprimary_tactic_nm, PRIMARY_TACTIC_DSC,\nCOMMON_ITEM_GROUP_ID, substr(VENDOR_PARENT_NM,6) as vend_nm, vehicle_type_txt, round(sum(forecast_unit_nbr),0) as units, round(sum(TOTAL_MARKDOWN_FORECAST_AMT),0) as mkdn, round(sum(TOTAL_MARGIN_FORECAST_EXPENSE_AMT),0) as agp,\nround(sum(total_sale_forecast_amt),0) as sales\nFrom EDM_VIEWS_PRD.DW_VIEWS.PROMO_ROLLUP_RPT rpt\nWhere promotion_week_start_dt between current_date - 10 and current_date + 100\nAND CORPORATE_ITEM_CD IN (57500015) and CASE_SIZE_NBR &gt; 0\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11\n</code></pre>"},{"location":"merch_sql/#periscope-actuals-by-item-div","title":"Periscope Actuals By Item / Div","text":"<pre><code>WITH DIV AS (SELECT CASE WHEN DIVISION_NM = 'DENVER' THEN '05'\nWHEN DIVISION_NM ='INTERMOUNTAIN' THEN'30'\nWHEN DIVISION_NM ='JEWEL' THEN '32'\nWHEN DIVISION_NM ='MID-ATLANTIC' THEN '34'\nWHEN DIVISION_NM ='NOR CALIFORNIA' THEN '25'\nWHEN DIVISION_NM ='PORTLAND' THEN '19'\nWHEN DIVISION_NM ='SEATTLE' THEN '27'\nWHEN DIVISION_NM ='SHAWS' THEN '33'\nWHEN DIVISION_NM ='SO CALIFORNIA' THEN '29'\nWHEN DIVISION_NM ='SOUTHERN' THEN '20'\nWHEN DIVISION_NM ='SOUTHWEST' THEN '17' ELSE '0' END AS DIVISION_ID, DIVISION_NM FROM EDM_VIEWS_PRD.DW_VIEWS.PROMO_PERF_RPT\nGROUP BY 1,2)\n\nSELECT  QUARTER_ID\n,   FISCAL_QUARTER_ID\n,   FISCAL_PERIOD_ID\n,   WEEK_ID\n,   PROMOTION_WEEK_ID\n,   YEAR_ID\n,   FISCAL_YEAR_ID\n,   BRAND_NM\n,   DEPARTMENT_NM\n,   DEPARTMENT_ID\n,   SUB_DEPARTMENT_ID\n,   CATEGORY_NM\n,   CATEGORY_ID\n,   CLASS_NM\n,   CLASS_ID\n,   DIV.DIVISION_ID\n,   PERF.DIVISION_NM\n,   VENDOR_PARENT_NM\n,   CORPORATE_ITEM_CD\n,   CORPORATE_ITEM_CODE_DSC\n,   COMMON_ITEM_GRP_ID\n,   OWN_BRAND_STATUS_IND\n,   SUM(REG_SALE_AMT) AS GROSS_SALES\n,   SUM(TOTAL_NET_SALE_AMT) AS NET_SALES\n,   SUM(TOTAL_COST_AMT) AS TOTAL_COST\n,   SUM(TOTAL_UNIT_SOLD_AMT) AS TOTAL_UNITS\n,   SUM(TOTAL_VENDOR_FUNDING_AMT)AS TOTAL_ALLOWANCES\n,   SUM(TOTAL_VENDOR_FUNDING_AMT-NEW_ITEM_ALLOWANCES_AMT) AS TOTAL_ALLOWANCES_EX_NEW_ITEMS\n,   SUM(COGS_SALE_AMT) AS COGS\n,   SUM(TOTAL_DISCOUNT_AMT) AS MARKDOWN\n,   SUM(RETAIL_ALLOW_AMT) AS RETAIL_ALLOWANCES\n,   SUM(SHIPPING_ALLOWANCES_AMT) AS SHIPPING_ALLOW_AMT\n,   SUM(TRANSACTION_ALLOWANCES_AMT) AS TRANSACTION_ALLOW_AMT\n,   SUM(SCAN_ALLOWANCES_AMT) AS SCAN_ALLOW_AMT\n,   SUM(DSD_CASE_BILLBACK_AMT) AS DSD_BB_ALLOW_AMT\n,   SUM(NEW_ITEM_ALLOWANCES_AMT) AS NI_ALLOW_AMT\n,   SUM(FLAT_ALLOWANCES_AMT) AS FLAT_ALLOW_AMT\n,   SUM(ALTERNATE_SOURCE_BUYING_ALLOWANCE_AMT) AS ASB_ALLOW_AMT\n,   SUM(BUYING_ALLOWANCES_AMT) AS BUYING_ALLOW_AMT\n,   SUM(FREIGHT_ALLOWANCES_AMT) AS FREIGHT_ALLOW_AMT\n,   SUM(TRADE_DISCOUNT_ALLOWANCE_AMT) AS TRADE_DISC_ALLOW_AMT\n,   SUM(OTHER_ALLOWANCE_AMT) OTHER_ALLOW_AMT\n,   SUM(SWELL_ALLOWANCE_AMT) AS SWELL_ALLOW_AMT\n,   SUM(UNBILLABLE_PRC_AT_COST_AMT) AS UNBILLABLE_PRC_CST\n,   SUM(DISTRESS_AT_COST_AMT) AS DISTRESS_CST\n,   SUM(AGP_SALE_AMT) AS AGP\n\nFROM EDM_VIEWS_PRD.DW_VIEWS.PROMO_PERF_RPT PERF JOIN DIV AS DIV ON DIV.DIVISION_NM = PERF.DIVISION_NM\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_PROMOTION_CALENDAR_WEEK PWK\nON PWK.PROMOTION_WEEK_ID = PERF.WEEK_ID AND PWK.DIVISION_ID = DIV.DIVISION_ID WHERE WEEK_ID IN (202152)--,20212,20203,20204)--(20203,20204)\n--where week_ID BETWEEN 202149 AND 202208\n\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\n</code></pre>"},{"location":"merch_sql/#store-upc-agp-sales-profit-vendor-funds","title":"Store UPC Agp Sales Profit Vendor Funds","text":"<pre><code>WITH CIC AS ( SELECT CIURR.CORPORATE_ITEM_INTEGRATION_ID ,   CIURR.UPC_NBR ,   CIURR.ROG_ID ,   CIC.CORPORATE_ITEM_CD ,   CIURR.SHELF_UNIT_SIZE_DSC\n\nFROM    EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE CIURR INNER JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_REFERENCE CIUR ON  CIUR.UPC_NBR = CIURR.UPC_NBR AND CIUR.CORPORATE_ITEM_INTEGRATION_ID= CIURR.CORPORATE_ITEM_INTEGRATION_ID AND CIUR.DW_CURRENT_VERSION_IND = TRUE LEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM CIC ON CIC.CORPORATE_ITEM_INTEGRATION_ID = CIURR.CORPORATE_ITEM_INTEGRATION_ID WHERE   1=1 AND     CIURR.DW_LOGICAL_DELETE_IND = FALSE  AND     CIURR.DW_CURRENT_VERSION_IND = TRUE AND     CIC.DW_CURRENT_VERSION_IND = 1 AND     CIC.DW_LOGICAL_DELETE_IND = 0 QUALIFY ROW_NUMBER() OVER (PARTITION BY CIURR.ROG_ID, CIURR.UPC_NBR ORDER BY CIUR.PREFERED_CORPORATE_ITEM_SEQ_NBR ASC) = 1) SELECT   PDAY.PROMOTION_WEEK_ID\n,   PWK.FISCAL_PERIOD_ID ,   PWK.FISCAL_QUARTER_ID ,   RST.DIVISION_ID\n,   RST.DIVISION_NM\n--, RST.RETAIL_STORE_FACILITY_NBR\n,   UPC.RETAIL_DEPARTMENT_ID\n,   UPC.DEPARTMENT_NM\n,   UPC.SMIC_CATEGORY_ID\n,   UPC.SMIC_CATEGORY_DSC\n--, RST.FACILITY_NBR\n--, cig.COMMON_ITEM_GROUP_CD\n,   CIC.CORPORATE_ITEM_CD\n,   CIC.SHELF_UNIT_SIZE_DSC\n,   AGP.UPC_NBR\n,   UPC.ITEM_DSC\n\n,   SUM(AGP.GROSS_AMT - AGP.MARKDOWN_SHORT_TERM_SPECIAL_AMT) AS GROSS_SALES\n,   SUM(TOTAL_NET_AMT) AS NET_SALES --GROSS AMT - MARKDOWN AMT - TOTAL WODS - TOTAL PODS\n,   SUM(AGP.AVERAGE_COST_EXTENDED_AMT) AS AVERAGE_COST_EXTENDED_AMT  --VENDOR LIST COST\n,   SUM(CASE WHEN UPC.SMIC_CATEGORY_ID IN (8843,8643,9996,9902,9931,9932,9933,  9934,9935,9937,9938,9939,9952,9956,9970) THEN 0 ELSE ITEM_QTY END) AS UNITS_SOLD    --KPI EXCLUSION CATEGORIES TO REMOVE FROM ITEM COUNT\n,   SUM(CASE WHEN UPC.RETAIL_DEPARTMENT_ID IN ('301','303','304','307','314','317','311','328','315','316','336','0','347','339') THEN 0 ELSE MEASURED_QTY END) AS MEASURED_QTY\n\n--Retail Allowances\n,   SUM(AGP.SHIPPING_ALLOWANCE_EXTENDED_AMT) AS SHIPPING_ALLOWANCE_EXTENDED_AMT\n,   SUM(AGP.SCAN_ALLOWANCE_EXTENDED_AMT+AGP.REDEMPTION_ALLOWANCE_EXTENDED_AMT) AS SCAN_ALLOWANCE_PERF\n,   SUM(AGP.RETAIL_DSD_CASE_BILLBACK_ALLOWANCE_AMT) AS RETAIL_DSD_CASE_BILLBACK_ALLOWANCE_AMT   --GENERALLY NO VALUES RETURNED\n,   SUM(AGP.RETAIL_NEW_ITEM_ALLOWANCE_AMT) AS RETAIL_NEW_ITEM_ALLOWANCE_AMT\n,   SUM(AGP.TOTAL_FLAT_ALLOWANCE_EXTENDED_AMT) AS TOTAL_FLAT_ALLOWANCE_EXTENDED_AMT\n,   SUM(AGP.TOTAL_BUYING_ALLOWANCE_EXTENDED_AMT) AS TOTAL_BUYING_ALLOWANCE_EXTENDED_AMT\n,   SUM(AGP.TOTAL_FREIGHT_ALLOWANCE_EXTENDED_AMT) AS TOTAL_FREIGHT_ALLOWANCE_EXTENDED_AMT ,   SUM(TOTAL_OTHER_ALLOWANCE_EXTENDED_AMT) AS TOTAL_OTHER_ALLOWANCE_EXTENDED_AMT ,   SUM(AVERAGE_TRADE_DISCOUNT_ALLOWANCE_EXTENDED_AMT) AS TRADE_DISCOUNT_ALLOWANCE_EXTENDED_AMT ,   SUM(AVERAGE_SWELL_LEAKER_ALLOWANCE_EXTENDED_AMT) AS SWELL_LEAKER_ALLOWANCE_EXTENDED_AMT ,   SUM(UNBILLABLE_PRODUCT_RECOVERY_CENTER_COST_AMT) AS UNBILLABLE_PRODUCT_RECOVERY_CENTER_COST_AMT ,   SUM(COST_OF_GOODS_AMT) AS COST_OF_GOODS_AMT --Computed Cost of Goods.\n,   SUM(AGP_EXTENDED_AMT) AS AGP_EXTENDED_AMT\n\nFROM EDM_VIEWS_PRD.DW_VIEWS.STORE_UPC_AGP AGP\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE RST\nON AGP.FACILITY_INTEGRATION_ID = RST.FACILITY_INTEGRATION_ID\n--AND CLOSE_DT &gt; CURRENT_DATE\n--AND OPEN_DT &lt; (CURRENT_DATE)-365\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC UPC\nON  UPC.UPC_NBR = AGP.UPC_NBR\n--AND (UPC.SMIC_CATEGORY_ID &lt;9900 OR (UPC.SMIC_CATEGORY_ID IN (9902,9931,9932,9933,9934,9935,9937,9938,9939,9959,9961,9962,9963,9964,9966,9967,9968,9969,\n--9972,9973,9974,9975,9976,9977,9978,9979,9985,9986,9987,9988,9989,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999)))\n--AND UPC.RETAIL_DEPARTMENT_ID NOT IN ('339','304')\n--AND UPC.CORPORATION_ID = '001'\n--AND UPC.DW_LOGICAL_DELETE_IND = FALSE\n--AND UPC.RETAIL_STATUS_IND ='D'\n--AND 1=1\nAND UPC.CORPORATION_ID = '001'\nAND UPC.SAFEWAY_UPC_IND = 'Y'\n\nLEFT JOIN CIC  CIC ON CIC.UPC_NBR = AGP.UPC_NBR\nAND CIC.ROG_ID = RST.ROG_ID\n\n--JOIN EDM_VIEWS_PRD.DW_VIEWS.D0_FISCAL_DAY LDAY\n--on TRANSACTION_DT = CALENDAR_DT\n--AND LDAY.FISCAL_QUARTER_ID = 202104\n\n--JOIN EDM_VIEWS_PRD.DW_VIEWS.LU_PROMO_DAY_MERGE_V PDAY  --UPDATE WHEN EDM D1-PROMOTION_CALENDAR_DAY is fixed\n--ON AGP.TRANSACTION_DT = PDAY.D_DATE\n--AND lpad(PDAY.DIVISION_ID,2,0)= RST.DIVISION_ID\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_PROMOTION_CALENDAR_DAY PDAY ON AGP.TRANSACTION_DT = PDAY. CALENDAR_DT\nAND PDAY.DIVISION_ID = RST.DIVISION_ID\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_PROMOTION_CALENDAR_WEEK PWK ON PWK.PROMOTION_WEEK_ID = PDAY.PROMOTION_WEEK_ID AND PWK.DIVISION_ID = RST.DIVISION_ID\n\nWHERE RST.DIVISION_ID IN ('05','17','19','20','25','27','29','30','32','33','34')\nAND RST.RETAIL_STORE_FACILITY_NBR  NOT IN (1509,1708,339,3197)\nAND RST.ROG_ID  NOT IN ('AKBA')\nAND PWK.PROMOTION_WEEK_ID = 202152\nAND AGP.UPC_NBR &lt;&gt;0\n--AND  (UPC.SMIC_CATEGORY_ID &lt;9900 OR (UPC.SMIC_CATEGORY_ID IN (9902,9931,9932,9933,9934,9935,9937,9938,9939,9959,9961,9962,9963,9964,9966,9967,9968,9969,\n--9972,9973,9974,9975,9976,9977,9978,9979,9985,9986,9987,9988,9989,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999)))\n--AND UPC.RETAIL_DEPARTMENT_ID NOT IN ('339','304')\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13\n</code></pre>"},{"location":"merch_sql/#get-category-name-by-vendor","title":"Get Category Name by Vendor","text":"<pre><code>select (cat.smic_group_cd * 100 + cat.smic_category_cd)::NUMBER AS CATEGORY_ID, cat.SMIC_CATEGORY_DSC AS CATEGORY_NM\nfrom EDM_VIEWS_PRD.DW_BIZOPS_VIEWS.UPCFINWK_DEPT_DATA dim\njoin EDM_VIEWS_PRD.DW_VIEWS.SMIC_CATEGORY cat on right(dim.CATEGORY_ID, 4) = (cat.smic_group_cd * 100 + cat.smic_category_cd)::VARCHAR\nAND CAT.DW_LOGICAL_DELETE_IND = FALSE AND CAT.DW_CURRENT_VERSION_IND = TRUE\njoin EDM_VIEWS_PRD.DW_VIEWS.SMIC_GROUP grp on cat.SMIC_GROUP_CD = grp.SMIC_GROUP_CD\nAND GRP.DW_LOGICAL_DELETE_IND = FALSE AND GRP.DW_CURRENT_VERSION_IND = TRUE\njoin EDM_VIEWS_PRD.DW_BIZOPS_VIEWS.finwk_brandcd mfg ON TRIM(MFG.L0) = TRIM(DIM.BRAND_CD)                                and grp.SMIC_GROUP_CD = 31 and TRIM(MFG.L3) = 'L3 - PROCTER &amp; GAMBLE'\ngroup by 1,2 order by 1\n</code></pre>"},{"location":"merch_sql/#store-upc-agp-by-category","title":"Store UPC AGP by Category","text":"<pre><code>WITH yr AS (\nSELECT start_swy_year_dt AS start_dt FROM OB_MAIN.lu_day_merge AS dte  INNER JOIN OB_MAIN.lu_year_merge AS yr ON yr.year_id = dte.year_id WHERE d_date = Current_Date - 7\n),\ndtes AS (\nSELECT d_date FROM OB_MAIN.lu_day_merge\ncross join yr\nWHERE ( d_date  BETWEEN yr.start_dt\nAND ( SELECT wk.week_end_dt  FROM OB_MAIN.lu_day_merge AS dte INNER JOIN OB_MAIN.lu_week_merge AS wk ON dte.week_id = wk.week_id WHERE d_date = Current_Date - 7)\n-- Year to end of last week\nOR d_date   BETWEEN yr.start_dt - 364\nAND ( SELECT wk.week_end_dt  -364 FROM OB_MAIN.lu_day_merge AS dte INNER JOIN OB_MAIN.lu_week_merge AS wk ON dte.week_id = wk.week_id WHERE d_date = Current_Date - 7)\n)\n)\nSELECT\nstore_id,\ncategory_id,\nday_dt,\nmanuf_type_cd,\nbrand_cd,\nSum(TY_sales)   AS TY_sales,\nSum(LY_sales)   AS LY_sales,\nSum(TY_qty)     AS TY_qty,\nSum(LY_qty)     AS LY_qty,\nSum(TY_lbs)     AS TY_lbs,\nSum(LY_lbs)     AS LY_lbs,\nSum(TY_agp)     AS TY_agp,\nSum(LY_agp)     AS LY_agp\nFROM (\nSELECT ret.facility_nbr AS store_id,\nupc.category_id, CASE WHEN sua.transaction_dt &gt;= yr.start_dt  THEN sua.transaction_dt   ELSE sua.transaction_dt + 364 END  AS day_dt, CASE WHEN upc.manuf_type_cd = 'H' THEN 'H' ELSE 'N' END AS manuf_type_cd,\nCASE WHEN upc.manuf_type_cd = 'H' THEN upc.brand_cd ELSE NULL END AS brand_cd,\nSum( CASE WHEN sua.transaction_dt &gt;= yr.start_dt    THEN sua.TOTAL_NET_AMT  ELSE 0.0 END ) AS TY_sales,\nSum( CASE WHEN sua.transaction_dt &lt;  yr.start_dt    THEN sua.TOTAL_NET_AMT  ELSE 0.0 END ) AS LY_sales,\nSum( CASE WHEN sua.transaction_dt &gt;= yr.start_dt    THEN sua.ITEM_QTY       ELSE 0.0 END ) AS TY_qty,\nSum( CASE WHEN sua.transaction_dt &lt;  yr.start_dt    THEN sua.ITEM_QTY       ELSE 0.0 END ) AS LY_qty,\nSum( CASE WHEN sua.transaction_dt &gt;= yr.start_dt    THEN sua.MEASURED_QTY   ELSE 0.0 END ) AS TY_lbs,\nSum( CASE WHEN sua.transaction_dt &lt;  yr.start_dt    THEN sua.MEASURED_QTY   ELSE 0.0 END ) AS LY_lbs,\nSum( CASE WHEN sua.transaction_dt &gt;= yr.start_dt    THEN sua.AGP_EXTENDED_AMT    ELSE 0.0 END ) AS TY_agp,\nSum( CASE WHEN sua.transaction_dt &lt;  yr.start_dt    THEN sua.AGP_EXTENDED_AMT    ELSE 0.0 END ) AS LY_agp\nFROM EDM_VIEWS_PRD.DW_VIEWS.store_upc_agp AS sua\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.retail_store AS ret ON ret.FACILITY_INTEGRATION_ID = sua.FACILITY_INTEGRATION_ID\nAND ret.DW_CURRENT_VERSION_IND = TRUE AND ret.DW_LOGICAL_DELETE_IND  = FALSE\nAND ret.CORPORATION_ID = 1\nINNER JOIN OB_MAIN.lu_upc AS upc\nON upc.upc_id = sua.upc_nbr\nCROSS JOIN  yr\nWHERE  sua.transaction_dt IN ( SELECT d_date FROM dtes )\nAND upc.group_id &lt;&gt; 99\nAND RET.FACILITY_NBR &lt; 9999\nGROUP BY 1,2,3,4,5\n\nUNION ALL\n\nSELECT   -- Haggen Last Year\nagp.store_id,\nCoalesce(upc1.category_id, -1) AS category_id,\nagp.day_dt + 364 AS day_dt,\nCASE WHEN  ob.upc_id IS NOT NULL    OR  ( upc.upc_id IS NOT NULL AND UPC.GROUP_ID &lt;&gt; 99 AND UPC.MANUF_TYPE_CD = 'H' ) THEN 'H' ELSE 'N'\nEND AS manuf_type_cd,\nCASE WHEN upc.manuf_type_cd = 'H' THEN upc.brand_cd ELSE NULL END AS brand_cd,\n0::NUMBER(18,4)                                 AS TY_sales,\nSum ( agp.sum_net_amt )                         AS LY_sales,\n0::NUMBER(18,4)                                 AS TY_Units,\nSum ( agp.sum_item_qty )                        AS LY_Units,\n0::NUMBER(18,4)                                 AS TY_lbs,\nSum ( agp.sum_meas_qty )                        AS LY_lbs,\n0::NUMBER(18,4)                                 AS TY_GP,\nSum ( agp.sum_net_amt - agp.cost_of_goods_amt ) AS LY_GP\nFROM EDM_VIEWS_PRD.DW_VIEWS.hgn_store_upc_agp AS agp INNER JOIN EDM_VIEWS_PRD.DW_VIEWS.hgn_upc_swy_hier_full AS upc1     ON upc1.hgn_upc_id = agp.hgn_upc_id     LEFT JOIN OB_MAIN.haggen_ob_upcs AS ob              ON ob.upc_id = agp.upc_id\nLEFT JOIN OB_MAIN.lu_upc AS upc                     ON upc.upc_id = agp.upc_id\nCROSS JOIN  yr\nWHERE agp.day_dt IN ( SELECT d_date FROM dtes )\nGROUP BY 1,2,3,4,5\n) AS Q\nGROUP BY 1,2,3,4,5;\n</code></pre>"},{"location":"merch_sql/#random-weight-meat-cost","title":"Random weight meat cost","text":"<pre><code>WITH YPC AS (\nSELECT\nDISTINCT\nPRM.DIVISION_ID\n,   PRM.WAREHOUSE_ID\n,   PRM.CORPORATE_ITEM_CD AS PRIMAL_CIC\n,   DIV0 ( SUM ( CASE WHEN BASE_CORPORATE_ITEM_CD IN ( 88290059 , 88290061 , 88100217 , 88290060 , 880200497 , 880200259 , 88100109 )\nTHEN 0 - YIELD_PCT ELSE YIELD_PCT END ) , 100 ) AS PRIMAL_YIELD_ADJUSTMENT_PCT -- when the driver is a non primary code or direct loss (ground beef, stew meat, cube steak, bone, fat, or yield loss)\n-- that drivers yield % is subtracted from the yield of the true driver\nFROM EDM_VIEWS_PRD.DW_VIEWS.PRIMAL_MEAT_ITEM_YIELD PRM\nJOIN EDM_VIEWS_PRD.DW_VIEWS.BASE_MEAT_ITEM_YIELD DRV\nON PRM.DIVISION_ID = DRV.DIVISION_ID\nAND PRM.WAREHOUSE_ID = DRV.WAREHOUSE_ID\nAND PRM.PRIMAL_CORPORATE_ITEM_INTEGRATION_ID = DRV.PRIMAL_CORPORATE_ITEM_INTEGRATION_ID\nAND PRM.YIELD_CHART_NBR = DRV.YIELD_CHART_NBR\nAND PRM.DIVISION_ID = 27\nAND PRM.YIELD_CHART_NBR = 1\nAND PRM.DW_CURRENT_VERSION_IND = TRUE\nAND PRM.DW_LOGICAL_DELETE_IND = FALSE\nAND DRV.DW_CURRENT_VERSION_IND = TRUE\nAND DRV.DW_LOGICAL_DELETE_IND = FALSE GROUP BY 1 , 2 , 3 ) , YDO AS (\nSELECT DISTINCT\nYPD.DIVISION_ID\n,   OPT.ROG_ID\n,   YPD.DRIVER_CIC\n,   YPD.DRIVER_DSC\n,   OPT.OPTIONAL_CORPORATE_ITEM_CD\n,   OPT.OPTIONAL_ITEM_DSC\n,   CASE WHEN YPD.DRIVER_CIC IN ( 88290059 , 88290061 , 88100217 , 88290060 , 880200497 , 880200259 , 88100109 ) THEN DIV0 ( SUM ( YPD.DRIVER_TOTAL_SHIPPED_COST ) , SUM ( YPD.DRIVER_POUNDS_SHIPPED ) )\nELSE DIV0 ( SUM ( YPD.DRIVER_TOTAL_SHIPPED_COST ) , SUM ( YPD.DRIVER_POUNDS_SHIPPED ) ) * AVG ( 2 - YPD.PRIMAL_YIELD_ADJUSTMENT_PCT )\nEND AS YIELD_ADJUSTED_COST\nFROM (\nSELECT DISTINCT YCH.DIVISION_ID\n,   YCH.WAREHOUSE_ID\n,   YCH.PRIMAL_CIC\n,   YCH.PRIMAL_ITEM_DSC\n,   YCH.DRIVER_CIC\n,   YCH.DRIVER_DSC\n,   YPC.PRIMAL_YIELD_ADJUSTMENT_PCT\n,   YCH.YIELD_PCT\n,   SUM ( SID.SHIPPED_QTY * SID.DETAIL_CHARGES_CHARGE2_AMT ) * YCH.YIELD_PCT AS DRIVER_TOTAL_SHIPPED_COST\n,   SUM ( SID.CASE_WGT ) * YCH.YIELD_PCT AS DRIVER_POUNDS_SHIPPED\nFROM ( SELECT\nDISTINCT\nPRM.DIVISION_ID\n,   PRM.WAREHOUSE_ID\n,   PRM.PRIMAL_CORPORATE_ITEM_INTEGRATION_ID\n,   PRM.CORPORATE_ITEM_CD AS PRIMAL_CIC\n,   PRM.PRIMAL_ITEM_DSC\n,   DRV.BASE_CORPORATE_ITEM_INTEGRATION_ID\n,   CASE WHEN DRV.BASE_CORPORATE_ITEM_CD = 88100109 THEN 88100217 ELSE DRV.BASE_CORPORATE_ITEM_CD END AS DRIVER_CIC\n,   DRV.BASE_ITEM_DSC AS DRIVER_DSC\n,   DIV0 ( CASE WHEN PRM.CORPORATE_ITEM_CD NOT  IN ( 88290059 , 88290061 , 88100217 , 88290060 , 880200497 , 880200259 , 88100109 ) THEN CASE WHEN DRV.YIELD_PCT = 0 THEN 1 ELSE DRV.YIELD_PCT END END , 100 ) AS YIELD_PCT // the raw yield percent for all drivers is kept to provide driver costs for ground beef etc\nFROM EDM_VIEWS_PRD.DW_VIEWS.PRIMAL_MEAT_ITEM_YIELD PRM\nJOIN EDM_VIEWS_PRD.DW_VIEWS.BASE_MEAT_ITEM_YIELD DRV\nON PRM.DIVISION_ID = DRV.DIVISION_ID\nAND PRM.WAREHOUSE_ID = DRV.WAREHOUSE_ID\nAND PRM.PRIMAL_CORPORATE_ITEM_INTEGRATION_ID = DRV.PRIMAL_CORPORATE_ITEM_INTEGRATION_ID\nAND PRM.YIELD_CHART_NBR = DRV.YIELD_CHART_NBR\nAND PRM.YIELD_CHART_NBR = 1\nAND PRM.DIVISION_ID = 27\nAND PRM.DW_CURRENT_VERSION_IND = TRUE\nAND PRM.DW_LOGICAL_DELETE_IND = FALSE\nAND DRV.DW_CURRENT_VERSION_IND = TRUE\nAND DRV.DW_LOGICAL_DELETE_IND = FALSE ) YCH\nJOIN EDM_VIEWS_PRD.DW_VIEWS.SUPPLY_CHAIN_INVOICE_HEADER SIH\nON YCH.WAREHOUSE_ID = SIH.WAREHOUSE_ID\nAND YCH.DIVISION_ID = SIH.DIVISION_ID\nINNER\nJOIN EDM_VIEWS_PRD.DW_VIEWS.SUPPLY_CHAIN_INVOICE_DETAIL SID\nON SIH.SUPPLY_CHAIN_INVOICE_INTEGRATION_ID = SID.SUPPLY_CHAIN_INVOICE_INTEGRATION_ID\nAND YCH.PRIMAL_CORPORATE_ITEM_INTEGRATION_ID = SID.CORPORATE_ITEM_INTEGRATION_ID\nAND SIH.DW_FIRST_EFFECTIVE_DT = SID.DW_FIRST_EFFECTIVE_DT\nAND SIH.DW_LAST_EFFECTIVE_DT = SID.DW_LAST_EFFECTIVE_DT\nAND SIH.DW_LOGICAL_DELETE_IND = FALSE\nAND SIH.DW_CURRENT_VERSION_IND = TRUE\nAND SID.DW_LOGICAL_DELETE_IND = FALSE\nAND SID.DW_CURRENT_VERSION_IND = TRUE\nAND SIH.CORPORATION_ID = 1\nAND SIH.REQUESTED_DELIVERY_DT BETWEEN CURRENT_DATE - 28 AND CURRENT_DATE\nJOIN YPC\nON YCH.DIVISION_ID = YPC.DIVISION_ID\nAND YCH.WAREHOUSE_ID = YPC.WAREHOUSE_ID\nAND YCH.PRIMAL_CIC = YPC.PRIMAL_CIC\nAND SIH.WAREHOUSE_ID = YPC.WAREHOUSE_ID\nAND SIH.DIVISION_ID = YPC.DIVISION_ID\nGROUP BY 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ) YPD\nJOIN EDM_VIEWS_PRD.DW_VIEWS.OPTIONAL_MEAT_ITEM_YIELD OPT\nON YPD.DIVISION_ID = OPT.DIVISION_ID\nAND YPD.WAREHOUSE_ID = OPT.WAREHOUSE_ID\nAND YPD.PRIMAL_CIC = OPT.CORPORATE_ITEM_CD\nAND YPD.DRIVER_CIC = OPT.BASE_CORPORATE_ITEM_CD\nAND OPT.DW_CURRENT_VERSION_IND = TRUE\nAND OPT.DW_LOGICAL_DELETE_IND = FALSE\nWHERE ROG_ID NOT IN ( 'SHGN' )\nGROUP BY 1 , 2 , 3 , 4 , 5 , 6 )\nSELECT DISTINCT\nAGG.DIVISION_ID\n,   AGG.ROG_ID\n,   AGG.CORPORATE_ITEM_CD\n,   AGG.ITEM_DSC\n,   AGG.YIELD_ADJUSTED_COST\nFROM ( SELECT DISTINCT YDO.DIVISION_ID\n,   YDO.ROG_ID\n,   YDO.DRIVER_CIC AS CORPORATE_ITEM_CD\n,   YDO.DRIVER_DSC AS ITEM_DSC\n,   MAX ( YDO.YIELD_ADJUSTED_COST ) AS YIELD_ADJUSTED_COST\nFROM YDO\nGROUP BY 1 , 2 , 3 , 4\nUNION ALL\nSELECT DISTINCT YDO.DIVISION_ID\n,   YDO.ROG_ID\n,   YDO.OPTIONAL_CORPORATE_ITEM_CD AS CORPORATE_ITEM_CD\n,   YDO.OPTIONAL_ITEM_DSC AS ITEM_DSC\n,   MAX ( YDO.YIELD_ADJUSTED_COST ) AS YIELD_ADJUSTED_COST\nFROM YDO\nGROUP BY 1 , 2 , 3 , 4\n) AGG\nORDER BY 1 , 2 , 3\n</code></pre>"},{"location":"merch_sql/#planogram-schematic-fixture","title":"Planogram Schematic Fixture","text":"<pre><code>SELECT POG.Planogram_Nm,\nUPC.SMIC_CATEGORY_ID,\nUPC.SMIC_CATEGORY_DSC,\nFXTR.SHELF_SURFACE_CD\n\nFROM EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_SLOT_ITEM ITEM\njoin EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM POG\non ITEM.PLANOGRAM_ID = POG.PLANOGRAM_ID\njoin EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_STORE_FIXTURE STORE\non ITEM.PLANOGRAM_ID = STORE.PLANOGRAM_ID\njoin EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_FIXTURE_SHELF FXTR\non  POG.PLANOGRAM_ID = FXTR.PLANOGRAM_ID\njoin EDM_VIEWS_PRD.DW_VIEWS.D1_UPC UPC\non  UPC.UPC_NBR = ITEM.UPC_NBR\njoin EDM_VIEWS_PRD.DW_VIEWS.FACILITY STR\non STR.FACILITY_INTEGRATION_ID = STORE.FACILITY_INTEGRATION_ID\nWHERE\nSTR.CLOSE_DT &gt; CURRENT_DATE AND STORE.STORE_SCHEMATIC_EFFECTIVE_END_DT  &gt; CURRENT_DATE\nAND ITEM.DW_CURRENT_VERSION_IND = TRUE  AND POG.DW_CURRENT_VERSION_IND = TRUE\nAND STORE.DW_CURRENT_VERSION_IND = TRUE\nAND FXTR.DW_CURRENT_VERSION_IND = TRUE\nAND ITEM.DW_LOGICAL_DELETE_IND = FALSE\nAND POG.DW_LOGICAL_DELETE_IND = FALSE\nAND STORE.DW_LOGICAL_DELETE_IND = FALSE\nAND FXTR.DW_LOGICAL_DELETE_IND = FALSE\nAND STR.DW_CURRENT_VERSION_IND = TRUE\nAND STR.DW_LOGICAL_DELETE_IND = FALSE\nAND STR.CORPORATION_ID ='001'\nAND FACILITY_TYPE_CD ='RT'\nAND FXTR. SHELF_SURFACE_CD LIKE 'Pegboard'\nAND UPC.UPC_NBR = ITEM.UPC_NBR\nAND UPC.CORPORATION_ID = 1\nAND UPC.SMIC_CATEGORY_ID IN ('3001','3004','3002')\nGROUP BY 1,2,3,4;\n</code></pre>"},{"location":"merch_sql/#distribution-voids","title":"Distribution voids","text":"<pre><code>SELECT\nDIVISION_NM,\nBANNER_NM,\nTB.UPC_NBR,\nTB.DESCRIPTION,\nCATEGORY_NM,\nTB.STORE_ID,\nSum(DISTRIBUTION) AS DISTRIBUTION,\nSum(SALES) AS SALES,\nSum(SHIPPED) AS SHIPPED,\nSum(TAG_QTY) AS TAG_QTY\n\nFROM\n\n(SELECT DIVISION_NM,\nTB3.BANNER_NM, TB3.UPC_NBR,\nDESCRIPTION,\nCATEGORY_NM,\nTB3.STORE_ID,\nSum(DISTRIBUTION) AS DISTRIBUTION,\nSum(SALES) AS SALES,\nSum(SHIPPED) AS SHIPPED,\nSum(TAG.TAG_NBR) AS TAG_QTY\n\nFROM (SELECT DIVISION_NM,\nBANNER_NM, UPC_NBR,\nDESCRIPTION,\nCATEGORY_NM,\nSTORE_ID,\nFACILITY_INTEGRATION_ID,\nSum(DISTRIBUTION) AS DISTRIBUTION,\nSum(SALES) AS SALES,\nSum(SHIPPED) AS SHIPPED\n\nFROM (\nSELECT TB.DIVISION_NM,\nTB.BANNER_nm,\nTB.UPC_nbr,\nTB.DESCRIPTION,\nTB.CATEGORY_NM,\nTB.STORE_ID,\nTB.FACILITY_INTEGRATION_ID,\nSum(TB.DIST) AS DISTRIBUTION,\nSum(TB.SALES_QTY) AS SALES,\nSum(SHIPPED) AS SHIPPED\nFROM (\nSELECT STR.DIVISION_NM, STR.BANNER_NM, ITEM.UPC_NBR, DEPT.DESCRIPTION,\nDEPT.CATEGORY_NM,\nSTR.RETAIL_STORE_FACILITY_NBR AS STORE_ID,\nSTR.FACILITY_INTEGRATION_ID,\nCast(1 AS DECIMAL (19,1)) AS DIST,\nCast(0.00 AS DECIMAL (19,1)) AS SALES_QTY,\nCast(0.00 AS DECIMAL (19,1)) AS SHIPPED\nFROM EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_SLOT_ITEM ITEM, EDM_VIEWS_PRD.DW_VIEWS.Planogram POG, EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_STORE_FIXTURE STORE,\nEDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE STR,\nEDM_VIEWS_PRD.DW_BIZOPS_VIEWS.UPCFINWK_DEPT_DATA DEPT\nWHERE\nITEM.PLANOGRAM_ID = POG.PLANOGRAM_ID\nand item.DW_CURRENT_VERSION_IND =TRUE\nAND POG.DW_CURRENT_VERSION_IND =TRUE\nand item.DW_LOGICAL_DELETE_IND =TRUE\nAND POG.DW_LOGICAL_DELETE_IND =TRUE\nAND ITEM.PLANOGRAM_ID = STORE.PLANOGRAM_ID AND STR.FACILITY_INTEGRATION_ID = STORE.FACILITY_INTEGRATION_ID AND STORE.DW_CURRENT_VERSION_IND =TRUE\nAND STORE.DW_LOGICAL_DELETE_IND =TRUE\n--AND STR.DIVISION_ID = 29\nAND STR.CLOSE_DT &gt; Current_Date AND STORE.STORE_SCHEMATIC_EFFECTIVE_END_DT  &gt; Current_Date\nAND ITEM.UPC_NBR = DEPT.UPC_NBR\nAND DEPT.CATEGORY_ID NOT LIKE 'OC%' AND Substr(UPC_NM,1,1)&lt;&gt; 'O'\nAND  DEPT.UPC_NBR IN (19067900008,\n19067900002,\n19067900018,\n19067900001,\n19067900012,\n19067900011) GROUP BY 1,2,3,4,5,6,7\n\nUNION ALL SELECT  STR.DIVISION_NM,\nSTR.BANNER_nm,\nAbs(SALES.UPC_NBR) AS UPC_NBR,\nDEPT.DESCRIPTION,\nDEPT.CATEGORY_NM,\nSTR.RETAIL_STORE_FACILITY_NBR AS STORE_ID,\nSTR.FACILITY_INTEGRATION_ID,\nCast(0.00 AS DECIMAL (19,1)) AS DIST,\nSum(ITEM_QTY) AS SALES_QTY,\nSUM(SALES.WHSE_SHIPPED_UNIT_QTY) + SUM(SALES.BDR_SHIPPED_UNIT_QTY) AS SHIPPED\nFROM EDM_VIEWS_PRD.DW_BIZOPS_VIEWS.STRFINWK_DATA_COMBINED SALES\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE STR\nON  SALES.Facility_nbr = STR.RETAIL_STORE_FACILITY_NBR AND STR.CLOSE_DT &gt; Current_Date\n--AND   STR.DIVESTED_FLAG IN ('N')\n--AND STR.DIVISION_ID = 29\nAND FISCAL_WEEK_ID IN (SELECT (FISCAL_YEAR_NBR||LPAD(FISCAL_WEEK_NBR,2,0)) AS WEEK_ID FROM EDM_VIEWS_PRD.DW_VIEWS.Calendar\nWHERE calendar_dt between Current_Date - 180 and Current_Date  AND DW_LOGICAL_DELETE_IND =FALSE AND DW_CURRENT_VERSION_IND =TRUE group by 1)\nJOIN EDM_VIEWS_PRD.DW_BIZOPS_VIEWS.UPCFINWK_DEPT_DATA DEPT\nON SALES.UPC_NBR = DEPT.UPC_NBR\nAND DEPT.CATEGORY_ID NOT LIKE 'OC%' WHERE Substr(UPC_NM,1,1)&lt;&gt; 'O'\nAND  DEPT.UPC_NBR IN (19067900008,\n19067900002,\n19067900018,\n19067900001,\n19067900012,\n19067900011) GROUP BY 1,2,3,4,5,6,7)TB GROUP BY 1,2,3,4,5,6,7)TB2\n\nGROUP BY 1,2,3,4,5,6,7)TB3\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE_ITEM_LOCATION TAG\nON TAG.UPC_NBR = TB3.UPC_NBR AND TAG.FACILITY_INTEGRATION_ID=TB3.FACILITY_INTEGRATION_ID\nAND TAG.DW_LOGICAL_DELETE_IND =FALSE AND TAG.DW_CURRENT_VERSION_IND =TRUE\n\nGROUP BY 1,2,3,4,5,6)TB\n--WHERE TB.DIVISION_NM = 'ACME' \nGROUP BY 1,2,3,4,5,6;\n</code></pre>"},{"location":"merch_sql/#sales-with-household-and-customer-data-penetration","title":"Sales with Household and customer data penetration","text":"<pre><code>  SELECT\nTB.UPC_ID as upc\n,TB.ITEM_DSC as upc_dsc\n,TB.SMIC_CATEGORY_ID as category_id\n,TB.DIVISION_NM as div\n,TB.WEEK_ID as week_id\n,SUM(TB.TOTAL_NET_SALES_TY) AS total_sales_ty\n,SUM(TB.TOTAL_NET_SALES_LY) AS total_sales_ly\n,SUM(TB.ITEM_QTY_TY) AS total_qty_ty\n,SUM(TB.ITEM_QTY_LY) AS total_qty_ly\n,SUM(TB.BASKETS_TY) AS total_baskets_ty\n,SUM(TB.BASKETS_LY) AS total_baskets_ly\n,SUM(TB.HOUSEHOLDS_TY) AS total_households_ty\n,SUM(TB.HOUSEHOLDS_LY) AS total_households_ly\n,SUM(TB.EBG_NET_SALES_TY) AS ebg_net_sales_ty\n,SUM(TB.EBG_NET_SALES_LY) AS ebg_net_sales_ly\n,SUM(TB.EBG_ITEM_QTY_TY) AS ebg_qty_ty\n,SUM(TB.EBG_ITEM_QTY_LY) AS ebg_qty_ly\n,SUM(TB.EBG_BASKETS_TY) AS ebg_baskets_ty\n,SUM(TB.EBG_BASKETS_LY) AS ebg_baskets_ly\n,SUM(TB.EBG_HOUSEHOLDS_TY) AS ebg_households_ty\n,SUM(TB.EBG_HOUSEHOLDS_LY) AS ebg_households_ly\n\nFROM(\n(SELECT T1.UPC_ID\n,T1.ITEM_DSC\n,T1.SMIC_CATEGORY_ID\n,T1.DIVISION_NM\n,T1.WEEK_ID\n,T1.TOTAL_NET_SALES AS TOTAL_NET_SALES_TY\n,CAST(0.00 AS DECIMAL (19,1))  AS TOTAL_NET_SALES_LY\n,T1.ITEM_QTY AS ITEM_QTY_TY\n,CAST(0.00 AS DECIMAL (19,1))  AS ITEM_QTY_LY\n,T1.BASKETS AS BASKETS_TY\n,CAST(0.00 AS DECIMAL (19,1))  AS BASKETS_LY\n,T1.HOUSEHOLDS AS HOUSEHOLDS_TY\n,CAST(0.00 AS DECIMAL (19,1))  AS HOUSEHOLDS_LY\n,T2.EBG_NET_SALES AS EBG_NET_SALES_TY\n,CAST(0.00 AS DECIMAL (19,1))  AS EBG_NET_SALES_LY\n,T2.EBG_ITEM_QTY AS EBG_ITEM_QTY_TY\n,CAST(0.00 AS DECIMAL (19,1))  AS EBG_ITEM_QTY_LY\n,T2.EBG_BASKETS AS EBG_BASKETS_TY\n,CAST(0.00 AS DECIMAL (19,1))  AS EBG_BASKETS_LY\n,T2.EBG_HOUSEHOLDS AS EBG_HOUSEHOLDS_TY\n,CAST(0.00 AS DECIMAL (19,1))  AS EBG_HOUSEHOLDS_LY\nFROM (SELECT A.UPC_ID\n,E.ITEM_DSC\n,E.SMIC_CATEGORY_ID\n,D.DIVISION_NM\n,WEEK.WEEK_ID\n,CAST(SUM(A.NET_AMT + A.MKDN_WOD_ALLOC_AMT + A.MKDN_POD_ALLOC_AMT) AS DECIMAL(18, 4)) AS TOTAL_NET_SALES\n,CAST(SUM(ITEM_QTY) AS DECIMAL(18, 4)) AS ITEM_QTY\n,COUNT(DISTINCT TXN_ID) AS BASKETS\n,COUNT(DISTINCT CARD_NBR) AS HOUSEHOLDS\nFROM  (select * from EDM_VIEWS_PRD.DW_EDW_VIEWS.TXN_FACTS where txn_dte &gt; '2022-01-01') A\n,EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE C\n,EDM_VIEWS_PRD.DW_VIEWS.DIVISION D ,EDM_VIEWS_PRD.DW_VIEWS.D1_UPC E\n,EDM_VIEWS_PRD.DW_EDW_VIEWS.LIFESTYLE_SAME_STR_DAY same\n,EDM_SANDBOX_PRD.CORE_TECH.ZHU_COMP_WEEK week\n,EDM_VIEWS_PRD.DW_VIEWS.Calendar merge\nWHERE  E.UPC_NBR = A.UPC_ID\nAND  A.UPC_ID IN  (7940046281,7940046279,7940046273,7940046272,7940046271,2279691752,2279691751,2279691671,2279691670,2279691612,2279691611,2279691602,2279691601,2279691432,2279691431,2279691015,2279691014,2279691006,2279691005,2279690092,2279690090,8087817207,8087804238,8087817205,8087817206,8087804219,8087804235,8087804222,8087804225,8087800899,8087800406,8087804216,8087800218,8087817125,8087817126)\nAND  merge.CALENDAR_DT = A.txn_dte\nAND A.STORE_ID = C.FACILITY_NBR AND c.DW_CURRENT_VERSION_IND =TRUE AND c.DW_LOGICAL_DELETE_IND =FALSE\nAND c.CORPORATION_ID='001'\nAND  D.DIVISION_ID=C.DIVISION_ID\nAND D.DW_CURRENT_VERSION_IND =TRUE AND D.DW_LOGICAL_DELETE_IND =FALSE\nAND  same.store_id = A.store_id\nAND  same.txn_dt = A.txn_dte and same_store_ind = 'Y'\nAND  week.current_week_id = (merge.FISCAL_YEAR_NBR ||LPAD(merge.Fiscal_Week_Nbr,2,0)) and merge.DW_CURRENT_VERSION_IND =TRUE and MERGE.DW_LOGICAL_DELETE_IND =FALSE   and current_week_id &gt;= 202001 and data_refresh_dt &lt; current_date\n\n\nAND  E.CORPORATION_ID = 1\nAND  A.MISC_ITEM_QTY = 0\nAND  A.DEPOSIT_ITEM_QTY = 0\nAND  C.DIVISION_ID IN (5,15,17,19,20,23,29,30,32,33,34,35,25,27)\nAND  A.REV_DTL_SUBTYPE_ID IN (0, 7)\nGROUP BY 1,2,3,4,5\n) AS T1\n\nLEFT JOIN\n(SELECT A.UPC_ID\n,E.ITEM_DSC\n,E.SMIC_CATEGORY_ID\n,D.DIVISION_NM\n,week.WEEK_ID\n,CAST(SUM(A.NET_AMT + A.MKDN_WOD_ALLOC_AMT + A.MKDN_POD_ALLOC_AMT) AS DECIMAL(18, 4)) AS EBG_NET_SALES\n,CAST(SUM(ITEM_QTY) AS DECIMAL(18, 4)) AS EBG_ITEM_QTY\n,COUNT(DISTINCT TXN_ID) AS EBG_BASKETS\n,COUNT(DISTINCT A.CARD_NBR) AS EBG_HOUSEHOLDS\nFROM   (select * from EDM_VIEWS_PRD.DW_EDW_VIEWS.TXN_FACTS where txn_dte &gt; '2022-01-01') A\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE C  ON A.STORE_ID = C.FACILITY_NBR AND c.DW_CURRENT_VERSION_IND =TRUE AND c.DW_LOGICAL_DELETE_IND =FALSE\nAND c.CORPORATION_ID='001'\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.DIVISION D ON D.DIVISION_ID=C.DIVISION_ID\nAND D.DW_CURRENT_VERSION_IND =TRUE AND D.DW_LOGICAL_DELETE_IND =FALSE\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC E ON E.UPC_NBR = A.UPC_ID AND E.CORPORATION_ID = 1\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.SMV_LOYALTY_PROGRAM_RETAIL_CUSTOMER_HOUSEHOLD F ON A.CARD_NBR = F.LOYALTY_PROGRAM_CARD_NBR\n\nAND A.MISC_ITEM_QTY = 0\nAND A.DEPOSIT_ITEM_QTY = 0\nAND  A.UPC_ID IN  (7940046281,7940046279,7940046273,7940046272,7940046271,2279691752,2279691751,2279691671,2279691670,2279691612,2279691611,2279691602,2279691601,2279691432,2279691431,2279691015,2279691014,2279691006,2279691005,2279690092,2279690090,8087817207,8087804238,8087817205,8087817206,8087804219,8087804235,8087804222,8087804225,8087800899,8087800406,8087804216,8087800218,8087817125,8087817126)\nJOIN EDM_VIEWS_PRD.DW_VIEWS.Calendar merge on merge.CALENDAR_DT = A.txn_dte JOIN EDM_SANDBOX_PRD.CORE_TECH.ZHU_COMP_WEEK week on week.current_week_id =   (merge.FISCAL_YEAR_NBR ||LPAD(merge.Fiscal_Week_Nbr,2,0)) and merge.DW_CURRENT_VERSION_IND =TRUE and MERGE.DW_LOGICAL_DELETE_IND =FALSE   and current_week_id &gt;= 202001 and data_refresh_dt &lt; current_date\nJOIN EDM_VIEWS_PRD.DW_EDW_VIEWS.LIFESTYLE_SAME_STR_DAY same on same.store_id = A.store_id AND  same.txn_dt = A.txn_dte and same_store_ind = 'Y'\nLEFT JOIN (SELECT HOUSEHOLD_ID\n,ANNUAL_LEVEL2_SEGMENT_ID\n,WEEK_ID\n,CASE WHEN ANNUAL_LEVEL2_SEGMENT_ID IN (1) THEN 'ELITE'\nWHEN ANNUAL_LEVEL2_SEGMENT_ID IN (2) THEN 'BEST'\nWHEN ANNUAL_LEVEL2_SEGMENT_ID IN (3, 4) THEN 'GOOD'\nWHEN ANNUAL_LEVEL2_SEGMENT_ID IN (5, 6) THEN 'OCCASIONAL'\nELSE 'UNKNOWN'\nEND AS FACTS_SEG_DESC\nFROM EDM_VIEWS_PRD.DW_EDW_VIEWS.FACTS_SEGMENT_WEEK\nGROUP BY 1, 2, 3, 4\n) AS FACTS ON FACTS.HOUSEHOLD_ID = F.HOUSEHOLD_ID AND FACTS.WEEK_ID = current_week_id\n\nAND A.REV_DTL_SUBTYPE_ID IN (0, 7)\nAND FACTS.ANNUAL_LEVEL2_SEGMENT_ID IN (1,2,3,4)\nGROUP BY 1,2,3,4,5\n) AS T2\n\nON T1.UPC_ID = T2.UPC_ID\nAND T1.DIVISION_NM = T2.DIVISION_NM AND T1.WEEK_ID = T2.WEEK_ID)\n\nUNION ALL\n\n\n(SELECT T1.UPC_ID\n,T1.ITEM_DSC\n,T1.SMIC_CATEGORY_ID\n,T1.DIVISION_NM\n,T1.WEEK_ID\n,CAST(0.00 AS DECIMAL (19,1))  AS TOTAL_NET_SALES_TY\n,T1.TOTAL_NET_SALES AS TOTAL_NET_SALES_LY\n,CAST(0.00 AS DECIMAL (19,1))  AS ITEM_QTY_TY\n,T1.ITEM_QTY AS ITEM_QTY_LY\n,CAST(0.00 AS DECIMAL (19,1))  AS BASKETS_TY\n,T1.BASKETS AS BASKETS_LY\n,CAST(0.00 AS DECIMAL (19,1))  AS HOUSEHOLDS_TY\n,T1.HOUSEHOLDS AS HOUSEHOLDS_LY\n,CAST(0.00 AS DECIMAL (19,1))  AS EBG_NET_SALES_TY\n,T2.EBG_NET_SALES AS EBG_NET_SALES_LY\n,CAST(0.00 AS DECIMAL (19,1))  AS EBG_ITEM_QTY_TY\n,T2.EBG_ITEM_QTY AS EBG_ITEM_QTY_LY\n,CAST(0.00 AS DECIMAL (19,1))  AS EBG_BASKETS_TY\n,T2.EBG_BASKETS AS EBG_BASKETS_LY\n,CAST(0.00 AS DECIMAL (19,1))  AS EBG_HOUSEHOLDS_TY\n,T2.EBG_HOUSEHOLDS AS EBG_HOUSEHOLDS_LY\nFROM (SELECT A.UPC_ID\n,E.ITEM_DSC\n,E.SMIC_CATEGORY_ID\n,D.DIVISION_NM\n,WEEK.WEEK_ID\n,CAST(SUM(A.NET_AMT + A.MKDN_WOD_ALLOC_AMT + A.MKDN_POD_ALLOC_AMT) AS DECIMAL(18, 4)) AS TOTAL_NET_SALES\n,CAST(SUM(ITEM_QTY) AS DECIMAL(18, 4)) AS ITEM_QTY\n,COUNT(DISTINCT TXN_ID) AS BASKETS\n,COUNT(DISTINCT CARD_NBR) AS HOUSEHOLDS\nFROM   (select * from EDM_VIEWS_PRD.DW_EDW_VIEWS.TXN_FACTS where txn_dte &gt; '2022-01-01') A\n, EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE C  , EDM_VIEWS_PRD.DW_VIEWS.DIVISION D ,EDM_VIEWS_PRD.DW_VIEWS.D1_UPC E\n,EDM_VIEWS_PRD.DW_EDW_VIEWS.LIFESTYLE_SAME_STR_DAY same\n,EDM_SANDBOX_PRD.CORE_TECH.ZHU_COMP_WEEK week\n,EDM_VIEWS_PRD.DW_VIEWS.Calendar merge\nWHERE  E.UPC_NBR = A.UPC_ID\nAND  A.UPC_ID IN  (7940046281,7940046279,7940046273,7940046272,7940046271,2279691752,2279691751,2279691671,2279691670,2279691612,2279691611,2279691602,2279691601,2279691432,2279691431,2279691015,2279691014,2279691006,2279691005,2279690092,2279690090,8087817207,8087804238,8087817205,8087817206,8087804219,8087804235,8087804222,8087804225,8087800899,8087800406,8087804216,8087800218,8087817125,8087817126)\nAND  merge.CALENDAR_DT = A.txn_dte\nAND   A.STORE_ID = C.FACILITY_NBR AND c.DW_CURRENT_VERSION_IND =TRUE AND c.DW_LOGICAL_DELETE_IND =FALSE\nAND c.CORPORATION_ID='001'\nAND D.DIVISION_ID=C.DIVISION_ID\nAND D.DW_CURRENT_VERSION_IND =TRUE AND D.DW_LOGICAL_DELETE_IND =FALSE AND  same.store_id = A.store_id\nAND  same.txn_dt = A.txn_dte and same_store_ind = 'Y'\nAND  week.comp_week_id = (merge.FISCAL_YEAR_NBR ||LPAD(merge.Fiscal_Week_Nbr,2,0)) and merge.DW_CURRENT_VERSION_IND =TRUE and MERGE.DW_LOGICAL_DELETE_IND =FALSE  and current_week_id &gt;= 202001 and data_refresh_dt &lt; current_date\n\nAND  E.CORPORATION_ID = 1\nAND  A.MISC_ITEM_QTY = 0\nAND  A.DEPOSIT_ITEM_QTY = 0\nAND  C.DIVISION_ID IN (5,15,17,19,20,23,29,30,32,33,34,35,25,27)\nAND  A.REV_DTL_SUBTYPE_ID IN (0, 7)\nGROUP BY 1,2,3,4,5\n) AS T1\n\nLEFT JOIN\n(SELECT A.UPC_ID\n,E.ITEM_DSC\n,E.SMIC_CATEGORY_ID\n,D.DIVISION_NM\n,WEEK.WEEK_ID\n,CAST(SUM(A.NET_AMT + A.MKDN_WOD_ALLOC_AMT + A.MKDN_POD_ALLOC_AMT) AS DECIMAL(18, 4)) AS EBG_NET_SALES\n,CAST(SUM(ITEM_QTY) AS DECIMAL(18, 4)) AS EBG_ITEM_QTY\n,COUNT(DISTINCT TXN_ID) AS EBG_BASKETS\n,COUNT(DISTINCT A.CARD_NBR) AS EBG_HOUSEHOLDS\nFROM   (select * from EDM_VIEWS_PRD.DW_EDW_VIEWS.TXN_FACTS where txn_dte &gt; '2022-01-01') A\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE C  ON A.STORE_ID = C.FACILITY_NBR AND c.DW_CURRENT_VERSION_IND =TRUE AND c.DW_LOGICAL_DELETE_IND =FALSE\nAND c.CORPORATION_ID='001'\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.DIVISION D ON D.DIVISION_ID=C.DIVISION_ID\nAND D.DW_CURRENT_VERSION_IND =TRUE AND D.DW_LOGICAL_DELETE_IND =FALSE\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC E ON E.UPC_NBR = A.UPC_ID AND E.CORPORATION_ID = 1\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.SMV_LOYALTY_PROGRAM_RETAIL_CUSTOMER_HOUSEHOLD F ON A.CARD_NBR = F.LOYALTY_PROGRAM_CARD_NBR     AND A.MISC_ITEM_QTY = 0\nAND A.DEPOSIT_ITEM_QTY = 0\nAND  A.UPC_ID IN  (7940046281,7940046279,7940046273,7940046272,7940046271,2279691752,2279691751,2279691671,2279691670,2279691612,2279691611,2279691602,2279691601,2279691432,2279691431,2279691015,2279691014,2279691006,2279691005,2279690092,2279690090,8087817207,8087804238,8087817205,8087817206,8087804219,8087804235,8087804222,8087804225,8087800899,8087800406,8087804216,8087800218,8087817125,8087817126)\nJOIN EDM_VIEWS_PRD.DW_VIEWS.Calendar merge on merge.CALENDAR_DT = A.txn_dte JOIN EDM_SANDBOX_PRD.CORE_TECH.ZHU_COMP_WEEK week on  week.comp_week_id = (merge.FISCAL_YEAR_NBR ||LPAD(merge.Fiscal_Week_Nbr,2,0)) and merge.DW_CURRENT_VERSION_IND =TRUE and MERGE.DW_LOGICAL_DELETE_IND =FALSE  and current_week_id &gt;= 202001 and data_refresh_dt &lt; current_date\nJOIN EDM_VIEWS_PRD.DW_EDW_VIEWS.LIFESTYLE_SAME_STR_DAY same on same.store_id = A.store_id AND  same.txn_dt = A.txn_dte and same_store_ind = 'Y'\nLEFT JOIN (SELECT HOUSEHOLD_ID\n,ANNUAL_LEVEL2_SEGMENT_ID\n,WEEK_ID\n,CASE WHEN ANNUAL_LEVEL2_SEGMENT_ID IN (1) THEN 'ELITE'\nWHEN ANNUAL_LEVEL2_SEGMENT_ID IN (2) THEN 'BEST'\nWHEN ANNUAL_LEVEL2_SEGMENT_ID IN (3, 4) THEN 'GOOD'\nWHEN ANNUAL_LEVEL2_SEGMENT_ID IN (5, 6) THEN 'OCCASIONAL'\nELSE 'UNKNOWN'\nEND AS FACTS_SEG_DESC\nFROM EDM_VIEWS_PRD.DW_EDW_VIEWS.FACTS_SEGMENT_WEEK\nGROUP BY 1, 2, 3, 4\n) AS FACTS ON FACTS.HOUSEHOLD_ID = F.HOUSEHOLD_ID AND FACTS.WEEK_ID = comp_week_id\n\nAND A.REV_DTL_SUBTYPE_ID IN (0, 7)\nAND FACTS.ANNUAL_LEVEL2_SEGMENT_ID IN (1,2,3,4)\nGROUP BY 1,2,3,4,5\n) AS T2\nON T1.UPC_ID = T2.UPC_ID\nAND T1.DIVISION_NM = T2.DIVISION_NM AND T1.WEEK_ID = T2.WEEK_ID) ) TB\nGROUP BY 1,2,3,4,5\n</code></pre>"},{"location":"merch_sql/#ads-page-mods","title":"ads, page, mods","text":"<pre><code>select\u00a0PAGE_IMAGE,\nWEEK_STARTING,\nCHANNEL,\nRETAILER,\nMARKET,\nDEPARTMENT,\nCATEGORY,\nBRAND,\nPRODUCT_SIZE,\nOFFER,\nOFFER_TYPE,\nAD_PRICE,\nNET_UNIT_PRICE,\nUNIT_PRICE,\nMUST_BUY,\nMEDIA_TYPE,\nPAGE_POSITION,\nCOUNT(DISTINCT(UNIQUE_AD)) AS AD_COUNT,\nUPC as upc_id\n\nfrom \"EDM_VIEWS_PRD\".\"DW_BIZOPS_VIEWS\".\"ALBERTSONS_PROMO\" a\njoin \"EDM_VIEWS_PRD\".\"DW_BIZOPS_VIEWS\".\"ALBERTSONS_PROMO_UPC\" b\non a.top_crop_id = b.top_crop_id\n\n--Where CHANNEL LIKE ('%Supermarkets%')\n--AND WEEK_STARTING &gt; DATE '2022-03-01'\n--AND CATEGORY = 'Coffee'\n--AND BRAND = 'Folgers'\n--and RETAILER like ('%Ralphs%')\n--and UPC_ID in ()\nWHERE WEEK_STARTING BETWEEN ('2022-04-10') AND ('2023-04-16')\nAND PARENT_RETAILER IN ('Walmart, INC','Kroger','Albertsons LLC Corp','Ahold Delhaize')\n--AND MARKET IN ('Seattle, WA','Phoenix, AZ','Dallas, TX','Los Angeles, CA','Denver, CO',\n--\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'Boston, MA','Portland, OR','Chicago, IL','Philadelphia, PA','Lubbock, TX',\n--\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'Boise, ID','San Francisco, CA')\nand MARKET IN ('Boise, ID')\nand Retailer in ('Albertsons IM')\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19\nORDER BY AD_COUNT DESC\n</code></pre>"},{"location":"merch_sql/#ncrc-and-old-new-crc","title":"NCRC and OLD NEW CRC","text":"<pre><code>WITH  ITEMS AS (Select distinct\nCDS.CORP_ITEM_CD,\nCDS.DESC_ITEM,\nAPV.NAME,              CDS.MANUF_TYPE_IND,\nURX.PACK_RETAIL AS PACK,\nURX.SIZE_DESC AS SIZE,\nWDS.COST_VEND/CDS.VEND_CONV_FCTR/URX.PACK_RETAIL AS UNIT_COST,              CDS.RETAIL_SECT,\nCDS.DISP_FLAG,\nROG.DIVISION,\nCDS.GROUP_CD,\nCDS.CTGRY_CD,               --URX.ROG,\nOPT.NATIONAL_IND,\nSCH.STORE_CT,\nURX.COMMON_CD as CRC,\nCIGS.DIV_PROMO_GRP_CD AS CIG,\nURX.STATUS_RUPC\n\nfrom \"EDM_VIEWS_PRD\".\"DW_AIM_VIEWS\".\"SSIMS_SSITMCDS\" CDS\n\nJOIN \"EDM_VIEWS_PRD\".\"DW_AIM_VIEWS\".\"SSIMS_SSITMURX\" URX\non CDS.CORP_ITEM_CD = URX.CORP_ITEM_CD\nAND URX.CORP = 001\n\nJOIN \"EDM_VIEWS_PRD\".\"DW_AIM_VIEWS\".\"SSIMS_SSITMROG\" ROG\nON URX.ROG = ROG.ROG\nAND URX.CORP_ITEM_CD = ROG.CORP_ITEM_CD JOIN \"EDM_VIEWS_PRD\".\"DW_AIM_VIEWS\".\"SSIMS_SSITMWDS\" WDS\nON ROG.CORP_ORD = WDS.CORP\nAND ROG.DIVISION_ORD = WDS.DIVISION\nAND ROG.FACILITY = WDS.FACILITY\nAND ROG.CORP_ITEM_CD = WDS.CORP_ITEM_CD JOIN \"EDM_VIEWS_PRD\".\"DW_AIM_VIEWS\".\"SSIMS_APVMAS\" APV\nON WDS.CORP = APV.CORP\nAND WDS.VEND_NUM = APV.VEND_NUM\nAND WDS.VEND_SUB_ACNT = APV.VEND_SUB_ACNT         JOIN \"EDM_VIEWS_PRD\".\"DW_BIZOPS_VIEWS\".\"MEASMOPT\" OPT\nON ROG.DIVISION = OPT.DIV\nAND CDS.GROUP_CD = OPT.GROUP_CD\nAND CDS.CTGRY_CD = OPT.CTGRY_CD\n\nLEFT JOIN \"EDM_BIZOPS_PRD\".\"STRATEGIC_PRICING\".\"ITEMS_ON_SCHEMATIC_EB\" SCH\nON URX.CORP_ITEM_CD = SCH.CORPORATE_ITEM_CD\nAND ROG.DIVISION = SCH.DIVISION_ID\n\nLEFT JOIN \"EDM_VIEWS_PRD\".\"DW_AIM_VIEWS\".\"SSIMS_PPAPPDI\" CIGS\nON ROG.DIVISION = CIGS.DIVISION_ID\nAND ROG.CORP = CIGS.CORP_ID\nAND URX.CORP_ITEM_CD = CIGS.CORP_ITEM_CD\n\n)\n\nSELECT distinct\nITEMS.CORP_ITEM_CD,\nITEMS.DESC_ITEM,\nITEMS.NAME,              ITEMS.MANUF_TYPE_IND,\nITEMS.PACK,\nITEMS.SIZE,\nITEMS.UNIT_COST,\nITEMS.RETAIL_SECT,\nITEMS.DISP_FLAG,\nITEMS.DIVISION,\nITEMS.GROUP_CD,\n--ITEMS.ROG,\nITEMS.NATIONAL_IND,\nITEMS.STORE_CT,\nITEMS.CRC,\nITEMS.CIG,\nITEMS.STATUS_RUPC,\nPGC.PROMO_GRP_SK AS PROMO_GROUP_NBR,\nPGC.PROMO_GRP_NM AS PROMO_GRP_NM,\nPGC.UNIT_TYP_CD,\nPGC.DIV_ID,\nPGC.PROMO_GROUP_VENDOR,\nPGC.VENDOR_CONTACT_NAME,\nPGC.CONTACT_EMAIL_ADDR,\nPGC.CONTACT_PH_NBR,\nPGC.BRKR_NM,\nPGC.BRKR_EMAIL_TXT,\nPGC.BRKR_PH_NBR,\nPGC.BRKR_ROLE_NM\n\nFROM ITEMS\n\nLEFT JOIN \"EDM_BIZOPS_PRD\".\"OMNI\".\"PROMO_GROUP_CONTACTS\" PGC\nON (ITEMS.CIG = PGC.CIG OR ITEMS.CORP_ITEM_CD = PGC.CICS_ATTACHED)\n</code></pre>"},{"location":"merch_sql/#agp-household","title":"AGP Household","text":"<pre><code>select\nty.quarter_id\n,ty.period_id\n,ty.segment\n,ty.sales\n,ly.sales\n,ty.units\n,ly.units\n,ty.households\n,ly.households\n,ty.agp\n,ly.agp\n\n\n\nfrom\n(select\nQUARTER_ID\n,PERIOD_ID\n,case\nwhen PERIODIC_LEVEL2_SEGMENT_ID in (1,2) then 'ELITE_BEST'\nwhen PERIODIC_LEVEL2_SEGMENT_ID in (3,4) then 'GOOD'\nwhen PERIODIC_LEVEL2_SEGMENT_ID in (5,6) then 'OCCASIONAL'\nwhen PERIODIC_LEVEL2_SEGMENT_ID = 99 then 'UNIDENTIFIED'\nend as SEGMENT\n,sum(NET_SALES) as Sales\n,sum(ITEM_QTY) as Units\n,count(distinct household_id) as Households\n,sum(AGP_TOT) as AGP\n\n\n\nfrom edm_bizops_prd.omni.EB_HH_STORE_WKLY_AGP_ALLDIV_VIEW_WITH_SEGMENT_TABLE\n\n\n\nwhere quarter_id between 202203 and 202301\n\n\n\ngroup by 1,2,3)ty\n\n\n\nfull outer join\n\n\n\n(select\nQUARTER_ID\n,PERIOD_ID\n,case\nwhen PERIODIC_LEVEL2_SEGMENT_ID in (1,2) then 'ELITE_BEST'\nwhen PERIODIC_LEVEL2_SEGMENT_ID in (3,4) then 'GOOD'\nwhen PERIODIC_LEVEL2_SEGMENT_ID in (5,6) then 'OCCASIONAL'\nwhen PERIODIC_LEVEL2_SEGMENT_ID = 99 then 'UNIDENTIFIED'\nend as SEGMENT\n,sum(NET_SALES) as Sales\n,sum(ITEM_QTY) as Units\n,count(distinct household_id) as Households\n,sum(AGP_TOT) as AGP\n\n\n\nfrom edm_bizops_prd.omni.EB_HH_STORE_WKLY_AGP_ALLDIV_VIEW_WITH_SEGMENT_TABLE\n\n\n\nwhere quarter_id between 202103 and 202201\n\n\n\ngroup by 1,2,3)ly\n\n\n\non ty.quarter_id = ly.quarter_id + 100\nand ty.period_id = ly.period_id + 100\nand ty.segment = ly.segment\n</code></pre>"},{"location":"merch_sql/#promotion-sql","title":"Promotion Sql","text":"<pre><code>WITH PROMOID AS (\nSELECT DISTINCT PROMOTION_ID\nFROM EDM_VIEWS_PRD.DW_VIEWS.APEX_PROMOTION\nWHERE PERFORMANCE_START_DT BETWEEN '01/01/2021' AND current_date-1\nAND ADVERTISEMENT_IND = 'Y'\nAND DW_LOGICAL_DELETE_IND = FALSE\nAND DW_CURRENT_VERSION_IND = TRUE)\n\n\n\n, PA AS (\nSELECT DISTINCT\nPA.PROMOTION_VEHICLE_FIRST_EFFECTIVE_DT\n,PA.DIVISION_ID\n,PA.PROMOTION_ID\n,PA.AD_VERSION_INTEGRATION_ID\n,PA.PAGE_NBR\n,PA.CORPORATE_ITEM_INTEGRATION_ID\n,PA.COMMON_ITEM_GROUP_CD\n,CASE WHEN PA.PROMOTION_PRICE_METHOD_CD = 'N' THEN 'NET_PRICE' WHEN PA.PROMOTION_PRICE_METHOD_CD = 'B'  THEN 'BOGO'\nWHEN PA.PROMOTION_PRICE_METHOD_CD = 'P'  THEN 'PRECENT_OFF'\nWHEN PA.PROMOTION_PRICE_METHOD_CD = 'C' THEN 'CENTS_OFF' END AS TACTIC\n,   CASE WHEN PA.PROMOTION_PRICE_METHOD_CD = 'N' THEN TRIM ( TO_VARCHAR ( PA.PROMOTION_PRICE_FCTR ) ) || '/' || TRIM ( TO_VARCHAR ( PA.PROMOTION_PRICE_AMT , '$999.00' ) )\nWHEN PA.PROMOTION_PRICE_METHOD_CD = 'B' THEN 'BXGY'\nWHEN PA.PROMOTION_PRICE_METHOD_CD = 'P'\nTHEN TRIM ( TO_VARCHAR ( PA.PROMOTION_PRICE_AMT, '00' ) ) || '% Off' WHEN PA.PROMOTION_PRICE_METHOD_CD = 'C'\nTHEN TRIM ( TO_VARCHAR ( PA.PROMOTION_PRICE_AMT, '$999.00' ) ) || ' Off' ELSE TRIM ( TO_VARCHAR ( PA.PROMOTION_PRICE_FCTR ) ) || '/' || TRIM ( TO_VARCHAR ( PA.PROMOTION_PRICE_AMT , '$999.00' ) )\nEND AS PRICE_TACTIC\n,PA.HEADLINE_TXT AS HEADLINE_TXT\n,PA.PROMOTION_VEHICLE_NM      ,LPAD(PA.MOD_NBR,2,0) AS MOD_NBR\n,'PG'||' '||PA.PAGE_NBR || ' - ' ||'Mod'||' '|| LPAD(PA.MOD_NBR,2,0) || ' - ' || REGEXP_REPLACE ( COLLATE ( PA.HEADLINE_TXT , '' ) , '\\&amp;(.*?)\\;' , '' ) AS MOD_NAME\n\nFROM EDM_VIEWS_PRD.DW_VIEWS.PROMOTION_ADVERTISEMENT PA\nWHERE PA.DW_CURRENT_VERSION_IND = 'TRUE'\nAND PA.DW_LOGICAL_DELETE_IND = 'FALSE'\nAND PA.PROMOTION_ID IN (SELECT DISTINCT PROMOTION_ID FROM PROMOID)\n)             SELECT DISTINCT\nPDAY.PROMOTION_WEEK_ID\n,   PDAY.FISCAL_WEEK_ID\n,   PA.PROMOTION_VEHICLE_FIRST_EFFECTIVE_DT AS PROMOTION_START_DT\n,   DRS.ROG_ID\n,   TRY_TO_NUMBER(DRS.RETAIL_STORE_FACILITY_NBR)::INTEGER AS STORE_ID\n,   AV.AD_VERSION_NM\n,   PA.DIVISION_ID\n,   PA.PROMOTION_ID\n,   UPC.SMIC_CATEGORY_ID AS CATEGORY_ID\n,   PA.AD_VERSION_INTEGRATION_ID\n,   PA.PAGE_NBR AS PAGE_NBR\n,   PA.TACTIC    ,   PA.PRICE_TACTIC\n,   PA.HEADLINE_TXT AS HEADLINE_TXT\n,   PA.PROMOTION_VEHICLE_NM\n,   PA.COMMON_ITEM_GROUP_CD as CIG\n,   UPC.UPC_NBR\n,   UPC.INTERNET_ITEM_DSC\n,   CASE WHEN CIURR2.SENSITIVE_ROLE_CD = 'S' THEN 'SSKVI'\nWHEN CIURR2.SENSITIVE_ROLE_CD = 'K' THEN 'KVI'\nWHEN CIURR2.SENSITIVE_ROLE_CD = 'F' THEN 'FOREGROUND'\nWHEN CIURR2.SENSITIVE_ROLE_CD = 'B' THEN 'BACKGROUND'\nELSE 'BACKGROUND' END AS ITEM_SENSITIVITY\n,   LPAD(PA.MOD_NBR,2,0) AS MOD_NBR\n,   PA.MOD_NAME\n,   UPC.UPC_NBR || ' - ' || INITCAP ( UPC.INTERNET_ITEM_DSC ) AS ITEM_NM\n,   LPAD(PA.DIVISION_ID,2,0)|| '-' || LPAD(UPC.SMIC_CATEGORY_ID,4,0)AS KEY_DIV_CAT\n,   LPAD(PA.DIVISION_ID,2,0)|| ' - ' ||(PDAY.PROMOTION_WEEK_ID) AS KEY_DIV_WEEK\n\n\n\n--FROM EDM_VIEWS_PRD.DW_VIEWS.PROMOTION_ADVERTISEMENT PA\nFROM PA PA\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE DRS\nON DRS.DIVISION_ID = PA.DIVISION_ID\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.AD_VERSION_RETAIL_STORE AVS ON DRS.FACILITY_INTEGRATION_ID = AVS.FACILITY_INTEGRATION_ID\nAND AVS.AD_VERSION_INTEGRATION_ID = PA.AD_VERSION_INTEGRATION_ID\nAND PA.PROMOTION_VEHICLE_FIRST_EFFECTIVE_DT BETWEEN AVS.AD_VERSION_STORE_FIRST_EFFECTIVE_DT AND AVS.AD_VERSION_STORE_LAST_EFFECTIVE_DT\nAND AVS.DW_LOGICAL_DELETE_IND = 'FALSE'\nAND AVS.DW_CURRENT_VERSION_IND = 'TRUE'\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.AD_VERSION AV\nON AV.AD_VERSION_INTEGRATION_ID = PA.AD_VERSION_INTEGRATION_ID\nAND AV.DW_CURRENT_VERSION_IND = 'TRUE'\nAND AV.DW_LOGICAL_DELETE_IND = 'FALSE'\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_PROMOTION_CALENDAR_DAY PDAY\nON PDAY.CALENDAR_DT = PA.PROMOTION_VEHICLE_FIRST_EFFECTIVE_DT\nAND PDAY.DIVISION_ID = DRS.DIVISION_ID\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE CIURR\nON CIURR.CORPORATE_ITEM_INTEGRATION_ID = PA.CORPORATE_ITEM_INTEGRATION_ID\nAND CIURR.ROG_ID = DRS.ROG_ID\nAND CIURR.DW_CURRENT_VERSION_IND = 'TRUE'\nAND CIURR.DW_LOGICAL_DELETE_IND = 'FALSE'\nAND CIURR.CORPORATE_ITEM_INTEGRATION_ID IS NOT NULL\nAND CIURR.UPC_NBR IS NOT NULL\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_REFERENCE CIUR\nON CIUR.UPC_NBR = CIURR.UPC_NBR\nAND CIUR.DW_CURRENT_VERSION_IND = 'TRUE'\nAND CIUR.DW_LOGICAL_DELETE_IND = 'FALSE'\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM CI\nON CI.CORPORATE_ITEM_INTEGRATION_ID = CIUR.CORPORATE_ITEM_INTEGRATION_ID\nAND CI.DW_CURRENT_VERSION_IND = 'TRUE'\nAND CI.DW_LOGICAL_DELETE_IND = 'FALSE'\nAND CI.DISPLAY_ITEM_IND &lt;&gt; 'Y'\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC UPC\nON UPC.CORPORATE_ITEM_INTEGRATION_ID = CIUR.CORPORATE_ITEM_INTEGRATION_ID\nAND UPC.RETAIL_DEPARTMENT_ID &lt;&gt; 'N/A' LEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE CIURR2\nON CIURR2.CORPORATE_ITEM_INTEGRATION_ID = CIURR.CORPORATE_ITEM_INTEGRATION_ID\nAND CIURR2.UPC_TYPE_CD = '1'\nAND CIURR2.ROG_ID = CIURR.ROG_ID\nAND CIURR2.DW_CURRENT_VERSION_IND = TRUE\nAND CIURR2.DW_LOGICAL_DELETE_IND = FALSE\n\nWHERE 1=1\nAND PROMOTION_WEEK_ID &gt;= 202201\nAND PROMOTION_WEEK_ID &lt;= (SELECT DISTINCT PROMOTION_WEEK_ID FROM EDM_VIEWS_PRD.DW_VIEWS.D1_PROMOTION_CALENDAR_DAY WHERE CALENDAR_DT = CURRENT_DATE()-1 AND DIVISION_ID = '30')\nAND DRS.DIVISION_ID IN ('27','34','19','20','32','25','29','17','33','05','30','24')\nAND DRS.OPEN_DT &lt; CURRENT_DATE() - 364\nAND DRS.CLOSE_DT &gt; CURRENT_DATE()\n--AND CIURR.CORPORATE_ITEM_INTEGRATION_ID = 3008622\nAND CIURR.ROG_ID = 'SPRT'\nAND PDAY.PROMOTION_WEEK_ID = 202333\nAND DRS.RETAIL_STORE_FACILITY_NBR = '2627'\n</code></pre>"},{"location":"merch_sql/#meat-primal-and-base","title":"meat primal and base","text":"<pre><code>select a.division_id,   a.corporate_item_cd as primal_item_cd, primal_item_dsc, a.base_corporate_item_cd, BASE_ITEM_DSC, a.yield_pct, c.upc_id from EDM_VIEWS_PRD.DW_VIEWS.BASE_MEAT_ITEM_YIELD a join EDM_VIEWS_PRD.DW_VIEWS.PRIMAL_MEAT_ITEM_YIELD b on a.corporate_item_cd = b.corporate_item_cd and a.division_id = b.division_id left join (select division_id, upc_nbr as upc_id, corp_item_cd from EDM_BIZOPS_PRD.MERCHAPPS.CIC_UPC_ROG group by 1,2,3) c on a.base_corporate_item_cd = c.corp_item_cd\nand a.division_id=c.division_id\nwhere a.division_id = 5 and a.corporate_item_cd = 88020096\n</code></pre>"},{"location":"merch_sql/#ncrc","title":"NCRC","text":"<pre><code>SELECT    PGI.PRICE_GROUP_ID       AS NCRC\n, PG.PRICE_GROUP_DSC       AS \"NCRC DESC\"\n, CI.CORPORATE_ITEM_CD     AS CIC\n, PGI.UNIT_TYPE_NBR        AS \"UNIT TYPE NBR\"\n, CI.ITEM_DSC              AS \"ITEM DSC\"\n, CR.ROG_ID                AS \"ROG ID\"\n, PGAD.PRICE_GROUP_ROG_DSC AS \"NCRC ROG DESC\"\n, CI.SMIC_GROUP_CD AS \"GROUP CD\"\n, CI.SMIC_CATEGORY_CD AS \"CATEGORY CD\"\n, MR.CATEGORY_RESPONSIBILITY_NM\n, MR.DEPARTMENT_ID\n, CI.common_retail_cd as \"CRC\"\n\nFROM      EDM_VIEWS_PRD.DW_VIEWS.PRICE_GROUP_ITEM PGI\n\nJOIN      EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM CI ON        CI.CORPORATE_ITEM_INTEGRATION_ID = PGI.CORPORATE_ITEM_INTEGRATION_ID\nAND       CI.DW_CURRENT_VERSION_IND = TRUE\nAND       CI.DW_LOGICAL_DELETE_IND = FALSE\n\nJOIN      EDM_VIEWS_PRD.DW_VIEWS.PRICE_GROUP PG ON        PG.PRICE_GROUP_ID = PGI.PRICE_GROUP_ID\nAND       PG.DW_CURRENT_VERSION_IND = TRUE\nAND       PG.DW_LOGICAL_DELETE_IND = FALSE\n\nJOIN      EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE CR\nON        CR.CORPORATE_ITEM_INTEGRATION_ID = CI.CORPORATE_ITEM_INTEGRATION_ID\nAND       CR.UPC_PACK_IND = PGI.UNIT_TYPE_NBR\nAND       CR.DW_CURRENT_VERSION_IND = TRUE\nAND       CR.DW_LOGICAL_DELETE_IND = FALSE\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.DIM_ROG ROG on ROG.ROG_ID = CR.ROG_ID\nand rog.dw_logical_delete_ind = false LEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.PRICE_GROUP_ALTERNATE_DESCRIPTION PGAD\nON        PGAD.ROG_ID = CR.ROG_ID\nAND       PGAD.PRICE_GROUP_ID = REGEXP_REPLACE(PGI.PRICE_GROUP_ID,'-.*','')\nAND       PGAD.DW_CURRENT_VERSION_IND = TRUE\nAND       PGAD.DW_LOGICAL_DELETE_IND = FALSE\n\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.MERCHANDISING_RESPONSIBILITY MR\nON MR.DIVISION_ID = rog.division_id\nAND MR.SMIC_CATEGORY_ID = (CI.SMIC_GROUP_CD * 100 + CI.SMIC_CATEGORY_CD)\n\n\nWHERE     CR.ROG_ID IN ('ASHA',' ',' ')\nAND       PGI.DW_CURRENT_VERSION_IND = TRUE\nAND       PGI.DW_LOGICAL_DELETE_IND = FALSE\n\nGROUP BY  PGI.PRICE_GROUP_ID\n, CI.CORPORATE_ITEM_CD\n, PGI.UNIT_TYPE_NBR\n, CI.ITEM_DSC\n, PG.PRICE_GROUP_DSC\n, CR.ROG_ID\n, PGAD.PRICE_GROUP_ROG_DSC\n, CI.SMIC_GROUP_CD\n, CI.SMIC_CATEGORY_CD\n, MR.CATEGORY_RESPONSIBILITY_NM\n, MR.DEPARTMENT_ID\n, CI.common_retail_cd\nORDER BY  TRY_TO_NUMBER(REGEXP_REPLACE(TRIM(PGI.PRICE_GROUP_ID),'-.*',''))\n, CI.CORPORATE_ITEM_CD\n, CR.ROG_ID\n, PGI.UNIT_TYPE_NBR\n</code></pre>"},{"location":"merch_sql/#average-price-over-time","title":"average price over time","text":"<pre><code>select day_dt, upc_id, DESCRIPTION, avg(avg_price) as price\nfrom EDM_BIZOPS_PRD.omni.zhu_version_store_upc_daily_avg_price_view_with_inventory a\njoin EDM_VIEWS_PRD.DW_EDW_VIEWS.STORE_PRICE_AREA b on try_to_number(a.store_id) = b.store_id and price_area_id = 1 and loc_retail_sect_id = '301'\njoin edm_bizops_prd.merchapps.zhu_version_lu_upc c on a.upc_id = c.upc_id\nwhere div = 25 and c.group_id = 32 and day_dt &gt; current_date - 365\ngroup by 1,2,3\norder by 1,2\n</code></pre>"},{"location":"operation_sql/","title":"Operation SQL","text":""},{"location":"operation_sql/#store-distress-by-quarter-period-department-item","title":"Store Distress by Quarter Period Department Item","text":"<pre><code>SELECT\n// EDW VERSIONS THAT WERE CONVERTED ARE IN COMMENTS//\nPD.FISCAL_PERIOD_NBR AS PERIOD,            --LU.PERIOD_ID as PERIOD,\nPD.FISCAL_QUARTER_NBR AS QUARTER,            --LU.QUARTER_ID as QUARTER,\nSTR.DISTRICT_CD AS DISTRICT,            --district_cd AS DISTRICT,\nSTR.RETAIL_STORE_FACILITY_NBR AS STORE,            --a.store_id AS STORE,\nROG.DEPARTMENT_ID ||' '||ROG.SMIC_GROUP_DSC AS DEPARTMENT,            --b.department_id ||' '|| b.department_nm as DEPARTMENT,\nROG.CATEGORY_ID||' '||ROG.SMIC_CATEGORY_DSC AS CATEGORY,            --b.CATEGORY_ID ||' '|| B.CATEGORY_NM AS CATEGORY,\nROG.CLASS_ID||' '||ROG.SMIC_CLASS_DSC AS CLASS,            --B.CLASS_ID ||' '|| B.CLASS_NM AS CLASS,\nA.UPC_ID||' '||CI.ITEM_DSC||' - CIC '||CI.CORPORATE_ITEM_CD AS DESCRIPTION,            --B.UPC_ID ||' '|| B.UPC_DSC ||' - CIC '||B.CORP_ITEM_CD AS DESCRIPTION,\nSUM(NET_AMT) AS DISTRESS_TY            --sum(net_amt) as DISTRESS_TY\n\nFROM EDM_VIEWS_PRD.DW_EDW_VIEWS.ITEM_DISTRESS_AGG A            --from dw_dss.item_distress_agg a\nJOIN DW_VIEWS.RETAIL_ORDER_GROUP_UPC_EXTENDED ROG            --JOIN dw_dss.lu_upc b\nON A.UPC_ID = ROG.UPC_NBR            --ON a.upc_id = b.upc_id\n\nJOIN DW_VIEWS.CORPORATE_ITEM CI\nON ROG.COMMON_RETAIL_CD = CI.COMMON_RETAIL_CD\nAND CI.CORPORATE_ITEM_CD = ROG.PREFERRED_CORPORATE_ITEM_CD JOIN DW_VIEWS.D1_RETAIL_STORE STR            --JOIN dw_dss.lu_store c\nON A.STORE_ID = STR.RETAIL_STORE_FACILITY_NBR            --ON a.store_id = c.store_id\nAND ROG.ROG_ID = STR.ROG_ID             --AND b.corporation_id = c.corporation_id\n\nJOIN DW_VIEWS.CALENDAR CAL            --JOIN DW_DSS.LU_DAY_MERGE LU\nON A.DISTRESS_DT = CAL.CALENDAR_DT            --ON a.DISTRESS_DT = LU.D_DATE\n\nJOIN DW_VIEWS.FISCAL_PERIOD PD\nON CAL.FISCAL_PERIOD_NBR = PD.FISCAL_PERIOD_NBR\nAND CAL.FISCAL_YEAR_NBR = PD.FISCAL_YEAR_NBR WHERE STR.CORPORATION_ID = '001'            --where b.corporation_id =1\nAND ROG.DEPARTMENT_ID IN (306,309)            --and department_id in (306,309)\nAND STR.DIVISION_ID = '32'             --and division_id = 32\nAND STR.DIVISION_NM LIKE '%JEWEL%'\nAND CAL.CALENDAR_DT BETWEEN '04/01/2022' and CURRENT_DATE-1            --and d_date between '04/01/2022' and current_date-1\nAND ROG.DW_CURRENT_VERSION_IND = TRUE\nAND STR.DW_LOGICAL_DELETE_IND = FALSE\nAND PD.DW_CURRENT_VERSION_IND = TRUE\nAND PD.DW_LOGICAL_DELETE_IND = FALSE\nAND CAL.DW_CURRENT_VERSION_IND = TRUE\nAND CAL.DW_LOGICAL_DELETE_IND = FALSE\nAND CI.DW_CURRENT_VERSION_IND = TRUE\nAND CI.DW_LOGICAL_DELETE_IND = FALSE\ngroup by 1,2,3,4,5,6,7,8\norder by 1,3,4,8;\n</code></pre>"},{"location":"operation_sql/#far-ps-queries","title":"Far PS Queries","text":"<pre><code>STEP 1 - create or replace table EDM_BIZOPS_PRD.MERCHAPPS.STORE_PS_ITEM_STORE_PLANOGRAM_T as\nSELECT  z.store_upc store_upc\n,        z.store_id store_id\n,        z.rog_id\n,        z.section_CD as DEPT_SECTION_ID\n,        z.upc_nbr upc_nbr ,        z.corporate_item_cd corporate_item_cd\n,        z.item_dsc\n,        z.size_qty\n,        z.size_uom_cd\n,        z.Fixture_Id\n,        z.HORIZONTAL_CNT HORIZONTAL_CNT\n,        z.VERTICAL_CNT VERTICAL_CNT\n--                  ,        z.bay_shelf_nbr\n,        z.STORE_SCHEMATIC_EFFECTIVE_START_DT ,        z.STORE_SCHEMATIC_EFFECTIVE_END_DT --,        z.large_pet_supply_3\n,        z.large_pet_supply_20\n,        z.spice_pack_ind\n--                  ,        max(z.bay_shelf_nbr) OVER (PARTITION BY z.fxtr_cd) AS max_bay_shelf_nbr\nFROM\n(SELECT a.Retail_store_facility_nbr || '-' || u.upc_nbr AS store_upc\n,               a.Retail_store_facility_nbr as store_id\n,               a.rog_id\n,               u.section_CD\n,               u.CONSUMER_SELLING_CD\n,               u.upc_nbr\n,               u.corporate_item_cd\n,               u.item_dsc\n,               c.size_qty\n,               c.size_uom_cd\n,               psi.Fixture_Id\n--                  ,               pfs.shelf_y_coord_nbr\n,               psi.HORIZONTAL_CNT\n,               psi.VERTICAL_CNT\n,               psi.STORE_SCHEMATIC_EFFECTIVE_START_DT ,               psi.STORE_SCHEMATIC_EFFECTIVE_END_DT ,               CASE WHEN u.SMIC_category_id = 525 OR u.SMIC_class_id = 53015 THEN 'Y' ELSE 'N' END AS spice_pack_ind\n--,               CASE WHEN c.Corporate_Item_Integration_Id IS NOT NULL THEN 'Y' ELSE 'N' END AS large_pet_supply_3\n,               CASE WHEN c2.Corporate_Item_Integration_Id IS NOT NULL THEN 'Y' ELSE 'N' END AS large_pet_supply_20\n--                  ,               dense_rank() OVER (PARTITION BY pfs.fxtr_cd ORDER BY pfs.shelf_y_coord_nbr) AS bay_shelf_nbr                                                                                                                                                                                               \n\nFROM\n(SELECT * FROM  (SELECT F.Facility_NBR\n,           psi.upc_nbr\n,           psi.PLANOGRAM_ID\n,           psf.Fixture_Id\n,           psi.HORIZONTAL_CNT\n,           psi.VERTICAL_CNT\n,           psf.STORE_SCHEMATIC_EFFECTIVE_START_DT ,           psf.STORE_SCHEMATIC_EFFECTIVE_END_DT\nFROM EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_SLOT_ITEM psi\nJOIN EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_STORE_FIXTURE psf\nON psf.PLANOGRAM_ID = psi.PLANOGRAM_ID\nJOIN EDM_VIEWS_PRD.DW_VIEWS.FACILITY F\nON psf.Facility_Integration_id = F.Facility_Integration_id\n-- JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC u\n-- ON u.CONSUMER_SELLING_CD = psi.CONSUMER_SELLING_CD and u.CORPORATE_ITEM_CD &gt; 0\nWHERE 1=1\nAND current_date BETWEEN psf.STORE_SCHEMATIC_EFFECTIVE_START_DT - 14 AND psf.STORE_SCHEMATIC_EFFECTIVE_END_DT - 14\nAND psi.CONSUMER_SELLING_CD &lt;&gt; 0\nAND psi.CONSUMER_SELLING_CD IS NOT NULL\nand F.dw_logical_delete_ind = FALSE\nand F.dw_current_version_ind = True\nand psi.dw_logical_delete_ind = FALSE\nand psi.dw_current_version_ind = True\nand psf.dw_logical_delete_ind = FALSE\nand psf.dw_current_version_ind = True\nand F.Facility_type_cd ='RT'\nAND F.corporation_id ='001'\n--AND u.corporation_id ='001'\nGROUP BY 1,2,3,4,5,6,7,8\nUNION ALL\nSELECT F.FACILITY_NBR\n,               psi.upc_NBR\n,               psi.PLANOGRAM_ID\n,               psf.Fixture_Id\n,               psi.HORIZONTAL_CNT\n,               psi.VERTICAL_CNT\n,              psf.STORE_SCHEMATIC_EFFECTIVE_START_DT\n,              psf.STORE_SCHEMATIC_EFFECTIVE_END_DT\nFROM EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_SLOT_ITEM psi\nJOIN EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_STORE_FIXTURE psf\nON psf.PLANOGRAM_ID = psi.PLANOGRAM_ID\nJOIN EDM_VIEWS_PRD.DW_VIEWS.FACILITY F\nON psf.Facility_Integration_id = F.Facility_Integration_id\nWHERE 1=1\nAND current_date BETWEEN psf.STORE_SCHEMATIC_EFFECTIVE_START_DT - 14 AND psf.STORE_SCHEMATIC_EFFECTIVE_END_DT - 14\nAND (psi.CONSUMER_SELLING_CD = 0 OR psi.CONSUMER_SELLING_CD IS NULL)\nand F.dw_logical_delete_ind = FALSE\nand F.dw_current_version_ind = True\nand psi.dw_logical_delete_ind = FALSE\nand psi.dw_current_version_ind = True\nand psf.dw_logical_delete_ind = FALSE\nand psf.dw_current_version_ind = True\nand F.Facility_type_cd ='RT'\nAND F.corporation_id ='001'\nGROUP BY 1,2,3,4,5,6,7,8) csc\nGROUP BY 1,2,3,4,5,6,7,8) psi\nJOIN EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM p\nON p.PLANOGRAM_ID = psi.PLANOGRAM_ID\n--AND p.Fixture_Id = psf.Fixture_Id                                                                                               \n--        JOIN (\n--        SELECT p.store_id\n--    ,          p.pog_id\n--    ,          p.pog_fxtr_start_dt\n--    ,   p.pog_fxtr_end_dt\n--       FROM EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_STORE_FIXTURE p\n--       WHERE current_date() BETWEEN p.pog_fxtr_start_dt - 14 AND p.pog_fxtr_end_dt - 14\n--      GROUP BY 1,2,3,4\n--      ) psf\n--      ON psf.PLANOGRAM_ID = psi.PLANOGRAM_ID                                                                                               \n--        JOIN EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_fxtr_shelf pfs\n--        ON pfs.fxtr_cd = p.fxtr_cd\n--        AND pfs.fxtr_shelf_nbr = psi.fxtr_shelf_nbr                                                                                              \nLEFT JOIN\n(SELECT F.FACILITY_NBR || '-' || psi.upc_NBR AS store_upc\n,               F.FACILITY_NBR\n,               psi.upc_NBR                                                                                                              FROM EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_STORE_FIXTURE psf\nJOIN EDM_VIEWS_PRD.DW_VIEWS.FACILITY F\nON psf.Facility_Integration_id = F.Facility_Integration_id  JOIN EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM_SLOT_ITEM psi\nON psi.PLANOGRAM_ID = psf.PLANOGRAM_ID                                                                                    JOIN EDM_VIEWS_PRD.DW_VIEWS.PLANOGRAM pog\nON pog.PLANOGRAM_ID = psf.PLANOGRAM_ID                                                                                                               JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC u\nON u.upc_nbr = psi.upc_NBR                                                                                                             WHERE 1=1\nAND current_date BETWEEN psf.STORE_SCHEMATIC_EFFECTIVE_START_DT - 14 AND psf.STORE_SCHEMATIC_EFFECTIVE_END_DT - 14\nand u.SAFEWAY_UPC_IND &lt;&gt; FALSE and F.dw_logical_delete_ind = FALSE\nand F.dw_current_version_ind = True\nand F.Facility_type_cd ='RT'\nAND F.corporation_id ='001'\nand psi.dw_logical_delete_ind = FALSE\nand psi.dw_current_version_ind = True\nand psf.dw_logical_delete_ind = FALSE\nand psf.dw_current_version_ind = True\nAND pog.Stocking_Section_Nbr IN (101, 103, 107, 140, 141, 142, 143, 959, 962, 990, 991)\n--AND u.dept_section_id = 318                                                                                      \nGROUP BY 1,2,3\n) ss\nON ss.store_upc = psi.FACILITY_NBR || '-' || psi.upc_NBR                                                                                                                                                                               --  JOIN EDM_VIEWS_PRD.DW_EDW_VIEWS.lu_stock_sect st\n--  ON st.stock_sect_nbr = p.Stocking_Section_Nbr\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC u\nON u.upc_nbr = psi.upc_NBR                     --USE FOR KEHE\n--JOIN DW_PRD.DW_DSS.BDR_PURCHASE_ITEM b                                \n--ON b.upc_id = u.upc_nbr                                                                                              \nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_Retail_store a\nON a.Retail_store_facility_nbr = psi.FACILITY_NBR                                                                                LEFT JOIN\n(SELECT c.Corporate_Item_Integration_Id\n,          c.Size_Qty\n,          c.size_uom_cd                                                                                FROM EDM_VIEWS_PRD.DW_VIEWS.Corporate_Item c                                                                                         JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC u\nON u.Corporate_Item_Integration_Id = c.Corporate_Item_Integration_Id\nWHERE c.CORPORATE_ITEM_CD &gt; 0\nand c.dw_logical_delete_ind = FALSE\nand u.SAFEWAY_UPC_IND &lt;&gt; FALSE and c.dw_current_version_ind = True\n--  AND (((c.size_qty &gt;= 48 AND c.size_uom_cd = 'OZ') OR (c.size_qty &gt;= 3 AND c.size_uom_cd = 'LB')) AND ((c.size_qty &lt; 320 AND c.size_uom_cd = 'OZ') OR (c.size_qty &lt; 20 AND c.size_uom_cd = 'LB')))\n--  AND u.smic_category_id IN (3207,3202,3210)\n--  AND c.corporation_id = '001'\n--  AND u.smic_group_id = 32\nGROUP BY 1,2,3\n) c\nON u.Corporate_Item_Integration_Id = c.Corporate_Item_Integration_Id\nLEFT JOIN\n(SELECT c.Corporate_Item_Integration_Id\nFROM EDM_VIEWS_PRD.DW_VIEWS.Corporate_Item c\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC u\nON u.Corporate_Item_Integration_Id = c.Corporate_Item_Integration_Id\nWHERE c.CORPORATE_ITEM_CD  &gt; 0\nand u.SAFEWAY_UPC_IND &lt;&gt; FALSE and c.dw_logical_delete_ind = FALSE\nand c.dw_current_version_ind = True\nAND ((c.size_qty &gt;= 320 AND c.size_uom_cd = 'OZ') OR (c.size_qty &gt;= 20 AND c.size_uom_cd = 'LB'))\nAND u.SMIC_category_id IN (3207,3202,3210)\nAND c.corporation_id = '001'\nAND u.SMIC_group_id = 32\nGROUP BY 1\n) c2\nON u.Corporate_Item_Integration_Id = c2.Corporate_Item_Integration_Id\nWHERE 1=1\nand p.dw_logical_delete_ind = FALSE\nand p.dw_current_version_ind = True\nAND psi.upc_NBR &gt; 0\n-- AND ss.store_upc IS NULL\nAND u.CORPORATE_ITEM_CD  &gt; 0\nand u.SAFEWAY_UPC_IND &lt;&gt; FALSE --AND NOT a.parent_op_area_cd IN ()\n--AND a.store_id in (0767)\n--AND a.parent_op_area_cd IN (33)\n--AND u.department_id IN (317)\n--AND U.corp_item_cd IN (65150011)\n--AND u.department_id IN (317,314,323,324,325)\n--AND u.upc_nbr IN (2113045724)\n--AND u.category_id IN (8855,8856,8857,8858,8859,8863)\n--AND a.rog_id = 23\n--USE FOR KEHE (check JOIN above)\n--AND b.vend_nbr = '006446'                                                                                          \nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n) z            GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16;\n\nSTEP 2 -\ncreate or replace table EDM_BIZOPS_PRD.MERCHAPPS.STORE_PS_SALES_BY_ITEM_STORE_T (\nstore_upc,\nstore_id ,\nupc_nbr ,\navg_week_item_qty) as SELECT z.store_id || '-' || z.upc_nbr AS store_upc  ,        z.store_id store_id\n,        z.upc_nbr upc_nbr\n,        div0(z.item_qty, w.weeks_dif) AS avg_week_item_qty       FROM\n(\nSELECT rs.facility_nbr as store_id\n,s.FACILITY_INTEGRATION_ID\n,        s.upc_NBR\n,        sum(s.ITEM_QTY) AS item_qty\nFROM EDM_VIEWS_PRD.DW_VIEWS.SALES_AGGREGATE_DY s\njoin EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE rs\nON rs.FACILITY_INTEGRATION_ID = s.FACILITY_INTEGRATION_ID\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE a\nON a.FACILITY_INTEGRATION_ID = s.FACILITY_INTEGRATION_ID and a.division_id &lt;&gt; 'N/A'\nAND rs.FACILITY_INTEGRATION_ID=a.FACILITY_INTEGRATION_ID JOIN EDM_VIEWS_PRD.DW_VIEWS.CALENDAR D\nON D.Calendar_dt = s.TRANSACTION_DT\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_upc u\nON u.upc_nbr = s.upc_nbr and u.CORPORATE_ITEM_CD &gt; 0\nAND u.corporation_id = '001'\nWHERE D.DW_LOGICAL_DELETE_IND = FALSE AND D.DW_CURRENT_VERSION_IND = TRUE\n--and s.DW_LOGICAL_DELETE_IND = FALSE \nAND s.DW_CURRENT_VERSION_IND = TRUE\nand u.SAFEWAY_UPC_IND &lt;&gt; FALSE and rs.DW_LOGICAL_DELETE_IND = FALSE AND rs.DW_CURRENT_VERSION_IND = TRUE\n--AND A.DW_LOGICAL_DELETE_IND = FALSE\nAND D.Calendar_dt BETWEEN current_date - 365 AND current_date - 1\n--AND NOT a.parent_op_area_cd IN ()\n--AND a.store_id in (0767)\n--AND a.parent_op_area_cd IN (33)\n--AND u.department_id IN (317)\n--AND U.corp_item_cd IN (65150011)\n--AND u.department_id IN (317,314,323,324,325)\n--AND u.upc_id IN (2113045724)\n--AND u.category_id IN (8855,8856,8857,8858,8859,8863)\n--AND a.rog_id = 23                                                   \nGROUP BY 1,2,3\n) z      JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE a\nON a.FACILITY_INTEGRATION_ID = z.FACILITY_INTEGRATION_ID\nand a.division_id &lt;&gt; 'N/A'\nLEFT JOIN\n(                SELECT rs.FACILITY_nbr as store_id\n,               s.upc_nbr\n,               round((current_date - 7 - min(s.TRANSACTION_DT)) / 7,0) AS weeks_dif\nFROM EDM_VIEWS_PRD.DW_VIEWS.SALES_AGGREGATE_DY s\njoin EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE rs\nON rs.FACILITY_INTEGRATION_ID = s.FACILITY_INTEGRATION_ID\n\nWHERE 1=1\n-- and s.DW_LOGICAL_DELETE_IND = FALSE \nAND s.DW_CURRENT_VERSION_IND = TRUE\nand rs.DW_LOGICAL_DELETE_IND = FALSE AND rs.DW_CURRENT_VERSION_IND = TRUE\nAND s.TRANSACTION_DT BETWEEN current_date - 365 and current_date - 1\nGROUP BY 1,2\n) w\nON w.store_id || '-' || w.upc_nbr = z.store_id || '-' || z.upc_nbr\nWHERE 1=1\n\n--AND z.sum_item_qty / 52 &lt; 1\nAND current_date - a.Open_Dt &gt;= 364\nGROUP BY 1,2,3,4;\n\nSTEP 3 - create or replace table EDM_BIZOPS_PRD.MERCHAPPS.STORE_PS_ITEM_SALES_COMBINED_T as\nSELECT zz.store_id as store_id\n,             zz.rog_id\n,             zz.DEPT_SECTION_ID as dept_section_id\n,             zz.upc_NBR as upc_NBR\n,             zz.Item_dsc\n,             zz.Fixture_Id\n,             zz.HORIZONTAL_CNT\n,             zz.VERTICAL_CNT\n--              ,             zz.bay_shelf_nbr\n,             zz.STORE_SCHEMATIC_EFFECTIVE_START_DT\n,             zz.STORE_SCHEMATIC_EFFECTIVE_END_DT\n--,             zz.large_pet_supply_3\n,             zz.large_pet_supply_20\n,             zz.spice_pack_ind\n,             case when s.avg_week_item_qty is null then 0 else s.avg_week_item_qty end as avg_week_item_qty\n,             CASE WHEN     s.avg_week_item_qty is null then 'Y'\nWHEN     s.avg_week_item_qty &lt; 1 THEN 'Y' ELSE 'N' END AS slow_moving_ind\n--              ,             CASE WHEN zz.bay_shelf_nbr = 1 AND zz.max_bay_shelf_nbr &lt;&gt; 1 THEN 'Y' ELSE 'N' END AS low_shelf_ind\n--              ,             CASE WHEN zz.bay_shelf_nbr = zz.max_bay_shelf_nbr AND zz.bay_shelf_nbr &lt;&gt; 1 THEN 'Y' ELSE 'N' END AS hi_shelf_ind    \n,             CASE --   WHEN zz.Item_dsc LIKE 'BANQ%MEGA%' THEN 1\n--   WHEN zz.Item_dsc LIKE 'BANQ%' THEN 2\n--   WHEN zz.Item_dsc LIKE 'MICHELINA%BOWL%' THEN 3\n--   WHEN zz.Item_dsc LIKE 'MICHELINA%' THEN 4\n--   WHEN CAST(zz.corporate_item_cd AS VARCHAR(9)) LIKE '4805%' THEN 5\n--   WHEN (zz.Item_dsc LIKE 'DANNON%') AND (((zz.HORIZONTAL_CNT * zz.VERTICAL_CNT) + zz.HORIZONTAL_CNT)&gt;10) THEN 6\n--   WHEN (zz.Item_dsc LIKE 'EL MONT%') AND (zz.size_qty BETWEEN 4 AND 5) AND (zz.size_uom_cd LIKE 'OZ') THEN 7\n--   WHEN (zz.Item_dsc LIKE 'JOSE OLE%') AND (zz.size_qty BETWEEN 4 AND 5) AND (zz.size_uom_cd LIKE 'OZ') THEN 8\n--   WHEN (zz.Item_dsc LIKE 'REDS%') AND (zz.size_qty BETWEEN 4 AND 5) AND (zz.size_uom_cd LIKE 'OZ') THEN 9\n--   WHEN (zz.Item_dsc LIKE 'TINAS%') AND (zz.size_qty BETWEEN 4 AND 5) AND (zz.size_uom_cd LIKE 'OZ') THEN 10\n--   WHEN CAST(zz.corporate_item_cd AS VARCHAR(9)) LIKE '4310%'  AND (((zz.HORIZONTAL_CNT * zz.VERTICAL_CNT) + zz.HORIZONTAL_CNT) &gt; 8) THEN 11\n--   WHEN (CAST(zz.corporate_item_cd AS VARCHAR(9)) LIKE '47%')\n--AND NOT\n--(zz.Item_dsc LIKE 'GREEN GIANT%'\n--OR zz.Item_dsc LIKE 'GG%'\n--OR zz.Item_dsc LIKE 'BIRDS EYE%'\n--OR zz.Item_dsc LIKE 'BE %'\n--OR zz.Item_dsc LIKE 'BESF %'\n--OR zz.Item_dsc LIKE 'PICTSWEET%'\n--OR zz.Item_dsc LIKE 'PICST%'\n--OR zz.Item_dsc LIKE 'PCTS%'\n--OR zz.Item_dsc LIKE 'PIC %'\n--OR zz.Item_dsc LIKE '%POT%'\n--OR zz.Item_dsc LIKE '%TOT%'\n--OR zz.Item_dsc LIKE '%HASH%'\n--OR zz.Item_dsc LIKE '%FRIES%'\n--OR zz.Item_dsc LIKE 'ORE IDA%')\n--AND (zz.VERTICAL_CNT::integer BETWEEN 1 AND 2) THEN 12                                \nWHEN (try_to_number(zz.DEPT_SECTION_ID) = 325) AND (zz.size_qty BETWEEN 0.75 AND 1) AND (zz.size_uom_cd LIKE 'OZ') THEN 13\n--WHEN (zz.Item_dsc LIKE '%ROLLS%') AND (((zz.HORIZONTAL_CNT * zz.VERTICAL_CNT) + zz.HORIZONTAL_CNT) &gt;= 32) THEN 14\n--WHEN (zz.Item_dsc LIKE '%HUNGRY MAN%' OR zz.Item_dsc LIKE 'HM%') AND (zz.VERTICAL_CNT &gt; 1) THEN 15\nELSE NULL END AS special_item_cd\n\nFROM\n\n--######################################## \nEDM_BIZOPS_PRD.MERCHAPPS.store_ps_item_store_planogram_T zz\n--######################################## \n\n\n//JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE a\n//ON a.retail_store_facility_nbr = zz.store_id and a.division_id &lt;&gt; 'N/A' and zz.DEPT_SECTION_ID &lt;&gt; 'N/A' and zz.rog_id &lt;&gt; 'N/A' and zz.upc_NBR &lt;&gt; 'N/A' and zz.Item_dsc &lt;&gt; 'N/A' and  zz.store_id &lt;&gt; 'N/A'\n//JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC u\n//ON u.upc_NBR = zz.upc_NBR and u.CORPORATE_ITEM_CD &gt; 0 LEFT JOIN\n\n--########################################         \n(select * from EDM_BIZOPS_PRD.MERCHAPPS.store_ps_sales_by_item_store_t where AVG_WEEK_ITEM_QTY &gt; 0 and UPC_NBR &gt;0 and STORE_UPC &lt;&gt;'N/A' and STORE_ID &lt;&gt;'N/A')s\n--######################################## \n\nON zz.store_upc = s.store_upc\n\n-- where s.store_upc &lt;&gt; 'N/A' and s.store_id &lt;&gt; 'N/A' and s.avg_week_item_qty  &lt;&gt; 'N/A'\n\n\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n\nSTEP 4 -\ncreate or replace table EDM_BIZOPS_PRD.MERCHAPPS.STORE_PS_CUSTOM_PS_BY_REQUEST_T as\nSELECT\na.STORE_ID as store_id,\na.division_id as parent_op_area_cd,\nu.DEPT_SECTION_ID as dept_section_id,\nu.CATEGORY_ID as category_id,\n'2020-01-01' AS start_date,\n'2020-01-01' AS end_date,\nu.CSC_ID as csc_id,\nu.CORP_ITEM_CD as corp_item_cd,\nu.upc_id as upc_id,\nu.UPC_DSC as upc_dsc,\nff.ps_value\nFROM\n(select * from (\nSELECT\na.STORE_ID as STORE_ID,\nf.upc_id,\nf.ps_value\nFROM\nEDM_BIZOPS_PRD.SUPPLY_CHAIN.FAR_PS_CUSTOM_VALUES_MERGE_FINAL f\nJOIN EDM_BIZOPS_PRD.MERCHAPPS.LU_STORE a ON try_to_number(a.DIVISION_ID) = f.parent_op_area_cd and a.division_id &gt;0 and f.parent_op_area_cd &gt;0\nWHERE f.store_id IS NULL AND current_date BETWEEN f.first_eff_dt AND f.last_eff_dt\nGROUP BY 1,2,3\nUNION ALL\nSELECT\nf.store_id,\nf.upc_id,\nf.ps_value\nFROM\nEDM_BIZOPS_PRD.SUPPLY_CHAIN.FAR_PS_CUSTOM_VALUES_MERGE_FINAL f\nWHERE f.store_id IS NOT NULL AND current_date BETWEEN f.first_eff_dt AND f.last_eff_dt and f.store_id &gt;0\nGROUP BY 1,2,3) where STORE_ID &gt; 0 and upc_id &gt; 0 and (ps_value=0 or ps_value&gt;0)\n) ff\nJOIN EDM_BIZOPS_PRD.MERCHAPPS.ZHU_VERSION_LU_UPC u ON u.upc_id = ff.upc_id and u.CORP_ITEM_CD &gt; 0\nJOIN EDM_BIZOPS_PRD.MERCHAPPS.LU_STORE a ON a.STORE_ID = ff.STORE_ID and a.division_id &lt;&gt; 'N/A'\nWHERE 1 = 1\n--This is the third spot for filtering\n--AND a.Retail_Store_Facility_Nbr in ('0767')\n--AND a.Parent_Operating_Area_Cd IN (33)\n--AND u.retail_department_id IN (317)\n--AND U.corporate_item_cd IN (65150011)\n--AND u.retail_department_id IN (317,314,323,324,325)\n--AND u.upc_nbr IN (2113045724)                                                                         \n-- End filter area\nGROUP BY  1,2,3,4,5,6,7,8,9,10,11\n\nSTEP 5 -\ncreate or replace table EDM_BIZOPS_PRD.MERCHAPPS.STORE_PS_CHECKSTAND_CANDY_T as SELECT a.Retail_Store_Facility_Nbr store_id, a.Parent_Operating_Area_Cd  as parent_op_area_cd, u.section_cd as dept_section_id, u.smic_category_id  as category_id, to_date('2020-01-01') AS start_date_dummy, to_date('2020-02-01') AS end_date_dummy, u.CONSUMER_SELLING_CD as csc_id, u.corporate_item_cd as corp_item_cd, z.upc_nbr as upc_id, u.item_dsc as upc_dsc, z.total_ps FROM (\nSELECT facility_integration_id, upc_nbr,\nsum(total_ps) as total_ps\nfrom\n\n(\n(SELECT p.facility_integration_id, p.upc_nbr, p.ps_per_checkstand, r.register_count, sum(p.ps_per_checkstand * r.register_count) AS total_ps\n\nFROM (\nSELECT zz.facility_integration_id, zz.upc_nbr, CASE WHEN round(zz.avg_day_item_qty) &gt; 12 THEN 12 WHEN round(zz.avg_day_item_qty) &lt; 3 THEN 3 ELSE round(zz.avg_day_item_qty) END AS ps_per_checkstand FROM (\nSELECT s.facility_integration_id, s.upc_nbr, sum(s.item_qty) / 364 / count(DISTINCT s.facility_integration_id) AS avg_day_item_qty FROM edm_views_prd.dw_views.sales_aggregate_dy s JOIN (\nSELECT psf.facility_integration_id, psi.UPC_NBR, c.ship_unit_pack_qty as pack_whse_qty FROM edm_views_prd.dw_views.PLANOGRAM_STORE_FIXTURE psf JOIN edm_views_prd.dw_views.Planogram pog ON pog.Planogram_Id = psf.PLANOGRAM_ID AND pog.dw_logical_delete_ind = FALSE AND pog.dw_current_version_ind = True JOIN edm_views_prd.dw_views.PLANOGRAM_SLOT_ITEM psi ON psi.PLANOGRAM_ID = pog.Planogram_Id AND psi.dw_logical_delete_ind = FALSE AND psi.dw_current_version_ind = True JOIN edm_views_prd.dw_views.d1_upc u ON u.upc_nbr = psi.UPC_NBR and u.CORPORATE_ITEM_CD &gt; 0\nJOIN edm_views_prd.dw_views.corporate_item c ON c.CORPORATE_ITEM_INTEGRATION_ID = u.CORPORATE_ITEM_INTEGRATION_ID AND c.corporation_id = 1 AND c.DW_CURRENT_VERSION_IND = TRUE AND c.DW_LOGICAL_DELETE_IND = FALSE WHERE current_date BETWEEN psf.STORE_SCHEMATIC_EFFECTIVE_START_DT - 14 AND psf.STORE_SCHEMATIC_EFFECTIVE_END_DT - 14 AND pog.Stocking_Section_Nbr in (101, 103, 107, 140, 141, 142, 143, 959, 962, 990, 991) AND psf.DW_CURRENT_VERSION_IND = TRUE AND psf.DW_LOGICAL_DELETE_IND = FALSE GROUP BY 1,2,3\n) z ON s.facility_integration_id = z.facility_integration_id AND s.upc_nbr = z.upc_nbr WHERE s.transaction_dt BETWEEN current_date - 365 AND current_date - 1 GROUP BY 1,2\n) zz\n) p JOIN (\nSELECT z.facility_integration_id, count(z.register_nbr) AS register_count FROM (\nSELECT a.facility_integration_id, th.register_nbr, sum(th.net_amt) AS sum_net_amt FROM edm_views_prd.dw_edw_views.txn_hdr th JOIN edm_views_prd.dw_views.D1_RETAIL_STORE a ON try_to_number(a.Retail_Store_Facility_Nbr) = th.store_id and a.division_id &lt;&gt; 'N/A'\nWHERE th.txn_dte &gt;= current_date - 21 AND ((th.register_nbr BETWEEN 1 AND 15) OR (th.register_nbr BETWEEN 116 AND 125)) GROUP BY 1,2\n) z WHERE z.sum_net_amt &gt; 100 GROUP BY 1\n) r ON r.facility_integration_id = p.facility_integration_id GROUP BY 1,2,3,4)\n\n\nunion all\n\n\n(SELECT p.facility_integration_id, p.upc_nbr, p.ps_per_checkstand as ps_per_checkstand_2, r.register_count as register_count_2, sum(p.ps_per_checkstand * r.register_count) AS total_ps\n\nFROM (\nSELECT zz.facility_integration_id, zz.upc_nbr, CASE WHEN round(zz.avg_day_item_qty) &gt; 12 THEN 12 WHEN round(zz.avg_day_item_qty) &lt; 3 THEN 3 ELSE round(zz.avg_day_item_qty) END AS ps_per_checkstand FROM (\nSELECT s.facility_integration_id, s.upc_nbr, sum(s.item_qty) / 364 / count(DISTINCT s.facility_integration_id) AS avg_day_item_qty FROM edm_views_prd.dw_views.sales_aggregate_dy s JOIN (\nSELECT psf.facility_integration_id, psi.UPC_NBR, c.ship_unit_pack_qty as pack_whse_qty FROM edm_views_prd.dw_views.PLANOGRAM_STORE_FIXTURE psf JOIN edm_views_prd.dw_views.Planogram pog ON pog.Planogram_Id = psf.PLANOGRAM_ID AND pog.dw_logical_delete_ind = FALSE AND pog.dw_current_version_ind = True JOIN edm_views_prd.dw_views.PLANOGRAM_SLOT_ITEM psi ON psi.PLANOGRAM_ID = pog.Planogram_Id AND psi.dw_logical_delete_ind = FALSE AND psi.dw_current_version_ind = True JOIN edm_views_prd.dw_views.d1_upc u ON u.upc_nbr = psi.UPC_NBR and u.CORPORATE_ITEM_CD &gt; 0\nJOIN edm_views_prd.dw_views.corporate_item c ON c.CORPORATE_ITEM_INTEGRATION_ID = u.CORPORATE_ITEM_INTEGRATION_ID AND c.corporation_id = 1 AND c.DW_CURRENT_VERSION_IND = TRUE AND c.DW_LOGICAL_DELETE_IND = FALSE WHERE current_date BETWEEN psf.STORE_SCHEMATIC_EFFECTIVE_START_DT - 14 AND psf.STORE_SCHEMATIC_EFFECTIVE_END_DT - 14 AND pog.Stocking_Section_Nbr in (9235,9234,9233,9232,9231,9230,9229,9228,9227,9226,9225,9224,9223,9222,9221,9220,9219,9218,9217,9216,9215,9300,9299,9298,9297,9296,9295,9294,9293,9292,9291,9290,9289,9288,9287,9286,9285,9284,9283,9282,9281,9280\n) AND psf.DW_CURRENT_VERSION_IND = TRUE AND psf.DW_LOGICAL_DELETE_IND = FALSE GROUP BY 1,2,3\n) z ON s.facility_integration_id = z.facility_integration_id AND s.upc_nbr = z.upc_nbr WHERE s.transaction_dt BETWEEN current_date - 365 AND current_date - 1 GROUP BY 1,2\n) zz\n) p JOIN (\nSELECT z.facility_integration_id, count(z.register_nbr) AS register_count FROM (\nSELECT a.facility_integration_id, th.register_nbr, sum(th.net_amt) AS sum_net_amt FROM edm_views_prd.dw_edw_views.txn_hdr th JOIN edm_views_prd.dw_views.D1_RETAIL_STORE a ON try_to_number(a.Retail_Store_Facility_Nbr) = th.store_id and a.division_id &lt;&gt; 'N/A'\nWHERE th.txn_dte &gt;= current_date - 21 AND ((th.register_nbr in (16,17,18,19,20,49,50,51,52,53,54,93,94,95,96,97,98,106,107,108,109,135,136,137,138,139,175,176,177,178,179,180,181,182))) GROUP BY 1,2\n) z WHERE z.sum_net_amt &gt; 100 GROUP BY 1\n) r ON r.facility_integration_id = p.facility_integration_id GROUP BY 1,2,3,4))\n\ngroup by 1,2)z\n\nJOIN edm_views_prd.dw_views.d1_upc u ON u.upc_nbr = z.upc_nbr JOIN EDM_SANDBOX_PRD.MERCHAPPS.D1_RETAIL_STORE a ON a.facility_integration_id = z.facility_integration_id and a.division_id &lt;&gt; 'N/A'\n\nSTEP 6 -\ncreate or replace table EDM_BIZOPS_PRD.MERCHAPPS.store_ps_final_step_2_t as SELECT zzz.store_id, zzz.parent_op_area_cd, zzz.dept_section_id, zzz.category_id, zzz.class_id, to_date('2020-01-01') AS start_date_dummy, to_date('2020-02-01') AS end_date_dummy, zzz.csc_id, zzz.corp_item_cd, zzz.upc_id, zzz.upc_dsc, zzz.special_item_cd, zzz.fast_ind, CASE WHEN zzz.dept_section_id = '317' AND zzz.parent_op_area_cd IN ('17', '19', '24', '27', '34') AND min(zzz.ps_value) &lt; 4 THEN 4 WHEN zzz.dept_section_id = '317' AND zzz.class_id IN (440185, 440101, 471510, 473505, 470505, 470105, 473515, 471505, 449000, 470500, 470100, 471000, 480400, 440100, 440500, 473500, 471500, 470501, 473501, 470101, 473510, 471001) AND min(zzz.ps_value) &lt; 4 THEN 4 WHEN zzz.category_id in (2160) and zzz.parent_op_area_cd in (34) THEN CEIL (min(zzz.ps_value) * 1.5)\nELSE min(zzz.ps_value) END AS ps_value --****************************************** below is to get upc and op area\nFROM (\nSELECT ff.store_id, a.Parent_Operating_Area_Cd as parent_op_area_cd, ff.dept_section_id, u.smic_category_id as category_id, u.SMIC_CLASS_ID as class_id, ff.pog_fxtr_start_dt, ff.pog_fxtr_end_dt, u.CONSUMER_SELLING_CD as csc_id, u.corporate_item_cd as corp_item_cd, ff.upc_id, ff.upc_dsc, ff.special_item_cd, ff.fast_ind, min(ff.ps_value) AS ps_value --****************************************** above is to get upc and op area \nFROM (\nSELECT f.store_id, f.dept_section_id, f.upc_nbr as upc_id, f.item_dsc as upc_dsc, f.Fixture_Id as fxtr_cd, f.HORIZONTAL_CNT as hrzntl_face_cnt, f.VERTICAL_CNT as vrtcl_face_cnt, f.STORE_SCHEMATIC_EFFECTIVE_START_DT as pog_fxtr_start_dt, f.STORE_SCHEMATIC_EFFECTIVE_END_DT pog_fxtr_end_dt, --        f.large_pet_supply_3, \nf.large_pet_supply_20, f.spice_pack_ind, f.slow_moving_ind, f.special_item_cd, CASE WHEN (jk.upc_id IS NOT NULL) THEN f.HORIZONTAL_CNT + 1 -- change to all div,jewel kehe\n--  WHEN (jk.upc_id IS NOT NULL) and a.Parent_Operating_Area_Cd in ('25') THEN f.HORIZONTAL_CNT -- Norcal Kehe\n\nWHEN f.special_item_cd IN (13) THEN 24 WHEN f.slow_moving_ind = 'Y' and f.dept_section_id IN ('311', '312') THEN f.HORIZONTAL_CNT ----------APPLY ONLY TO f.dept_section_id IN (311,312)---------\n-- WHEN f.large_pet_supply_20 = 'Y' THEN 2  removed per Kinzie on 2/7\n-- WHEN f.large_pet_supply_3 = 'Y' THEN f.HORIZONTAL_CNT \n\nWHEN f.spice_pack_ind = 'Y' and c.size_uom_cd = 'OZ' and c.size_qty &lt;= 3 THEN f.HORIZONTAL_CNT * 12 WHEN f.spice_pack_ind = 'Y' and c.size_uom_cd = 'OZ' and c.size_qty &gt; 3 THEN (f.HORIZONTAL_CNT * f.VERTICAL_CNT) + f.HORIZONTAL_CNT\nWHEN (u.smic_category_id = 3210 and a.Parent_Operating_Area_Cd = 34) THEN (f.HORIZONTAL_CNT * f.VERTICAL_CNT) + f.HORIZONTAL_CNT\nWHEN (f.dept_section_id IN ('311', '312')) THEN f.HORIZONTAL_CNT ---****----APPLY TO a.Parent_Operating_Area_Cd IN (32), AND REMOVE SECTION 322 /changed to include all div 1/16/23 ---***--------\n-- WHEN f.dept_section_id IN ('317') and a.Parent_Operating_Area_Cd IN ('30') and f.store_id not in ('0339','1509','1708','3197') THEN CEIL (((f.HORIZONTAL_CNT * f.VERTICAL_CNT) + f.HORIZONTAL_CNT) * 1.5)\nWHEN f.rog_id = 'SACG' AND u.smic_category_id IN (8855, 8856, 8857, 8858, 8859, 8863) AND f.avg_week_item_qty &gt;= 7 THEN ((f.HORIZONTAL_CNT * f.VERTICAL_CNT) + f.VERTICAL_CNT) * 2 WHEN (u.smic_category_id = 3110) THEN f.HORIZONTAL_CNT WHEN (u.smic_category_id = 1005 AND c.size_uom_cd = 'LB' and c.size_qty &gt; 5) THEN f.HORIZONTAL_CNT WHEN (u.SMIC_CLASS_ID = 80105 AND a.Parent_Operating_Area_Cd in (17, 32)) THEN f.HORIZONTAL_CNT --12pk can soda FOR Jewel/SW\nWHEN (u.SMIC_SUB_SUB_CLASS_ID = 34100100 AND a.Parent_Operating_Area_Cd = '32') THEN f.HORIZONTAL_CNT --Firelogs FOR Jewel\nWHEN (u.smic_category_id = 3430 AND a.Parent_Operating_Area_Cd = '32') THEN f.HORIZONTAL_CNT --bulk road salt FOR Jewel\nWHEN (u.smic_category_id = 6515 or u.smic_category_id = 6520) then f.HORIZONTAL_CNT * f.VERTICAL_CNT\nWHEN (u.smic_category_id = 1901 and c.size_uom_cd in ('CT', 'EA') and c.size_qty &gt;= 32) THEN f.HORIZONTAL_CNT * f.VERTICAL_CNT\nWHEN (u.smic_category_id = 3401 AND c.size_uom_cd = 'LB' AND a.Parent_Operating_Area_Cd in ('30', '32')) THEN f.HORIZONTAL_CNT --charcoal FOR Jewel\nWHEN (u.SMIC_CLASS_ID = 329505  AND c.size_uom_cd = 'LB' AND a.Parent_Operating_Area_Cd IN ('25', '32')) THEN f.HORIZONTAL_CNT --bird seed FOR Jewel\nWHEN (f.dept_section_id in ('303', '308') and a.parent_operating_area_cd in ('27', '25')) THEN f.HORIZONTAL_CNT * 2\nWHEN (f.dept_section_id = '327' AND u.smic_category_id = 3206 AND c.size_uom_cd = 'OZ' AND c.size_qty &gt;= 132) THEN f.HORIZONTAL_CNT\nWHEN (f.dept_section_id in ('327', '335') AND c.size_uom_cd = 'LB' and c.size_qty &gt; 4) THEN f.HORIZONTAL_CNT  -- added on 1/16 to apply &gt; 4lbs for charcoal / pet food / bird seed\nWHEN (u.SMIC_SUB_SUB_CLASS_ID = 8152005 AND a.Parent_Operating_Area_Cd = '17') THEN f.HORIZONTAL_CNT --Seltzer FOR SW  \nELSE (f.HORIZONTAL_CNT * f.VERTICAL_CNT) + f.HORIZONTAL_CNT END AS ps_value, CASE WHEN f.rog_id = 'SACG' AND u.smic_category_id IN (8855, 8856, 8857, 8858, 8859, 8863) AND f.avg_week_item_qty &gt;= 7 THEN 'Y' ELSE NULL END AS fast_ind FROM --######################################## \nEDM_BIZOPS_PRD.MERCHAPPS.store_ps_item_sales_combined_t f -- this is the combination of item and sales to determine slow moving items\n--######################################## \nJOIN EDM_SANDBOX_PRD.MERCHAPPS.D1_RETAIL_STORE a ON a.Retail_Store_Facility_Nbr = f.store_id JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC u ON u.upc_nbr = f.upc_nbr  and u.CORPORATE_ITEM_CD &gt; 0\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.corporate_item c ON c.corporate_item_integration_id = u.corporate_item_integration_id AND c.DW_CURRENT_VERSION_IND = TRUE AND c.DW_LOGICAL_DELETE_IND = FALSE LEFT JOIN (\nSELECT\nRETAIL_STORE.RETAIL_STORE_FACILITY_NBR as store_id,\nDTL.UPC_NBR as upc_id\nFROM\nEDM_VIEWS_PRD.DW_VIEWS.RECEIVE_DELIVERY_INVOICE_HEADER_DSD HDR\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RECEIVE_DELIVERY_INVOICE_DETAIL_DSD DTL\nON HDR.FACILITY_INTEGRATION_ID = DTL.FACILITY_INTEGRATION_ID\nAND HDR.VENDOR_ID = DTL.VENDOR_ID\nAND HDR.BACKDOOR_VENDOR_SUB_ACCOUNT_ID = DTL.BACKDOOR_VENDOR_SUB_ACCOUNT_ID\nAND HDR.LOAD_DT = DTL.LOAD_DT --AND HDR.INVOICE_TYPE_CD = DTL.INVOICE_TYPE_CD\nAND HDR.VENDOR_INVOICE_NBR = DTL.VENDOR_INVOICE_NBR\nINNER JOIN EDM_SANDBOX_PRD.MERCHAPPS.D1_RETAIL_STORE RETAIL_STORE\nON RETAIL_STORE.FACILITY_INTEGRATION_ID = HDR.FACILITY_INTEGRATION_ID\nAND RETAIL_STORE.DW_LOGICAL_DELETE_IND = FALSE\n--AND RETAIL_STORE.DW_CURRENT_VERSION_IND = TRUE\nWHERE 1 = 1\nAND HDR.DW_LOGICAL_DELETE_IND = FALSE\nAND HDR.DW_CURRENT_VERSION_IND = TRUE\nAND DTL.DW_LOGICAL_DELETE_IND = FALSE\nAND DTL.DW_CURRENT_VERSION_IND = TRUE\n-- AND RETAIL_STORE.division_id = '32'\nAND HDR.RECEIVE_DT &gt; current_Date - 364\nAND HDR.VENDOR_ID in ('006446', '025017')\nGROUP BY 1,2) jk\nON jk.upc_id = f.upc_nbr and jk.store_id = f.store_id) ff\n--****************************************** below is to get upc and op area\nJOIN EDM_SANDBOX_PRD.MERCHAPPS.D1_RETAIL_STORE a ON a.Retail_Store_Facility_Nbr = ff.store_id and a.division_id &lt;&gt; 'N/A'\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC u ON u.upc_nbr = ff.upc_id AND u.corporation_id = 1 AND u.corporate_item_cd &gt; 0 GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13) zzz GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13\n\nSTEP 7 -\ncreate or replace table EDM_BIZOPS_PRD.MERCHAPPS.store_ps_logic_new_table as SELECT CASE WHEN f.store_id IS NULL THEN p.store_id ELSE f.store_id END AS store_id, CASE WHEN f.store_id IS NULL THEN p.parent_op_area_cd ELSE f.parent_op_area_cd END AS parent_op_area_cd, CASE WHEN f.store_id IS NULL THEN p.dept_section_id ELSE f.dept_section_id END AS dept_section_id, CASE WHEN f.store_id IS NULL THEN p.category_id ELSE f.category_id END AS category_id, CASE WHEN f.store_id IS NULL THEN p.start_date_dummy ELSE f.start_date END AS start_date_dummy, CASE WHEN f.store_id IS NULL THEN p.end_date_dummy ELSE f.end_date END AS end_date_dummy, CASE WHEN f.store_id IS NULL THEN p.csc_id ELSE f.csc_id END AS csc_id, CASE WHEN f.store_id IS NULL THEN p.corp_item_cd ELSE f.corp_item_cd END AS corp_item_cd, CASE WHEN f.store_id IS NULL THEN p.upc_id ELSE f.upc_id END AS upc_id, CASE WHEN f.store_id IS NULL THEN p.upc_dsc ELSE f.upc_dsc END AS upc_dsc, CASE WHEN (p.store_id = 3493 and p.ps_value &lt; 2) THEN 2\nWHEN candy.store_id IS NOT NULL THEN candy.total_ps\nWHEN (f.store_id IS NOT NULL or f.parent_op_area_cd IS NOT NULL ) THEN f.ps_value WHEN (p.store_id = 3493 and p.ps_value &lt; 2) THEN 2\nELSE p.ps_value END AS ps_value, --CASE WHEN f.store_id IS NOT NULL THEN f.ps_value WHEN candy.store_id IS NOT NULL THEN candy.total_ps WHEN f.parent_op_area_cd IS NOT NULL THEN f.ps_value ELSE p.ps_value END AS ps_value, \nCASE WHEN f.store_id IS NULL THEN NULL ELSE 'Y' END AS custom_ps_ind FROM --######################################## \n(select * from EDM_BIZOPS_PRD.MERCHAPPS.store_ps_final_step_2_t where parent_op_area_cd &gt;0 and store_id &lt;&gt; 'N/A' and parent_op_area_cd &lt;&gt; 'N/A') p --######################################## \n\nFULL OUTER JOIN --######################################## \n(select * from EDM_BIZOPS_PRD.MERCHAPPS.store_ps_custom_ps_by_request_t where (ps_value &gt;0 or ps_value=0) and store_id &gt;0 ) f --########################################\n\nON f.store_id  || '-' || f.upc_id = p.store_id || '-' || p.upc_id and f.ps_value &gt; 0 and  f.store_id &gt; 0 and  f.upc_id &gt; 0\n\nLEFT JOIN --######################################## \n(select * from EDM_BIZOPS_PRD.MERCHAPPS.store_ps_checkstand_candy_t where (total_ps=0 or total_ps&gt;0)) candy\n--########################################  \n\nON p.store_id  || '-' || p.upc_id = candy.store_id || '-' || candy.upc_id and total_ps &gt; 0\n\nSTEP 8 -\ncreate or replace table EDM_BIZOPS_PRD.SUPPLY_CHAIN.store_ps_logic_new_table as select * from EDM_BIZOPS_PRD.MERCHAPPS.store_ps_logic_new_table\n</code></pre>"},{"location":"operation_sql/#store-inventory-audit","title":"Store inventory audit","text":"<pre><code>select store_id, inventory_dt as last_count_dt, try_cast(inv.primary_item_id as decimal(14,0)) as upc_id, sum(unit_cnt) as last_count from edm_views_prd.dw_edw_views.ri_ranking inv where store_id = 391 and inventory_dt = (select distinct inventory_dt from edm_views_prd.dw_edw_views.ri_ranking where store_id = 391 and inventory_dt &lt; (select to_date(min(count_ts)) from  EDM_SANDBOX_PRD.ROPS.PIGAP_SALES_ADJ a\njoin (select store_id, upc_id, max(last_update_ts) as last_update_ts from EDM_SANDBOX_PRD.ROPS.PIGAP_SALES_ADJ group by 1,2)b\non a.store_id=b.store_id and a.upc_id = b.upc_id and a.last_update_ts = b.last_update_ts\nwhere a.store_id = 391) order by inventory_dt desc limit 1)\ngroup by 1,2,3\n</code></pre>"},{"location":"operation_sql/#store-inventory-current","title":"store inventory - current","text":"<pre><code>select csc.U_CONSUMER_SELLING_CD as csc, a.corp_item_cd, a.store_id, cic.upc_nbr as upc_id, cic.shelf_unit_pack_dsc as pack,cic.shelf_unit_size_dsc as size, upc.INTERNET_ITEM_DSC,\na.PI_ADJ_QTY as starting_pi,a.FILE_TS as starting_pi_ts, inv_count, count_ts, tag.DEPT_SECTION_ID as retail_sect, -- tag.AISLE_NBR, tag.SECT_NBR, tag.SHELF_CD,\nsum(item_qty) as sold_since_check, inv_count-sum(item_qty) as current_pi, case when sum(item_qty) is null then inv_count else inv_count-sum(item_qty) end as updated_adj_pi\n\nfrom EDM_SANDBOX_PRD.ROPS.PIGAP_BEG_INV a join (select store_id, max(FILE_TS) as FILE_TS from EDM_SANDBOX_PRD.ROPS.PIGAP_BEG_INV group by 1)b\non a.store_id = b.store_id and a.FILE_TS = b.FILE_TS\njoin EDM_BIZOPS_PRD.MERCHAPPS.CIC_UPC_ROG cic on cic.corporate_item_cd=a.corp_item_cd and cic.primary_upc_ind = 'Y' join EDM_BIZOPS_PRD.MERCHAPPS.LU_STORE s on s.store_id = a.store_id and s.rog_cd = cic.rog_id\njoin EDM_BIZOPS_PRD.MERCHAPPS.ZHU_VERSION_LU_UPC upc on upc.upc_id = cic.upc_nbr\nand a.store_id = 391 and upc.upc_id = 980080005\n\nleft join (select a.store_id, a.upc_id, count_ts as count_ts, adj_qty as inv_count from  EDM_SANDBOX_PRD.ROPS.PIGAP_SALES_ADJ a\njoin (select store_id, upc_id, max(last_update_ts) as last_update_ts from EDM_SANDBOX_PRD.ROPS.PIGAP_SALES_ADJ group by 1,2)b\non a.store_id=b.store_id and a.upc_id = b.upc_id and a.last_update_ts = b.last_update_ts\nwhere a.store_id = 391  group by 1,2,3,4)c on a.store_id = c.store_id and cic.upc_nbr = c.upc_id\n\nleft join (select facility_nbr::integer as store_id, upc_nbr as upc_id, txn.transaction_ts, item_qty from edm_views_prd.dw_views.transaction_hdr txn\nINNER JOIN edm_views_prd.dw_views.transaction_item sales\nON sales.transaction_hdr_integration_id = txn.transaction_hdr_integration_id\nand txn.TRANSACTION_DT = (\nselect to_date(min(count_ts)) from  EDM_SANDBOX_PRD.ROPS.PIGAP_SALES_ADJ a\njoin (select store_id, upc_id, max(last_update_ts) as last_update_ts from EDM_SANDBOX_PRD.ROPS.PIGAP_SALES_ADJ group by 1,2)b\non a.store_id=b.store_id and a.upc_id = b.upc_id and a.last_update_ts = b.last_update_ts\nwhere a.store_id = 391 and upc_nbr = 980080005\n)\nand facility_nbr::integer = 391\n) m\non m.store_id = a.store_id and m.upc_id=upc.upc_id and m.transaction_ts &gt; count_ts\n\nleft join (select corp_item_cd, upc_id, store_id, dept_section_id from EDM_BIZOPS_PRD.MERCH_ITEM.TAG_SUBSCRIPTION group by 1,2,3,4) tag on tag.corp_item_cd = cic.corp_item_cd and tag.upc_id = cic.upc_nbr and tag.store_id = a.store_id\n\nleft join EDM_BIZOPS_PRD.merchapps.csc_upc_cic_view csc on csc.corporate_item_cd = cic.corp_item_cd and csc.upc_nbr = cic.upc_nbr\nwhere PI_ADJ_QTY &gt; 0\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12\n</code></pre>"},{"location":"pricing_execution/","title":"Pricing Execution","text":""},{"location":"pricing_execution/#step-1","title":"Step 1:","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_alw_hdr_dtl_all;\n</code></pre>"},{"location":"pricing_execution/#step-2","title":"Step 2:","text":"<pre><code>CREATE or replace  TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_alw_hdr_dtl_all (\ngenrt_cic_id DECIMAL(12,0),\ncorp_item_cd DECIMAL(8,0),\ngroup_id SMALLINT,\ncorp INTEGER,\ndivision INTEGER,\nwds_division CHAR(2)  COLLATE 'en-ci' ,\nfacility CHAR(4)  COLLATE 'en-ci' ,\nrog CHAR(4)  COLLATE 'en-ci' ,\noffer_number CHAR(8)  COLLATE 'en-ci' ,\nvend_num CHAR(6)  COLLATE 'en-ci' ,\nvend_sub_acnt CHAR(3)  COLLATE 'en-ci' ,\ncost_area SMALLINT,\narrival_from_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\narrival_to_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\ncalendar_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nallow_type CHAR(1)  COLLATE 'en-ci' ,\nallow_amt DECIMAL(11,4),\namt_in_cost DECIMAL(11,4),\nperform_1 CHAR(2)  COLLATE 'en-ci' ,\ndst_cntr CHAR(4)  COLLATE 'en-ci' ) COMMENT = '{\"multiset\": true}'\n</code></pre>"},{"location":"pricing_execution/#step-3","title":"Step 3:","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_alw_hdr_dtl_all\n(       genrt_cic_id\n,       corp_item_cd\n,       group_id\n,       corp\n,       division\n,       wds_division\n,       facility\n,       rog\n,       offer_number\n,       vend_num\n,       vend_sub_acnt\n,       cost_area\n,       arrival_from_date\n,       arrival_to_date\n,       calendar_date\n,       allow_type\n,       allow_amt\n,       amt_in_cost\n,       perform_1\n,       dst_cntr\n)\nSELECT DISTINCT\nvdd.CORPORATE_ITEM_INTEGRATION_ID\n,       cic.corporate_item_cd as corp_item_cd\n,       cic.smic_group_cd as Group_id\n,       1    AS corp\n,       rog.division_id     AS division\n,       vdh.Res_Division_Id  AS wds_division\n,       vdd.warehouse_id AS facility\n,       rog.rog_id          AS rog\n,       vdh.DEAL_OFFER_NBR AS offer_number\n,       vdh.vendor_id  AS vend_num\n,       vdh.VENDOR_SUB_ACCOUNT_ID AS vend_sub_acnt\n,       vdh.Vendor_Cost_Area AS cost_area\n,       vdh.SCHEDULE_ARRIVAL_START_DT  AS arrival_from_date\n,       vdh.SCHEDULE_ARRIVAL_END_DT  AS arrival_to_date\n-- ,       DATE '2021-07-01' AS calendar_date\n--Akash:27/03/2019 : added logic to select report date for respective divisions\n,       CASE\nWHEN (rog.division_id = '33' or rog.division_id = '34') THEN (current_date + \"\"\"+str(east_gap)+\"\"\")::DATE\nELSE (current_date + \"\"\"+str(reg_gap)+\"\"\")::DATE\nEND AS calendar_date\n,       vdd.Allowance_Type_Cd AS allow_type\n,       vdd.Flat_Allowance_Amt     ,       CASE\nWHEN vdd.Allowance_Type_Cd = 'C' THEN vdd.Flat_Allowance_Amt\nELSE 0\nEND AS amt_in_cost\n,       vdd.FLAT_ALLOWANACE_PIND_CD  AS perform_1\n,       COALESCE(whs.DISTRIBUTION_CENTER_ID, vdd.warehouse_id) AS dst_cntr\nFROM EDM_VIEWS_PRD.DW_VIEWS.VENDOR_DEAL_HEADER vdh\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.VENDOR_DEAL_DETAIL vdd\non    vdd.VENDOR_DEAL_HEADER_INTEGRATION_ID = vdh.VENDOR_DEAL_HEADER_INTEGRATION_ID\nAND     vdd.DW_CURRENT_VERSION_IND = TRUE AND     vdd.DW_LOGICAL_DELETE_IND = FALSE\nAND     vdh.DW_CURRENT_VERSION_IND = TRUE AND     vdh.DW_LOGICAL_DELETE_IND = FALSE  JOIN EDM_VIEWS_PRD.DW_VIEWS.Corporate_Item cic\nON   VDD.Corporate_item_integration_id   = CIC.Corporate_item_integration_id\nAND   cic.DW_CURRENT_VERSION_IND = TRUE AND     cic.DW_LOGICAL_DELETE_IND = FALSE\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.Supply_Chain_Item sci\nON   sci.warehouse_id = vdd.warehouse_id\nAND     sci.Corporate_item_integration_id = cic.Corporate_item_integration_id\nAND     sci.DW_CURRENT_VERSION_IND = TRUE AND     sci.DW_LOGICAL_DELETE_IND = false\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.Retail_Order_Group_Corporate_item rogci\nON      rogci.Ordering_Division_id = sci.division_id\nAND     rogci.warehouse_id = sci.warehouse_id\nAND     rogci.Corporate_item_integration_id = vdd.Corporate_item_integration_id\nAND     rogci.DW_CURRENT_VERSION_IND = TRUE AND     rogci.DW_LOGICAL_DELETE_IND = false\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP AS rog\nON      rog.rog_id = rogci.rog_id\nAND     rog.DW_CURRENT_VERSION_IND = TRUE AND     rog.DW_LOGICAL_DELETE_IND = false\nLEFT    OUTER JOIN EDM_VIEWS_PRD.DW_VIEWS.WAREHOUSE whs\nON      whs.warehouse_id = vdd.warehouse_id\nAND     whs.DW_CURRENT_VERSION_IND = TRUE AND     whs.DW_LOGICAL_DELETE_IND = false\n-- WHERE   DATE '2021-07-01' BETWEEN h.SCHEDULE_ARRIVAL_START_DT AND h.SCHEDULE_ARRIVAL_END_DT\n--Akash: 27/03/2019 : Replaced where clause with below lines\nWHERE   (CASE\nWHEN (rog.division_id = '33' or rog.division_id = '34') THEN (current_date + \"\"\"+str(east_gap)+\"\"\")::DATE\nELSE (current_date + \"\"\"+str(reg_gap)+\"\"\")::DATE\nEND) BETWEEN vdh.SCHEDULE_ARRIVAL_START_DT AND vdh.SCHEDULE_ARRIVAL_END_DT\nAND      vdd.active_ind &lt;&gt; 'I'\nAND     vdd.Flat_Allowance_Amt &gt; 0.01\nAND     vdd.Allowance_Reason_Cd = '0'\nAND     vdd.Allowance_Type_Cd &lt;&gt; 'A'\nAND     vdd.FLAT_ALLOWANACE_PIND_CD &lt;&gt; '30'\nAND     cic.Display_Item_Ind &lt;&gt; 'Y'\nAND     cic.item_status_cd NOT IN ('D', 'X')\n-- MAYANK (20190425) : commented below line for allowance in all the divisions\n-- AND     rog.division_id = '27'\nAND     cic.smic_group_cd IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,39,40,42,43,44,45,46,47,48,73,74,88,96,97,\n49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,75,76,77,78,79,80,89,84,70,71,81,82,85,86,94,95);\n</code></pre>"},{"location":"pricing_execution/#step-4","title":"Step 4:","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_alw_final;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-5","title":"Step 5:","text":"<pre><code>CREATE or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_alw_final (\ngroup_id SMALLINT,\ncorp_item_cd DECIMAL(8,0),\ncorp INTEGER,\nfacility CHAR(4)  COLLATE 'en-ci' ,\nvend_num CHAR(6)  COLLATE 'en-ci' ,\nvend_sub_acnt CHAR(3)  COLLATE 'en-ci' ,\ncost_area SMALLINT,\nrog CHAR(4)  COLLATE 'en-ci' ,\nprice_area_id INTEGER,\nalw_typ VARCHAR(1)  COLLATE 'en-ci' ,\narrival_from_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\narrival_to_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nallow_amt DECIMAL(11,4),\namt_in_cost DECIMAL(11,4),\noffer_number CHAR(8)  COLLATE 'en-ci' ) COMMENT = '{\"multiset\": true}' ;\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_MULTISET_OPTION - Remove MULTISET create table option\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n-- T_CREATE_TABLE_META - Add table metadata to table comment\n</code></pre>"},{"location":"pricing_execution/#step-6","title":"Step 6:","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_alw_final\n(       group_id\n,       corp_item_cd\n,       corp\n,       facility\n,       vend_num\n,       vend_sub_acnt\n,       cost_area\n,       rog\n,       price_area_id\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost\n,       offer_number\n)\nWith vendor_allow_hdr as\n(\nselect distinct\n1  as corporation_id,\nDEAL_OFFER_NBR as OFFER_NBR,\nROG.Division_Id as division_cd,\na.CURRENT_OFFER_IND\nFROM EDM_VIEWS_PRD.DW_VIEWS.VENDOR_DEAL_HEADER a\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP AS ROG ON ROG.ROG_ID = A.ROG_CD AND ROG.DW_CURRENT_VERSION_IND = TRUE AND ROG.DW_LOGICAL_DELETE_IND = FALSE\nWHERE   a.DW_CURRENT_VERSION_IND = TRUE\nAND     a.DW_LOGICAL_DELETE_IND = false ) ,\nstore_price_area as\n(\nSELECT DISTINCT\nRSPA.section_cd AS loc_retail_sect_id\n,RSPA.dw_first_effective_dt AS first_eff_dt\n,RSPA.dw_last_effective_dt AS last_eff_dt\n,RSPA.price_area_cd AS price_area_id\n, RSPA.FACILITY_INTEGRATION_ID\n, RT.FACILITY_NBR AS STORE_ID\n, RT.ROG_ID AS  ROG_ID\nFROM EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE_SECTION_PRICE_AREA AS RSPA\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE AS RT\nON RSPA.FACILITY_INTEGRATION_ID = RT.FACILITY_INTEGRATION_ID\nAND RT.DW_LOGICAL_DELETE_IND = FALSE\nAND RT.DW_CURRENT_VERSION_IND = TRUE\nAND RSPA.DW_LOGICAL_DELETE_IND = FALSE\nAND RSPA.DW_CURRENT_VERSION_IND = TRUE\n) ,\nLU_STORE AS\n(\nSelect Distinct\nF.Facility_nbr as store_id\n,F.CLOSE_DT as closed_dt\n,RT.rog_id\n,RT.CORPORATION_ID\nFROM EDM_VIEWS_PRD.DW_VIEWS.FACILITY AS F\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE AS RT\nON F.FACILITY_NBR = RT.FACILITY_NBR\nAND RT.DW_LOGICAL_DELETE_IND = FALSE\nAND RT.DW_CURRENT_VERSION_IND = TRUE\nAND F.DW_LOGICAL_DELETE_IND = FALSE\nAND F.DW_CURRENT_VERSION_IND = TRUE\n)\nSELECT  alw.group_id\n,       alw.corp_item_cd\n,       alw.corp\n,       alw.facility\n,       alw.vend_num\n,       alw.vend_sub_acnt\n,       alw.cost_area\n,       alw.rog\n,       spa.price_area_id\n,       CASE\nWHEN alw.allow_type = 'T' AND alw.perform_1 = '20' THEN 'R'\nELSE alw.allow_type\nEND AS alw_typ\n,       alw.arrival_from_date\n,       alw.arrival_to_date\n,       alw.allow_amt\n,       alw.amt_in_cost\n,       alw.offer_number\n\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.T_PE_ALW_HDR_DTL_ALL alw\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.VENDOR_COST_AREA_FACILITY vca\nON      vca.corporation_id    = alw.corp\nAND     vca.division_id       = alw.division\nAND     vca.vendor_id         = alw.vend_num\nAND     vca.VENDOR_SUB_ACCOUNT_ID = alw.vend_sub_acnt\nAND     vca.COST_AREA_CD       = alw.cost_area\nAND     vca.on_hold_ind &lt;&gt; 'H'  AND     vca.DW_CURRENT_VERSION_IND = TRUE\nAND     vca.DW_LOGICAL_DELETE_IND = FALSE\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.Authorized_Backdoor_Receiving_Item  dsd\nON      dsd.Corporate_item_integration_id = alw.genrt_cic_id\nAND     dsd.facility_integration_id = vca.facility_integration_id\nAND     dsd.vendor_id = alw.vend_num\nAND     dsd.Vendor_Sub_Account_Id = alw.vend_sub_acnt\nAND     alw.calendar_date BETWEEN dsd.Authorized_Item_Start_Dt AND dsd.Authorized_Item_End_Dt\nAND     dsd.DW_LOGICAL_DELETE_IND = FALSE\nAND     dsd.DW_CURRENT_VERSION_IND = TRUE\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE urx\nON      urx.rog_id = alw.rog\nAND     urx.Corporate_item_integration_id = alw.genrt_cic_id\nAND     alw.calendar_date BETWEEN urx.DW_FIRST_EFFECTIVE_DT AND urx.DW_LAST_EFFECTIVE_DT\nAND     urx.DW_LOGICAL_DELETE_IND = FALSE\nAND     urx.DW_CURRENT_VERSION_IND = TRUE\nINNER   JOIN store_price_area spa  ON      spa.rog_id = urx.rog_id\nAND     spa.loc_retail_sect_id = urx.retail_section_cd\nAND     spa.FACILITY_INTEGRATION_ID = vca.FACILITY_INTEGRATION_ID\nAND     alw.calendar_date BETWEEN spa.first_eff_dt AND spa.last_eff_dt\nLEFT    OUTER JOIN vendor_allow_hdr nah\nON      nah.offer_nbr = alw.offer_number\nAND     nah.division_cd = alw.division\nAND     nah.current_offer_ind = 'Y'\nWHERE   alw.cost_area &gt; 0\nGROUP   BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n\nUNION\n\nSELECT  alw.group_id\n,       alw.corp_item_cd\n,       alw.corp\n,       alw.facility\n,       alw.vend_num\n,       alw.vend_sub_acnt\n,       alw.cost_area\n,       alw.rog\n,       spa.price_area_id\n,       CASE\nWHEN alw.allow_type = 'T' AND alw.perform_1 = '20' THEN 'R'\nELSE alw.allow_type\nEND AS alw_typ\n,       alw.arrival_from_date\n,       alw.arrival_to_date\n,       alw.allow_amt\n,       alw.amt_in_cost\n,       alw.offer_number\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.T_PE_ALW_HDR_DTL_ALL alw\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE urx\nON      urx.rog_id = alw.rog\nAND     urx.Corporate_item_integration_id = alw.genrt_cic_id\nAND     alw.calendar_date BETWEEN urx.DW_FIRST_EFFECTIVE_DT AND urx.DW_LAST_EFFECTIVE_DT\nAND     urx.DW_LOGICAL_DELETE_IND = FALSE\nAND     urx.DW_CURRENT_VERSION_IND = TRUE\nINNER   JOIN LU_STORE str\nON      str.rog_id = urx.rog_id\nAND     str.closed_dt = '9999-12-31'::DATE\nAND     str.corporation_id = 1\nINNER   JOIN store_price_area spa  ON      spa.rog_id = urx.rog_id\nAND     spa.loc_retail_sect_id = urx.retail_section_cd\nAND     spa.store_id = str.store_id\nAND     alw.calendar_date BETWEEN spa.first_eff_dt AND spa.last_eff_dt\nLEFT    OUTER JOIN vendor_allow_hdr nah\nON      TRIM(nah.offer_nbr) = TRIM(alw.offer_number)\nAND     TRIM(nah.division_cd) = TRIM(division)::VARCHAR(2)\nAND     nah.current_offer_ind = 'Y'\nWHERE   alw.cost_area = 0\nAND     (nah.offer_nbr IS NOT NULL\nOR      (alw.wds_division &lt;&gt; '65' AND nah.offer_nbr IS NULL))\nGROUP   BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15;\n-- EXPR_FORMAT - Convert expression FORMAT/CAST_AS_FORMAT to TO_CHAR/TO_DATE\n-- FUN_DATE_CAST - Reformat STRING-to-DATE casting\n\n-- COLLECT STATISTICS ON EDM_BIZOPS_PRD..t_pe_alw_final INDEX (facility, corp_item_cd);\n-- COLLECT_STATS - Comment out COLLECT STATISTICS. requires further review.\n-- COLLECT STATISTICS ON EDM_BIZOPS_PRD..t_pe_alw_final COLUMN (corp, facility, corp_item_cd, rog, price_area_id, vend_num, vend_sub_acnt, cost_area);\n-- COLLECT_STATS - Comment out COLLECT STATISTICS. requires further review.\n</code></pre>"},{"location":"pricing_execution/#step-7","title":"Step 7","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_cpn_adplan_all;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-8","title":"Step 8","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_cpn_adplan_all (\ndivision_id INTEGER,\n--rog_id INTEGER,\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nstore_id INTEGER,\nupc_id DECIMAL(14,0),\noffer_id DECIMAL(13,0),\nOFFER_TYPE_CD CHAR(3)  COLLATE 'en-ci' ,\nCOUPON_AMT DECIMAL(8,2),\npromo_method_cd CHAR(2)  COLLATE 'en-ci' ,\npromo_min_purch_qty DECIMAL(2,0),\npromo_lim_qty SMALLINT,\npromo_prc DECIMAL(7,2),\npromo_prc_fctr DECIMAL(2,0),\nfirst_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nlast_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}');\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-9","title":"Step 9","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_cpn_adplan_all\n(       division_id\n,       rog_cd\n,       store_id\n,       upc_id\n,       offer_id\n,       offer_type_cd\n,       coupon_amt\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n)\nSELECT DISTINCT str.division_id\n,       RT.rog_id\n,       str.facility_nbr\n,       sipp.upc_nbr\n,       sipp.PROMOTION_STORE_INTEGRATION_ID\n,      CASE WHEN sipp.Coupon_type_cd = 'P' THEN 'PCP'\nWHEN sipp.Coupon_type_cd = 'E' THEN 'ECP' END AS Coupon_type_cd\n,       sipp.COUPON_AMT\n,       sipp.COUPON_METHOD_CD\n,       sipp.MINIMUM_PURCHASE_QTY\n,       sipp.COUPON_LIMIT_QTY\n,       CASE WHEN COUPON_METHOD_CD In ('NE', 'NW') And ORIGINAL_COUPON_FCTR &lt;&gt; 0 Then ORIGINAL_COUPON_AMT\nWHEN COUPON_METHOD_CD In ('NE', 'NW') And ORIGINAL_COUPON_FCTR = 0 Then COUPON_AMT\nWHEN  COUPON_METHOD_CD Not In ('NE', 'NW') Then COUPON_AMT END AS PROMO_PRC\n\n,       CASE WHEN COUPON_METHOD_CD In ('NE', 'NW') And ORIGINAL_COUPON_FCTR &lt;&gt; 0 Then ORIGINAL_COUPON_FCTR WHEN COUPON_METHOD_CD In ('NE', 'NW') And ORIGINAL_COUPON_FCTR = 0 Then 1\nWHEN  COUPON_METHOD_CD Not In ('NE', 'NW') Then 0 END AS PROMO_PRC_FCTR\n\n,       sipp.PROMOTION_START_DT\n,       sipp.PROMOTION_END_DT\nFROM    EDM_VIEWS_PRD.DW_VIEWS.PROMOTION_STORE sipp\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.FACILITY str\nON      str.Facility_integration_id = sipp.Facility_integration_id AND     str.close_dt &gt; CURRENT_DATE\nAND     str.DW_CURRENT_VERSION_IND = TRUE AND     str.DW_LOGICAL_DELETE_IND = FALSE\nAND     sipp.DW_CURRENT_VERSION_IND = TRUE AND     sipp.DW_LOGICAL_DELETE_IND = FALSE Inner Join EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE AS RT\nON  RT.FACILITY_NBR = STR.FACILITY_NBR\nAND RT.DW_CURRENT_VERSION_IND = TRUE AND RT.DW_LOGICAL_DELETE_IND = FALSE AND RT.corporation_id = 1\nWHERE sipp.Coupon_type_cd IN ('E','P')\n-- AND     DATE '2021-07-01' BETWEEN sipp.PROMOTION_START_DT AND sipp.PROMOTION_END_DT;\n--Akash:27/03/2019: Replaced AND condition with below lines\nAND (CASE\nWHEN (str.division_id = '33' or str.division_id = '34') THEN (current_date + \"\"\"+str(east_gap)+\"\"\")::DATE\nELSE (current_date + \"\"\"+str(reg_gap)+\"\"\")::DATE\nEND) BETWEEN sipp.PROMOTION_START_DT AND sipp.PROMOTION_END_DT\n</code></pre>"},{"location":"pricing_execution/#step-10","title":"Step 10","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_reg_rtl;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-11","title":"Step 11","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_reg_rtl (\ndivision_id INTEGER,\n--rog_id INTEGER,\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nstore_id INTEGER,\nupc_id DECIMAL(14,0),\nfirst_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nreg_rtl_prc DECIMAL(7,2),\nreg_rtl_prc_fctr DECIMAL(2,0));\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-12","title":"Step 12","text":"<pre><code>INSERT\nINTO   EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_reg_rtl\n(       division_id\n,       rog_cd\n,       store_id\n,       upc_id\n,       first_eff_dt\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n)\nSELECT\nstr.division_id\n,       str.rog_cd\n,       reg.store_id\n,       reg.upc_id\n,       reg.first_eff_dt\n,       reg.reg_rtl_prc\n,       reg.reg_rtl_prc_fctr\nFROM    (select distinct\nprip.ITEM_PRICE_FCTR as reg_rtl_prc_fctr\n,prip.ITEM_PRICE_AMT as reg_rtl_prc\n,prip.DW_FIRST_EFFECTIVE_DT as first_eff_dt\n,prip.UPC_NBR as upc_id\n,rs.FACILITY_NBR as store_id\n,prip.DW_LAST_EFFECTIVE_DT as last_eff_dt\nfrom EDM_VIEWS_PRD.dw_views.PENDING_RETAIL_ITEM_PRICE prip\ninner join EDM_VIEWS_PRD.dw_views.d1_upc upc\ninner join   EDM_VIEWS_PRD.dw_views.RETAIL_STORE_SECTION_PRICE_AREA rsspa\nINNER   JOIN EDM_VIEWS_PRD.dw_views.retail_store rs\non prip.rog_id = rs.rog_id\nand prip.price_area_cd = rsspa.price_area_cd\nand prip.upc_nbr = upc.upc_nbr\nand upc.section_cd = rsspa.section_cd\nand  rs.facility_integration_id = rsspa.facility_integration_id\nwhere  rs.dw_current_version_ind = TRUE and rs.DW_logical_delete_ind = FALSE\nand rsspa.dw_current_version_ind = TRUE and prip.dw_current_version_ind = TRUE\nand prip.DW_logical_delete_ind= FALSE  and rsspa.DW_logical_delete_ind= FALSE\nand  upc.DW_logical_delete_ind= FALSE\nand rs.Corporation_Id=001\n) reg\nINNER JOIN\n(\nselect distinct\nf.Facility_Nbr as store_id\n,f.Close_Dt as closed_dt\n,rs.Corporation_Id as corporation_id\n,f.Division_Id as division_id\n,rs.Rog_Id as rog_cd\nfrom EDM_VIEWS_PRD.dw_views.retail_store rs\nINNER join EDM_VIEWS_PRD.dw_views.facility f\non f.facility_integration_id = rs.facility_integration_id\nwhere rs.dw_current_version_ind = TRUE and rs.DW_logical_delete_ind= FALSE\nAND f.dw_current_version_ind = TRUE AND f.DW_logical_delete_ind= FALSE\nand rs.Corporation_Id = 001\n) str\nON      str.store_id = reg.store_id\nAND     str.closed_dt &gt; CURRENT_DATE\nAND     str.corporation_id = 001\nQUALIFY ROW_NUMBER() OVER (PARTITION BY reg.store_id, reg.upc_id ORDER BY reg.first_eff_dt ASC, reg.last_eff_dt ASC) = 1;\n-- COLLECT STATISTICS ON EDM_BIZOPS_PRD..t_pe_pending_reg_rtl INDEX (store_id, upc_id);\n-- COLLECT_STATS - Comment out COLLECT STATISTICS. requires further review.\n-- COLLECT STATISTICS ON EDM_BIZOPS_PRD..t_pe_pending_reg_rtl COLUMN (rog_cd, upc_id);\n-- COLLECT_STATS - Comment out COLLECT STATISTICS. requires further review.\n</code></pre>"},{"location":"pricing_execution/#step-13","title":"Step 13","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_dsd_cost;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-14","title":"Step 14","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_dsd_cost (\ncorporation_id VARCHAR(3)  COLLATE 'en-ci' ,\ndivision_id INTEGER,\nCORP_ITEM_CD INTEGER,\nVEND_NBR VARCHAR(6)  COLLATE 'en-ci' ,\nVEND_SUB_ACCT_NBR VARCHAR(3)  COLLATE 'en-ci' ,\nCOST_AREA_ID SMALLINT,\ndate_eff DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\ncost_vend DECIMAL(9,4));\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-15","title":"Step 15","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_dsd_cost\n(       corporation_id\n,       division_id\n,       corp_item_cd\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       cost_area_id\n,       date_eff\n,       cost_vend\n)\nSELECT  corporation_cd  AS corporation_id\n,       division_cd ::INTEGER   AS division_id\n,       corp_item_cd\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       cost_area_id\n,       start_eff_dt    AS date_eff\n,       vend_cst        AS cost_vend\nFROM    EDM_VIEWS_PRD.DW_EDW_VIEWS.dsd_cost_pending  --- Using Data Share for Now as the EDM Equivalent Table has Issues and Delete logic is Missing From ITEMMASTERCOST BOD adn they are fixing it\nWHERE   date_eff &gt; CURRENT_DATE\nQUALIFY ROW_NUMBER() OVER (PARTITION BY corporation_cd, division_cd, corp_item_cd, vend_nbr, vend_sub_acct_nbr, cost_area_id ORDER BY start_eff_dt ASC, vend_cst ASC) = 1;\n-- FUN_CAST_OPTR - Reformat casting\n\n-- COLLECT STATISTICS ON temp_tables.t_pe_pending_dsd_cost INDEX (division_id, corp_item_cd);\n-- COLLECT_STATS - Comment out COLLECT STATISTICS. requires further review.\n</code></pre>"},{"location":"pricing_execution/#step-16","title":"Step 16","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_whse_cost;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-17","title":"Step 17","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_whse_cost (\ndst_cntr VARCHAR(4)  COLLATE 'en-ci' ,\nCORP_ITEM_CD INTEGER,\ndate_eff DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\ncost_vend DECIMAL(9,4));\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-18","title":"Step 18","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_whse_cost\n(       dst_cntr\n,       corp_item_cd\n,       date_eff\n,       cost_vend\n)\nSELECT  dst_cntr_cd     AS dst_cntr\n,       corp_item_cd\n,       start_eff_dt    AS date_eff\n,       vend_cst        AS cost_vend\nFROM    EDM_VIEWS_PRD.DW_EDW_VIEWS.whse_cost_pending      --- Using Data Share for Now as the EDM Equivalent Table has Issues and Delete logic is Missing From ITEMMASTERCOST BOD adn they are fixing it\nQUALIFY ROW_NUMBER() OVER (PARTITION BY dst_cntr_cd, corp_item_cd ORDER BY start_eff_dt ASC, vend_cst ASC) = 1;\n\n-- COLLECT STATISTICS ON temp_tables.t_pe_pending_whse_cost INDEX (dst_cntr, corp_item_cd);\n-- COLLECT_STATS - Comment out COLLECT STATISTICS. requires further review.\n</code></pre>"},{"location":"pricing_execution/#step-19","title":"Step 19","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl ;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-20","title":"Step 20","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl (\ndivision_id INTEGER,\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nstore_id INTEGER,\nupc_id DECIMAL(14,0),\nlast_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nreg_rtl_prc DECIMAL(7,2),\nreg_rtl_prc_fctr DECIMAL(2,0));\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-21","title":"Step 21","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl\n(       division_id\n--,       rog_id\n,       rog_cd\n,       store_id\n,       upc_id\n,       last_eff_dt\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n)\nSELECT DISTINCT  RT.division_id\n--,       str.rog_id  --Column Internal to LDW\n,       RT.rog_id\n,       RT.RETAIL_STORE_FACILITY_NBR\n,       reg.upc_nbr\n,       reg.DW_LAST_EFFECTIVE_DT\n,       reg.ITEM_PRICE_AMT\n,       reg.ITEM_PRICE_FCTR\nFROM    EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE_UPC_PRICE reg\ninner join edm_views_prd.DW_VIEWS.d1_retail_store rt on reg.facility_integration_id= rt.facility_integration_id\nWHERE   REG.DW_CURRENT_VERSION_IND = TRUE\nand reg.DW_LAST_EFFECTIVE_DT &gt; current_date\n\nQUALIFY ROW_NUMBER() OVER (PARTITION BY rt.RETAIL_STORE_FACILITY_NBR, reg.upc_nbr ORDER BY reg.DW_LAST_EFFECTIVE_DT DESC, reg.DW_FIRST_EFFECTIVE_DT DESC) = 1; -- COLLECT STATISTICS ON temp_tables.t_pe_hist_reg_rtl INDEX (store_id, upc_id);\n-- COLLECT_STATS - Comment out COLLECT STATISTICS. requires further review.\n-- COLLECT STATISTICS ON temp_tables.t_pe_hist_reg_rtl COLUMN (rog_cd, upc_id);\n-- COLLECT_STATS - Comment out COLLECT STATISTICS. requires further review.\n</code></pre>"},{"location":"pricing_execution/#step-22","title":"Step 22","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_item_attr_1;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-23","title":"Step 23","text":"<pre><code>CREATE or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_item_attr_1 (\ndivision_id INTEGER,\nstore_id INTEGER,\ngenrt_cic_id DECIMAL(12,0),\ncorp_item_cd DECIMAL(8,0),\ncic_dsc VARCHAR(40)  COLLATE 'en-ci' ,\ngroup_id SMALLINT,\ncategory_id SMALLINT,\nvend_conv_fctr SMALLINT,\n-- pack_whse_qty DECIMAL(7,2),\npack_retail_qty DECIMAL(7,2),\npack_dsc CHAR(30)  COLLATE 'en-ci' ,\nsize_dsc CHAR(30)  COLLATE 'en-ci' ,\ndst_cntr VARCHAR(4)  COLLATE 'en-ci' ,\ncic_vend_cst DECIMAL(9,4),\ncorporation_id BYTEINT,\nWHSE_CD VARCHAR(4)  COLLATE 'en-ci' ,\nstatus_dst CHAR(1)  COLLATE 'en-ci' ,\ncic_ib_cst DECIMAL(9,4),\nitem_type_cd DECIMAL(3,0),\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nretail_status_cd CHAR(1)  COLLATE 'en-ci' ,\nloc_common_retail_cd DECIMAL(5,0),\nupc_id DECIMAL(13,0),\nsnstv_tier_cd CHAR(1)  COLLATE 'en-ci' ,\nDIV_PROMO_GRP_CD INTEGER,\nVEND_NBR VARCHAR(6)  COLLATE 'en-ci' ,\nVEND_SUB_ACCT_NBR VARCHAR(3)  COLLATE 'en-ci' ,\nloc_retail_sect_id INTEGER,\nBUYER_NBR CHAR(2)  COLLATE 'en-ci' ,\nunit_prc_tbl_nbr SMALLINT,\n-- ARIS: 20190213: added cost_area_id\ncost_area_id SMALLINT) COMMENT = '{\"multiset\": true}' ;\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- CREATE_MULTISET_OPTION - Remove MULTISET create table option\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n-- T_CREATE_TABLE_META - Add table metadata to table comment\n</code></pre>"},{"location":"pricing_execution/#step-24","title":"Step 24","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.T_PE_DSD_ITEM_ATTR_1\n(       division_id\n,       store_id\n,       genrt_cic_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n-- ,       pack_whse_qty\n,       pack_retail_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       WHSE_CD\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       DIV_PROMO_GRP_CD\n,       VEND_NBR\n,       VEND_SUB_ACCT_NBR\n,       loc_retail_sect_id\n,       BUYER_NBR\n,       unit_prc_tbl_nbr\n-- ARIS: 20190213: added cost_area_id\n,       cost_area_id\n)\nSELECT DISTINCT  str.division_id\n,       str.store_id\n,     cic.genrt_cic_id\n,       cic.corp_item_cd\n,       cic.cic_dsc\n,       cic.group_id\n,       cic.category_id\n,       cic.vend_conv_fctr\n-- ,       cic.pack_whse_qty\n,       urx.pack_retail_qty\n,       urx.pack_dsc\n,       urx.size_dsc\n,       wds.dst_cntr\n,       vcc.vend_cst as cic_vend_cst\n,       1 AS corporation_id\n,       wds.whse_cd\n,       wds.status_dst\n,       vcc.ib_cst AS cic_ib_cst\n,       cic.item_type_cd\n,       str.rog_cd\n,       wir.retail_status_cd\n,       urx.loc_common_retail_cd\n,       urx.upc_id\n,       urx.snstv_tier_cd\n,       urx.div_promo_grp_cd\n--AKASH : 20190530: changed dsd.vend_nbr and sub_acct_nbr to vcc.vend_nbr and sub_acct_nbr\n,       vcc.vend_nbr\n,       vcc.vend_sub_acct_nbr\n,       urx.loc_retail_sect_id\n,       wds.buyer_nbr    -- wds.buyer_nbr\n,       urx.unit_prc_tbl_nbr\n-- ARIS: 20190213: added cost_area_id\n,       vcc.cost_area_id\nFROM (\nSELECT  wcvi.corporation_id\n,      wcvi.Corporate_item_integration_id as genrt_cic_id\n,       sci.division_id as division_cd\n,       sci.Distribution_center_id as dst_cntr\n,       wcvi.warehouse_id as whse_Cd\n,       wcvi.vendor_id as vend_nbr\n,       wcvi.vendor_sub_acct_id  as vend_sub_acct_nbr\n,       sci.Warehouse_Item_Status_Cd as status_dst    ,       wcvi.item_billing_cost_amt as ib_cst\n,       wcvi.vendor_unit_cost_amt as vend_cst\n,       sci.warehouse_item_status_cd\n,       wcvi.vendor_conversion_fctr\n,       sci.buyer_id as buyer_nbr\nFROM    (\nSELECT  DISTINCT\nvwic.corporation_id\n,       vwic.division_id\n,       vwic.warehouse_id\n,        vwic.vendor_unit_cost_amt\n,       vwic.Corporate_item_integration_id\n,       vwic.item_billing_cost_amt\n,       vi.vendor_id\n,       vi.vendor_sub_acct_id\n,       vi.wims_sub_vendor_nbr\n,       vi.vendor_conversion_fctr\nFROM    EDM_VIEWS_PRD.DW_VIEWS.vendor_warehouse_item_cost vwic\nINNER JOIN\nEDM_VIEWS_PRD.DW_VIEWS.vendor_item  vi\nON vi.warehouse_id                   = vwic.warehouse_id\nAND vi.corporate_item_integration_id  = vwic.corporate_item_integration_id\nAND vi.vendor_id                      = vwic.vendor_id\nAND vi.vendor_sub_acct_id             = vwic.vendor_sub_acct_id\nAND vi.wims_sub_vendor_nbr            = vwic.wims_sub_vendor_nbr\nAND vwic.dw_current_version_ind = true AND vwic.dw_logical_delete_ind = FALSE\nAND vi.dw_current_version_ind = true AND vi.dw_logical_delete_ind   = FALSE\n\n) wcvi\nINNER JOIN\nEDM_VIEWS_PRD.DW_VIEWS.supply_chain_item  sci\nON sci.warehouse_id                  = wcvi.warehouse_id\nAND sci.corporate_item_integration_id = wcvi.corporate_item_integration_id\nAND sci.DW_CURRENT_VERSION_IND = True AND sci.DW_LOGICAL_DELETE_IND = FALSE\n\n\nwhere  sci.Warehouse_Item_Status_Cd NOT IN ('X', 'D')\nAND     SUBSTR(wcvi.WAREHOUSE_ID, 1, 2) = 'DD'\nAND     wcvi.VENDOR_ID &lt;&gt; '021069'    ) wds\nINNER   JOIN (\nSELECT DISTINCT\nc.Corporate_Item_Integration_Id as genrt_cic_id,\nc.Corporation_Id as Corporation_Id,\nc.CORPORATE_ITEM_CD as corp_item_cd,\nc.item_dsc as cic_dsc,\nc.SMIC_Group_Cd as group_id,\nc.smic_group_cd * 100 + c.smic_category_cd as category_id, --SMIC_Category\nc.Vendor_Conversion_Fctr as vend_conv_fctr, --Vendor_Item\nC.COMPARISON_ITEM_TYPE_CD  as item_type_cd, --Corporate_Item_UPC_ROG_Reference\nCASE WHEN c.Display_Item_Ind in ('') THEN 'N' WHEN c.Display_Item_Ind is NULL THEN 'N' ELSE c.Display_Item_Ind  END as display_ind\nFROM EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM c\nwhere c.Corporation_Id=1 AND c.SMIC_Group_Cd IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,39,40,42,43,44,45,46,47,48,73,74,88,96,97,\n49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,75,76,77,78,79,80,89,84,70,71,81,82,85,86,94,95) AND c.DW_LOGICAL_DELETE_IND = FALSE\nAND c.DW_CURRENT_VERSION_IND = TRUE\n) cic\nON      cic.genrt_cic_id = wds.genrt_cic_id\nAND     cic.corporation_id = 1\nAND     cic.display_ind &lt;&gt; 'Y'\n-- AKASH: 20190312 : added this join criteria\nAND     WDS.VEND_NBR &lt;&gt; '021069'\n-- Exclude MCLANE COMPANY\nINNER   JOIN (\nSELECT DISTINCT\nROGCI.Retail_Status_Ind  as retail_status_cd,\nsci.Division_Id as whse_division_id,\nROGCI.WAREHOUSE_ID as whse_cd,\nROGCI.Corporate_Item_Integration_id as genrt_cic_id,\nROGCI.Rog_Id as rog_id\nFROM\nEDM_VIEWS_PRD.DW_VIEWS.Retail_Order_Group_Corporate_item as ROGCI\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.SUPPLY_CHAIN_ITEM AS SCI\nON SCI.Corporate_Item_Integration_id = ROGCI.Corporate_Item_Integration_id\nAND SCI.WAREHOUSE_ID = ROGCI.WAREHOUSE_ID\nAND SCI.DW_LOGICAL_DELETE_IND = FALSE AND SCI. DW_CURRENT_VERSION_IND = TRUE\nWHERE\nROGCI.DW_LOGICAL_DELETE_IND = FALSE AND ROGCI. DW_CURRENT_VERSION_IND = TRUE\n) wir\nON      wir.whse_division_id = wds.division_cd\nAND     wir.whse_cd = wds.whse_cd\nAND     wir.genrt_cic_id = cic.genrt_cic_id\nAND     wir.retail_status_cd &lt;&gt; 'D'\nINNER   JOIN (\nSELECT  distinct\nvdic.corporation_id ,       vdic.division_id as division_cd\n,       vdic.vendor_id as vend_nbr\n,       vdic.vendor_sub_account_id as vend_sub_acct_nbr\n,       vdic.corporate_item_integration_id  as Genrt_cic_id\n,       vdic.vendor_cost_area_cd as cost_area_id\n,       vdic.item_billing_cost_amt as ib_cst\n,       vdic.vendor_unit_cost_amt as vend_cst\n--,       vbr.terms_id\n,       vdsdi.vendor_item_status_cd as item_status_ind\nFROM    EDM_VIEWS_PRD.DW_VIEWS.vendor_dsd_item_cost   vdic\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.vendor_direct_store_delivery_item vdsdi\nON vdsdi.vendor_id = vdic.vendor_id\nAND vdsdi.vendor_sub_account_id  = vdic.vendor_sub_account_id\nAND vdsdi.corporate_item_integration_id  = vdic.corporate_item_integration_id AND vdsdi.dw_logical_delete_ind = FALSE AND vdsdi.DW_CURRENT_VERSION_IND= TRUE\nAND vdic.dw_logical_delete_ind = FALSE AND vdic.DW_CURRENT_VERSION_IND= TRUE\n\n) vcc\nON      vcc.division_cd ::INTEGER = wir.whse_division_id\nAND     vcc.genrt_cic_id = wds.genrt_cic_id\n-- MAYANK : 20190604 : added the below condition to restrict the vendors with hold status\nAND     vcc.item_status_ind &lt;&gt; 'H'\nINNER   JOIN (\nSELECT DISTINCT\ncr.RETAIL_UNIT_PACK_NBR as pack_retail_qty,\ncr.SHELF_UNIT_PACK_DSC as pack_dsc,\ncr.SHELF_UNIT_SIZE_DSC  as size_dsc,\ncr.Common_Retail_Cd  as loc_common_retail_cd,\ncr.UPC_NBR as upc_id,\ncri.Sensitive_tier_cd as snstv_tier_cd,\nCOALESCE(cm.common_item_group_cd,0)::NUMBER as div_promo_grp_cd,\ncr.RETAIL_SECTION_CD as loc_retail_sect_id,\nrp.Unit_Price_Table_Nbr as unit_prc_tbl_nbr,\ncr.DW_LAST_EFFECTIVE_DT as last_eff_dt,\ncr.ROG_ID as rog_id,\ncr.Corporate_Item_Integration_Id as genrt_cic_id,\ncr.STATUS_CD as retail_status_cd\n\nFROM \"EDM_VIEWS_PRD\".\"DW_VIEWS\".\"CORPORATE_ITEM_UPC_ROG_REFERENCE\" cr\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP AS ROG\nON ROG.ROG_ID = CR.ROG_ID AND ROG.DW_LOGICAL_DELETE_IND = FALSE AND ROG.DW_CURRENT_VERSION_IND = TRUE  AND cr.DW_LOGICAL_DELETE_IND = FALSE AND cr.DW_CURRENT_VERSION_IND = TRUE\n\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.Common_Item_Group_item cm ON\ncr.Corporate_Item_Integration_Id =cm.Corporate_Item_Integration_Id\nAND CM.DIVISION_ID = ROG.DIVISION_ID\nAND cm.DW_LOGICAL_DELETE_IND = FALSE AND cm.DW_CURRENT_VERSION_IND = TRUE\n\n\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.CURRENT_RETAIL_ITEM_PRICE AS CRI --- left join this because CURRENT_RETAIL_ITEM_PRICE appears to be missing data 1/21/2023 modified\nON cr.rog_id = cri.rog_id AND cr.upc_nbr = cri.upc_nbr\nAND CRI.DW_LOGICAL_DELETE_IND = FALSE AND cri.DW_CURRENT_VERSION_IND = TRUE\nAND cr.DW_LOGICAL_DELETE_IND = FALSE AND cr.DW_CURRENT_VERSION_IND = TRUE\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.Retail_Order_Group_UPC rp ON\ncr.rog_id = rp.rog_id and cr.upc_nbr = rp.upc_nbr AND rp.DW_CURRENT_VERSION_IND = TRUE and rp.DW_LOGICAL_DELETE_IND = FALSE\n) urx\nON      urx.rog_id = wir.rog_id\nAND     urx.genrt_cic_id = wir.genrt_cic_id\n\n-- MAYANK : 20190527 :  adding this condition to stop UPCs with this status\nAND     urx.retail_status_cd NOT IN ('X','D')\n-- ARIS: 20190213: added this join criteria\n\nINNER   JOIN (\nSELECT DISTINCT\nr.Division_Id as division_id,\nf.Facility_Nbr as store_id,\nr.Rog_Id as rog_id,\nr.Rog_Id as rog_cd,\nr.Corporation_Id as corporation_id,\nf.Close_Dt as closed_dt\nFROM EDM_VIEWS_PRD.DW_VIEWS.Facility f\nINNER JOIN  EDM_VIEWS_PRD.DW_VIEWS.Retail_Store r ON\nf.Facility_nbr =r.Facility_nbr\nand r.dw_current_version_ind=TRUE and r.DW_LOGICAL_DELETE_IND=FALSE\nand f.dw_current_version_ind=TRUE and f.DW_LOGICAL_DELETE_IND=FALSE\nAND  closed_dt &gt; CURRENT_DATE\n) str\nON      str.rog_id = urx.rog_id\nAND     str.corporation_id = 1\nAND     str.division_id NOT IN (45, 58)\nINNER   JOIN (\nSELECT DISTINCT\na.Corporate_Item_Integration_Id as genrt_cic_id,\nrs.FACILITY_NBR as store_id,\na.Vendor_Id as vend_nbr,\na.Vendor_Sub_Account_Id as vend_sub_acct_nbr,\na.Authorized_Item_Start_Dt as auth_start_dt,\na.Authorized_Item_End_Dt as auth_end_dt\nFROM EDM_VIEWS_PRD.DW_VIEWS.Authorized_Backdoor_Receiving_Item a\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE rs ON\na.facility_integration_id=rs.facility_integration_id\nand a.dw_current_version_ind=TRUE and a.DW_LOGICAL_DELETE_IND=FALSE\nand rs.dw_current_version_ind=TRUE and rs.DW_LOGICAL_DELETE_IND=FALSE\n) dsd\nON      dsd.genrt_cic_id = cic.genrt_cic_id\nAND     dsd.store_id = str.store_id\nAND     dsd.vend_nbr = vcc.vend_nbr\nAND     dsd.vend_sub_acct_nbr = vcc.vend_sub_acct_nbr\nAND     (CASE\nWHEN (str.division_id = '33' or str.division_id = '34') THEN (current_date + \"\"\"+str(east_gap)+\"\"\")::DATE\nELSE (current_date + \"\"\"+str(reg_gap)+\"\"\")::DATE\nEND) BETWEEN dsd.auth_start_dt AND dsd.auth_end_dt\n\nWHERE   wds.status_dst NOT IN ('X', 'D')\nAND     SUBSTR(wds.whse_cd, 1, 2) = 'DD'\nAND     str.store_id &lt; 5000\nAND     cic.group_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,39,40,42,43,44,45,46,47,48,73,74,88,96,97,\n49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,75,76,77,78,79,80,89,84,70,71,81,82,85,86,94,95);\n</code></pre>"},{"location":"pricing_execution/#step-25","title":"Step 25","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_whse_item_attr_1;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-26","title":"Step 26","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_whse_item_attr_1 (\ndivision_id INTEGER,\nstore_id INTEGER,\ngenrt_cic_id DECIMAL(12,0),\ncorp_item_cd DECIMAL(8,0),\ncic_dsc VARCHAR(40)  COLLATE 'en-ci' ,\ngroup_id SMALLINT,\ncategory_id SMALLINT,\nvend_conv_fctr SMALLINT,\n-- pack_whse_qty DECIMAL(7,2),\npack_retail_qty DECIMAL(7,2),\npack_dsc CHAR(30)  COLLATE 'en-ci' ,\nsize_dsc CHAR(30)  COLLATE 'en-ci' ,\ndst_cntr VARCHAR(4)  COLLATE 'en-ci' ,\ncic_vend_cst DECIMAL(9,4),\ncorporation_id BYTEINT,\nWHSE_CD VARCHAR(4)  COLLATE 'en-ci' ,\nstatus_dst CHAR(1)  COLLATE 'en-ci' ,\ncic_ib_cst DECIMAL(9,4),\nitem_type_cd DECIMAL(3,0),\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nretail_status_cd CHAR(1)  COLLATE 'en-ci' ,\nloc_common_retail_cd DECIMAL(5,0),\nupc_id DECIMAL(13,0),\nsnstv_tier_cd CHAR(1)  COLLATE 'en-ci' ,\nDIV_PROMO_GRP_CD INTEGER,\nVEND_NBR VARCHAR(6)  COLLATE 'en-ci' ,\nVEND_SUB_ACCT_NBR VARCHAR(3)  COLLATE 'en-ci' ,\nloc_retail_sect_id INTEGER,\nBUYER_NBR CHAR(2)  COLLATE 'en-ci' ,\nunit_prc_tbl_nbr SMALLINT);\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-27","title":"Step 27","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_whse_item_attr_1\n(       division_id\n,       store_id\n,       genrt_cic_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n-- ,       pack_whse_qty\n,       pack_retail_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       WHSE_CD\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       DIV_PROMO_GRP_CD\n,       VEND_NBR\n,       VEND_SUB_ACCT_NBR\n,       loc_retail_sect_id\n,       BUYER_NBR\n,       unit_prc_tbl_nbr\n)\nSELECT DISTINCT   str.division_id\n,       str.store_id\n,       cic.genrt_cic_id\n,       cic.corp_item_cd\n,       cic.cic_dsc\n,       cic.group_id\n,       cic.category_id\n,       cic.vend_conv_fctr\n-- ,       cic.pack_whse_qty\n,       urx.pack_retail_qty\n,       urx.pack_dsc\n,       urx.size_dsc\n,       wds.dst_cntr_cd AS dst_cntr\n,       wds.vend_cst AS cic_vend_cst\n,       1 AS corporation_id\n,       wds.whse_cd\n,       wds.status_dst_cd   AS status_dst\n,       wds.ib_cst AS cic_ib_cst\n,       cic.item_type_cd\n-- ,       rog.rog_id\n,       rog.rog_cd\n,       wir.retail_status_cd\n,       urx.loc_common_retail_cd\n,      urx.upc_id\n,       urx.snstv_tier_cd\n,       urx.div_promo_grp_cd\n,       wds.vend_nbr\n,       wds.vend_sub_acct_nbr\n,       urx.loc_retail_sect_id\n,       wds.buyer_nbr\n,       urx.unit_prc_tbl_nbr\nFROM(\nSELECT  DISTINCT\nwcvi.corporation_id\n,      wcvi.Corporate_item_integration_id as genrt_cic_id\n,       sci.division_id as division_cd\n,       sci.Distribution_center_id as dst_cntr_cd\n,       wcvi.warehouse_id as whse_Cd\n,       wcvi.vendor_id as vend_nbr\n,       wcvi.vendor_sub_acct_id  as vend_sub_acct_nbr\n,       sci.Warehouse_Item_Status_Cd as status_dst_cd     ,       wcvi.item_billing_cost_amt as ib_cst\n,       wcvi.vendor_unit_cost_amt as vend_cst\n,       sci.warehouse_item_status_cd\n,       wcvi.vendor_conversion_fctr\n,       sci.buyer_id as buyer_nbr\nFROM    (\nSELECT  DISTINCT\nvwic.corporation_id\n,       vwic.division_id\n,       vwic.warehouse_id\n,        vwic.vendor_unit_cost_amt\n,       vwic.Corporate_item_integration_id\n,       vwic.item_billing_cost_amt\n,       vi.vendor_id\n,       vi.vendor_sub_acct_id\n,       vi.wims_sub_vendor_nbr\n,       vi.vendor_conversion_fctr\nFROM    EDM_VIEWS_PRD.DW_VIEWS.vendor_warehouse_item_cost vwic\nINNER JOIN\nEDM_VIEWS_PRD.DW_VIEWS.vendor_item  vi\nON vi.warehouse_id                   = vwic.warehouse_id\nAND vi.corporate_item_integration_id  = vwic.corporate_item_integration_id\nAND vi.vendor_id                      = vwic.vendor_id\nAND vi.vendor_sub_acct_id             = vwic.vendor_sub_acct_id\nAND vi.wims_sub_vendor_nbr            = vwic.wims_sub_vendor_nbr\nAND vwic.dw_current_version_ind = true AND vwic.dw_logical_delete_ind = FALSE\nAND vi.dw_current_version_ind = true AND vi.dw_logical_delete_ind   = FALSE\n\n) wcvi\nINNER JOIN\nEDM_VIEWS_PRD.DW_VIEWS.supply_chain_item  sci\nON sci.warehouse_id                  = wcvi.warehouse_id\nAND sci.corporate_item_integration_id = wcvi.corporate_item_integration_id\nAND sci.DW_CURRENT_VERSION_IND = True AND sci.DW_LOGICAL_DELETE_IND = FALSE\n\n\nwhere  sci.Warehouse_Item_Status_Cd NOT IN ('X', 'D')\nAND     SUBSTR(wcvi.WAREHOUSE_ID, 1, 2) &lt;&gt; 'DD'\nAND     wcvi.VENDOR_ID &lt;&gt; '021069'\n) wds\nINNER   JOIN (\nSELECT DISTINCT\nc.Corporate_Item_Integration_Id as genrt_cic_id,\nc.Corporation_Id as Corporation_Id,\nc.CORPORATE_ITEM_CD as corp_item_cd,\nc.item_dsc as cic_dsc,\nc.SMIC_Group_Cd as group_id,\nc.smic_group_cd * 100 + c.smic_category_cd as category_id, --SMIC_Category\nc.Vendor_Conversion_Fctr as vend_conv_fctr, --Vendor_Item\nC.COMPARISON_ITEM_TYPE_CD  as item_type_cd, --Corporate_Item_UPC_ROG_Reference\nCASE WHEN c.Display_Item_Ind in ('') THEN 'N' WHEN c.Display_Item_Ind is NULL THEN 'N' ELSE c.Display_Item_Ind  END as display_ind\nFROM EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM c\nwhere c.DW_LOGICAL_DELETE_IND = FALSE\nAND c.DW_CURRENT_VERSION_IND = TRUE ) cic\nON      cic.Genrt_cic_id = wds.genrt_cic_id\n--AND     cic.non_merged_cic_ind = 'Y'\nAND     cic.corporation_id = 1\nAND     cic.display_ind &lt;&gt; 'Y'\nAND cic.group_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,39,40,42,43,44,45,46,47,48,73,74,88,96,97,\n49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,75,76,77,78,79,80,89,84,70,71,81,82,85,86,94,95)\n-- AKASH: 20190312 : added this join criteria\n-- Exclude MCLANE COMPANY\nINNER   JOIN (\nSELECT DISTINCT\nROGCI.Retail_Status_Ind  as retail_status_cd,\nsci.Division_Id as whse_division_id,\nROGCI.WAREHOUSE_ID as whse_cd,\nROGCI.Corporate_Item_Integration_id as genrt_cic_id,\nROGCI.Rog_Id as rog_id\nFROM\nEDM_VIEWS_PRD.DW_VIEWS.Retail_Order_Group_Corporate_item as ROGCI\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.SUPPLY_CHAIN_ITEM AS SCI\nON SCI.Corporate_Item_Integration_id = ROGCI.Corporate_Item_Integration_id\nAND SCI.WAREHOUSE_ID = ROGCI.WAREHOUSE_ID\nAND SCI.DW_LOGICAL_DELETE_IND = FALSE AND SCI. DW_CURRENT_VERSION_IND = TRUE\nWHERE\nROGCI.DW_LOGICAL_DELETE_IND = FALSE AND ROGCI. DW_CURRENT_VERSION_IND = TRUE ) wir\nON      wir.whse_division_id = wds.division_cd\nAND     wir.whse_cd = wds.whse_cd\nAND     wir.genrt_cic_id = cic.genrt_cic_id\nAND     wir.retail_status_cd &lt;&gt; 'D'\n\n\n\nINNER   JOIN (\nSELECT DISTINCT\ncr.RETAIL_UNIT_PACK_NBR as pack_retail_qty,\ncr.SHELF_UNIT_PACK_DSC as pack_dsc,\ncr.SHELF_UNIT_SIZE_DSC  as size_dsc,\nCOALESCE(cr.Common_Retail_Cd,cic.Common_Retail_Cd)  as loc_common_retail_cd,\ncr.UPC_NBR as upc_id,\ncri.Sensitive_tier_cd as snstv_tier_cd,\nCOALESCE(cm.common_item_group_cd,0)::NUMBER as div_promo_grp_cd,\ncr.RETAIL_SECTION_CD as loc_retail_sect_id,\nrp.Unit_Price_Table_Nbr as unit_prc_tbl_nbr,\ncr.DW_LAST_EFFECTIVE_DT as last_eff_dt,\ncr.ROG_ID as rog_id,\ncr.Corporate_Item_Integration_Id as genrt_cic_id,\ncr.STATUS_CD as retail_status_cd\n\nFROM \"EDM_VIEWS_PRD\".\"DW_VIEWS\".\"CORPORATE_ITEM_UPC_ROG_REFERENCE\" cr\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP AS ROG\nON ROG.ROG_ID = CR.ROG_ID AND ROG.DW_LOGICAL_DELETE_IND = FALSE AND ROG.DW_CURRENT_VERSION_IND = TRUE  AND cr.DW_LOGICAL_DELETE_IND = FALSE AND cr.DW_CURRENT_VERSION_IND = TRUE\n\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.Common_Item_Group_item cm ON\ncr.Corporate_Item_Integration_Id =cm.Corporate_Item_Integration_Id\nAND CM.DIVISION_ID = ROG.DIVISION_ID\nAND cm.DW_LOGICAL_DELETE_IND = FALSE AND cm.DW_CURRENT_VERSION_IND = TRUE\n\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.CURRENT_RETAIL_ITEM_PRICE AS CRI --- left join this because CURRENT_RETAIL_ITEM_PRICE appears to be missing data 1/21/2023 modified\nON CRI.Corporate_Item_Integration_Id = CR.Corporate_Item_Integration_Id AND cr.rog_id = cri.rog_id AND cr.upc_nbr = cri.upc_nbr\nAND CRI.DW_LOGICAL_DELETE_IND = FALSE AND cri.DW_CURRENT_VERSION_IND = TRUE\nAND cr.DW_LOGICAL_DELETE_IND = FALSE AND cr.DW_CURRENT_VERSION_IND = TRUE\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM AS CIC\nON CIC.CORPORATE_ITEM_INTEGRATION_ID = CR.CORPORATE_ITEM_INTEGRATION_ID\nAND CIC.DW_LOGICAL_DELETE_IND = FALSE AND CIC.DW_CURRENT_VERSION_IND = TRUE\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.Retail_Order_Group_UPC rp ON\ncr.rog_id = rp.rog_id and cr.upc_nbr = rp.upc_nbr AND rp.DW_CURRENT_VERSION_IND = TRUE and rp.DW_LOGICAL_DELETE_IND = FALSE\n\n) urx\nON      urx.rog_id = wir.rog_id\nAND     urx.genrt_cic_id = wir.genrt_cic_id\n-- MAYANK : 20190527 :  adding this condition to stop UPCs with this status\nAND     urx.retail_status_cd NOT IN ('X','D')\n-- ARIS: 20190213: added this join criteria\n\n\nINNER   JOIN (\nSELECT DISTINCT\nRog_Id as rog_id,\nRog_Id as rog_cd\nFROM\nEDM_VIEWS_PRD.DW_VIEWS.Retail_Order_Group\nwhere DW_LOGICAL_DELETE_IND = FALSE AND DW_CURRENT_VERSION_IND = TRUE ) rog\nON      rog.rog_id = urx.rog_id\n\nINNER   JOIN (\nSELECT DISTINCT\nr.Division_Id as division_id,\nf.Facility_Nbr as store_id,\nr.Rog_Id,\nr.Corporation_Id as corporation_id,\nf.Close_Dt as closed_dt\nFROM EDM_VIEWS_PRD.DW_VIEWS.Facility f\nINNER JOIN  EDM_VIEWS_PRD.DW_VIEWS.Retail_Store r ON\nf.Facility_nbr =r.Facility_nbr\nand r.dw_current_version_ind=TRUE and r.DW_LOGICAL_DELETE_IND=FALSE\nand f.dw_current_version_ind=TRUE and f.DW_LOGICAL_DELETE_IND=FALSE\nAND  closed_dt &gt; CURRENT_DATE\n) str\nON      str.rog_id = rog.rog_id\nAND     str.corporation_id = 1\nAND     str.division_id NOT IN (45, 58)\nAND     str.store_id &lt; 5000;\n\n\n-- FUN_DATE_CAST - Reformat STRING-to-DATE casting\n</code></pre>"},{"location":"pricing_execution/#step-28","title":"Step 28","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_item_attr_2;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-29","title":"Step 29","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_item_attr_2 (\ndivision_id INTEGER,\nstore_id INTEGER,\ngenrt_cic_id DECIMAL(12,0),\ncorp_item_cd DECIMAL(8,0),\ncic_dsc VARCHAR(40)  COLLATE 'en-ci' ,\ngroup_id SMALLINT,\ncategory_id SMALLINT,\nvend_conv_fctr SMALLINT,\n-- pack_whse_qty DECIMAL(7,2),\npack_retail_qty DECIMAL(7,2),\npack_dsc CHAR(30)  COLLATE 'en-ci' ,\nsize_dsc CHAR(30)  COLLATE 'en-ci' ,\ndst_cntr VARCHAR(4)  COLLATE 'en-ci' ,\ncic_vend_cst DECIMAL(9,4),\ncorporation_id BYTEINT,\nWHSE_CD VARCHAR(4)  COLLATE 'en-ci' ,\nstatus_dst CHAR(1)  COLLATE 'en-ci' ,\ncic_ib_cst DECIMAL(9,4),\nitem_type_cd DECIMAL(3,0),\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nretail_status_cd CHAR(1)  COLLATE 'en-ci' ,\nloc_common_retail_cd DECIMAL(5,0),\nupc_id DECIMAL(13,0),\nsnstv_tier_cd CHAR(1)  COLLATE 'en-ci' ,\nDIV_PROMO_GRP_CD INTEGER,\nVEND_NBR VARCHAR(6)  COLLATE 'en-ci' ,\nVEND_SUB_ACCT_NBR VARCHAR(3)  COLLATE 'en-ci' ,\nloc_retail_sect_id INTEGER,\nBUYER_NBR CHAR(2)  COLLATE 'en-ci' ,\nunit_prc_tbl_nbr SMALLINT,\nprice_area_id INTEGER,\ncost_area_id SMALLINT,\nbuyer_nm CHAR(20)  COLLATE 'en-ci' ,\nvend_nm CHAR(40)  COLLATE 'en-ci' ,\nreg_rtl_prc DECIMAL(7,2),\nreg_rtl_prc_fctr DECIMAL(2,0),\noffer_id DECIMAL(13,0),\nCOUPON_AMT DECIMAL(8,2),\npromo_method_cd CHAR(2)  COLLATE 'en-ci' ,\npromo_min_purch_qty DECIMAL(2,0),\npromo_lim_qty SMALLINT,\npromo_prc DECIMAL(7,2),\npromo_prc_fctr DECIMAL(2,0),\nfirst_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nlast_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_first_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_reg_rtl_prc DECIMAL(7,2),\nprtl_reg_rtl_prc_fctr DECIMAL(2,0),\nadplan_flag VARCHAR(1)  COLLATE 'en-ci' ,\nup_mult_factor DECIMAL(7,3),\nup_label_unit VARCHAR(5)  COLLATE 'en-ci' ,\npending_cost DECIMAL(9,4),\npending_cost_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n-- ARIS: 20190213: removed the following columns.  These will be calculated later at price area level\n--      hist_reg_rtl_prc DECIMAL(7,2),\n--      hist_reg_rtl_prc_fctr DECIMAL(2,0),\n--      hist_last_eff_dt DATE FORMAT 'YY/MM/DD',\nalw_typ VARCHAR(1)  COLLATE 'en-ci' ,\narrival_from_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\narrival_to_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nallow_amt DECIMAL(11,4),\namt_in_cost DECIMAL(11,4));\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-30","title":"Step 30","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_item_attr_2\n(       division_id\n,       store_id\n,       genrt_cic_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n-- ,       pack_whse_qty\n,       pack_retail_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       WHSE_CD\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       DIV_PROMO_GRP_CD\n,       VEND_NBR\n,       VEND_SUB_ACCT_NBR\n,       loc_retail_sect_id\n,       BUYER_NBR\n,       unit_prc_tbl_nbr\n,       price_area_id\n,       cost_area_id\n,       buyer_nm\n,       vend_nm\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n,       offer_id\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\n,       adplan_flag\n,       up_mult_factor\n,       up_label_unit\n,       pending_cost\n,       pending_cost_date\n-- ARIS: 20190213: removed the following columns.  These will be calculated later at price area level\n--,       hist_reg_rtl_prc\n--,       hist_reg_rtl_prc_fctr\n--,       hist_last_eff_dt\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost\n)\nSELECT  tmp.division_id\n,       tmp.store_id\n,       tmp.genrt_cic_id\n,       tmp.corp_item_cd\n,       tmp.cic_dsc\n,       tmp.group_id\n,       tmp.category_id\n,       tmp.vend_conv_fctr\n-- ,       tmp.pack_whse_qty\n,       tmp.pack_retail_qty\n,       tmp.pack_dsc\n,       tmp.size_dsc\n,       tmp.dst_cntr\n,       tmp.cic_vend_cst\n,       tmp.corporation_id\n,       tmp.WHSE_CD\n,       tmp.status_dst\n,       tmp.cic_ib_cst\n,       tmp.item_type_cd\n--,       tmp.rog_id\n,       tmp.rog_cd\n,       tmp.retail_status_cd\n,       tmp.loc_common_retail_cd\n,       tmp.upc_id\n,       tmp.snstv_tier_cd\n,       tmp.DIV_PROMO_GRP_CD\n,       tmp.VEND_NBR\n,       tmp.VEND_SUB_ACCT_NBR\n,       tmp.loc_retail_sect_id\n,       tmp.BUYER_NBR\n,       tmp.unit_prc_tbl_nbr\n,       spa.price_area_cd\n,       vca.COST_AREA_CD\n,       buy.buyer_nm\n,       ven.VENDOR_NM\n,       reg.ITEM_PRICE_AMT\n,       reg.ITEM_PRICE_FCTR\n,       cpn.offer_id\n,       cpn.coupon_amt\n,       cpn.promo_method_cd\n,       cpn.promo_min_purch_qty\n,       cpn.promo_lim_qty\n,       cpn.promo_prc\n,       cpn.promo_prc_fctr\n,       cpn.first_eff_dt\n,       cpn.last_eff_dt\n,       prtl.first_eff_dt AS prtl_first_eff_dt\n,       prtl.reg_rtl_prc  AS prtl_reg_rtl_prc\n,       prtl.reg_rtl_prc_fctr   AS prtl_reg_rtl_prc_fctr\n,       CASE WHEN adp.store_id IS NULL THEN ' ' ELSE 'Y' END AS adplan_flag\n,       uni.UNIT_PRICE_MULTIPLICATION_FCTR  AS up_mult_factor\n,       uni.UNIT_PRICE_LABEL_UNIT_CD  AS up_label_unit\n,       COALESCE(dcst.cost_vend, wcst.cost_vend) AS pending_cost\n,       COALESCE(dcst.date_eff, wcst.date_eff) AS pending_cost_date\n-- ARIS: 20190213: removed the following columns.  These will be calculated later at price area level\n--,       hrtl.reg_rtl_prc AS hist_reg_rtl_prc\n--,       hrtl.reg_rtl_prc_fctr AS hist_reg_rtl_prc_fctr\n--,       hrtl.last_eff_dt AS hist_last_eff_dt\n,       alw.alw_typ\n,       alw.arrival_from_date\n,       alw.arrival_to_date\n,       alw.allow_amt\n,       alw.amt_in_cost\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_item_attr_1 tmp\nINNER   JOIN (\nSELECT  DISTINCT rsspa.facility_integration_id\n,       rs.facility_nbr\n,       rsspa.section_cd\n,       rsspa.price_area_cd ,       rs.rog_ID\nFROM    EDM_VIEWS_PRD.dw_views.RETAIL_STORE_SECTION_PRICE_AREA rsspa\nINNER   JOIN EDM_VIEWS_PRD.dw_views.retail_store rs\nON      rs.facility_integration_id = rsspa.facility_integration_id\ninner join EDM_VIEWS_PRD.dw_views.Retail_Order_Group rog\non rs.rog_ID=rog.rog_ID\n\nWHERE   rsspa.dw_current_version_ind = TRUE\nAND     rsspa.dw_logical_delete_ind = false AND     rs.dw_current_version_ind = TRUE\nAND     rs.dw_logical_delete_ind = false\n\nand  rsspa.dw_last_effective_dt = '9999-12-31'::DATE\nand rog.dw_current_version_ind = TRUE\nAND rog.DW_LOGICAL_DELETE_IND = FALSE\n) spa\nON     try_to_number(spa.section_cd) = tmp.loc_retail_sect_id\nAND   spa.facility_nbr = tmp.store_id\n\nINNER   JOIN (\nSelect Distinct  vc.Cost_area_cd , F.Facility_nbr,vc.VENDOR_ID ,vc.VENDOR_SUB_ACCOUNT_ID,vc.ON_HOLD_IND\nFrom edm_views_prd.dw_views.VENDOR_COST_AREA_FACILITY vc\nInner join EDM_VIEWS_PRD.DW_VIEWS.FACILITY AS F\nON F.FACILITY_INTEGRATION_ID = VC.FACILITY_INTEGRATION_ID\nAND     vc.DW_CURRENT_VERSION_IND = TRUE\nAND     vc.DW_LOGICAL_DELETE_IND = FALSE\nAND     F.DW_CURRENT_VERSION_IND = TRUE\nAND     F.DW_LOGICAL_DELETE_IND = FALSE\n)vca\nON      vca.VENDOR_ID = tmp.vend_nbr\nand     vca.VENDOR_SUB_ACCOUNT_ID = tmp.vend_sub_acct_nbr\nAND     vca.FACILITY_NBR = tmp.store_id\n-- ARIS: 20190213: added cost_area_id to the join conditions\nAND     vca.COST_AREA_CD = tmp.cost_area_id\nAND     vca.ON_HOLD_IND &lt;&gt; 'H'\n\nINNER   JOIN (\nSELECT DISTINCT\nbuyer_id,\nbuyer_nm\nFROM\nEDM_VIEWS_PRD.DW_VIEWS.BUYER\nwhere     dw_current_version_ind = TRUE\nAND     DW_LOGICAL_DELETE_IND = FALSE\n) buy\nON      buy.buyer_id = tmp.buyer_nbr\n\nINNER   JOIN (\nSELECT DISTINCT\nVM.VENDOR_ID as vend_nbr,\nVO.CORPORATION_ID as corporation_id,\nVM.VENDOR_NM as VENDOR_NM FROM\nEDM_VIEWS_PRD.DW_VIEWS.VENDOR_MASTER VM\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.VW_VENDOR_OUTLET VO\nON VM.VENDOR_ID = VO.VENDOR_ID\nAND VO.DW_LOGICAL_DELETE_IND = FALSE\nAND VO.DW_CURRENT_VERSION_IND = TRUE\nAND VM.DW_LOGICAL_DELETE_IND = FALSE\nAND VM.DW_CURRENT_VERSION_IND = TRUE\n) ven\nON      ven.vend_nbr = tmp.vend_nbr\nAND     ven.corporation_id = tmp.corporation_id\n\nLEFT    OUTER JOIN (\nselect distinct f.FACILITY_NBR as FACILITY_NBR,\nrs.ITEM_PRICE_AMT as ITEM_PRICE_AMT,\nrs.ITEM_PRICE_FCTR as ITEM_PRICE_FCTR,\nrs.UPC_NBR as UPC_NBR,\nrs.DW_FIRST_EFFECTIVE_DT as DW_FIRST_EFFECTIVE_DT,\nrs.DW_LAST_EFFECTIVE_DT as DW_LAST_EFFECTIVE_DT\nfrom EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE_UPC_PRICE rs\njoin EDM_VIEWS_PRD.DW_VIEWS.facility f on\nrs.FACILITY_INTEGRATION_ID=f.FACILITY_INTEGRATION_ID\nand\nrs.DW_LOGICAL_DELETE_IND = FALSE\nAND     rs.DW_CURRENT_VERSION_IND = TRUE\nand\nf.DW_LOGICAL_DELETE_IND = FALSE\nAND     f.DW_CURRENT_VERSION_IND = TRUE\n)  reg ON      reg.FACILITY_NBR = tmp.store_id\nAND reg.UPC_NBR   = tmp.upc_id\nAND     CURRENT_DATE BETWEEN reg.DW_FIRST_EFFECTIVE_DT AND reg.DW_LAST_EFFECTIVE_DT\n\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_cpn_adplan_all cpn\nON      cpn.store_id = tmp.store_id\nAND     cpn.upc_id = tmp.upc_id\nAND     cpn.offer_type_cd IN ('ECP', 'PCP')\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_reg_rtl prtl\nON      prtl.store_id = tmp.store_id\nAND     prtl.upc_id   = tmp.upc_id\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_cpn_adplan_all adp\nON      adp.store_id = tmp.store_id\nAND     adp.upc_id = tmp.upc_id\nAND     adp.offer_type_cd IN ('AD', 'LTS')\n\nLEFT    OUTER JOIN (\nSELECT DISTINCT UNIT_PRICE_TABLE_NBR,\nUNIT_PRICE_MULTIPLICATION_FCTR ,\nUNIT_PRICE_LABEL_UNIT_CD\nFROM EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP_UPC\nwhere dw_current_version_ind = TRUE\nand DW_LOGICAL_DELETE_IND = FALSE\n) uni\nON      uni.UNIT_PRICE_TABLE_NBR = tmp.unit_prc_tbl_nbr\n\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_dsd_cost dcst\nON      dcst.corp_item_cd  = tmp.corp_item_cd\nAND     dcst.vend_nbr      = tmp.vend_nbr\nAND     dcst.vend_sub_acct_nbr = tmp.vend_sub_acct_nbr\n-- ARIS: 20190213: change join from vca.cost_area_id to tmp.cost_area_id\nAND     dcst.cost_area_id = tmp.cost_area_id\nAND     dcst.division_id = tmp.division_id\n\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_pending_whse_cost wcst\nON      wcst.dst_cntr = tmp.dst_cntr\nAND     wcst.corp_item_cd = tmp.corp_item_cd\n-- ARIS: 20190213: removed the following table\n--LEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl hrtl\n--ON      hrtl.store_id = tmp.store_id\n--AND     hrtl.upc_id   = tmp.upc_id\n\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_alw_final alw\nON      alw.corp = tmp.corporation_id\nAND     alw.facility = tmp.whse_cd\nAND     alw.corp_item_cd = tmp.corp_item_cd\nAND     alw.rog = tmp.rog_cd\nAND     alw.price_area_id = spa.price_area_cd\nAND     alw.vend_num = tmp.vend_nbr\nAND     alw.vend_sub_acnt = tmp.vend_sub_acct_nbr\n-- ARIS: 20190213: change join from vca.cost_area_id to tmp.cost_area_id\nAND     alw.cost_area = tmp.cost_area_id\n--jyoti:20190306-exclusion\nWHERE --exclusion for seattle\nNOT(tmp.division_id=27 AND tmp.rog_cd='SSEA' AND spa.price_area_cd=46)\nAND NOT(tmp.division_id=27 AND tmp.rog_cd='SACG' AND spa.price_area_cd=9)\n-- exclusion for denever\nAND NOT(tmp.division_id=5 AND tmp.rog_cd ='SDEN' AND spa.price_area_cd in (3,14))\n-- exclusion for shaws\nAND NOT(tmp.division_id=33 AND tmp.rog_cd ='SEAS' AND spa.price_area_cd=1)\n-- exclusion for Southern\nAND NOT(tmp.division_id=20 AND tmp.rog_cd ='ADAL' AND spa.price_area_cd=6)\n-- exclusion for Eastern\nAND NOT(tmp.division_id=35 AND tmp.rog_cd ='SEAS' AND spa.price_area_cd=1)\n-- exclusion for Portland\nAND NOT(tmp.division_id=19 AND tmp.rog_cd ='SPRT' AND spa.price_area_cd in (61));\n</code></pre>"},{"location":"pricing_execution/#step-31","title":"Step 31","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_whse_item_attr_2;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-32","title":"Step 32","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_whse_item_attr_2 (\ndivision_id INTEGER,\nstore_id INTEGER,\ngenrt_cic_id DECIMAL(12,0),\ncorp_item_cd DECIMAL(8,0),\ncic_dsc VARCHAR(40)  COLLATE 'en-ci' ,\ngroup_id SMALLINT,\ncategory_id SMALLINT,\nvend_conv_fctr SMALLINT,\n-- pack_whse_qty DECIMAL(7,2),\npack_retail_qty DECIMAL(7,2),\npack_dsc CHAR(30)  COLLATE 'en-ci' ,\nsize_dsc CHAR(30)  COLLATE 'en-ci' ,\ndst_cntr VARCHAR(4)  COLLATE 'en-ci' ,\ncic_vend_cst DECIMAL(9,4),\ncorporation_id BYTEINT,\nWHSE_CD VARCHAR(4)  COLLATE 'en-ci' ,\nstatus_dst CHAR(1)  COLLATE 'en-ci' ,\ncic_ib_cst DECIMAL(9,4),\nitem_type_cd DECIMAL(3,0),\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nretail_status_cd CHAR(1)  COLLATE 'en-ci' ,\nloc_common_retail_cd DECIMAL(5,0),\nupc_id DECIMAL(13,0),\nsnstv_tier_cd CHAR(1)  COLLATE 'en-ci' ,\nDIV_PROMO_GRP_CD INTEGER,\nVEND_NBR VARCHAR(6)  COLLATE 'en-ci' ,\nVEND_SUB_ACCT_NBR VARCHAR(3)  COLLATE 'en-ci' ,\nloc_retail_sect_id INTEGER,\nBUYER_NBR CHAR(2)  COLLATE 'en-ci' ,\nunit_prc_tbl_nbr SMALLINT,\nprice_area_id INTEGER,\ncost_area_id SMALLINT,\nbuyer_nm CHAR(20)  COLLATE 'en-ci' ,\nvend_nm CHAR(40)  COLLATE 'en-ci' ,\nreg_rtl_prc DECIMAL(7,2),\nreg_rtl_prc_fctr DECIMAL(2,0),\noffer_id DECIMAL(13,0),\nCOUPON_AMT DECIMAL(8,2),\npromo_method_cd CHAR(2)  COLLATE 'en-ci' ,\npromo_min_purch_qty DECIMAL(2,0),\npromo_lim_qty SMALLINT,\npromo_prc DECIMAL(7,2),\npromo_prc_fctr DECIMAL(2,0),\nfirst_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nlast_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_first_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_reg_rtl_prc DECIMAL(7,2),\nprtl_reg_rtl_prc_fctr DECIMAL(2,0),\nadplan_flag VARCHAR(1)  COLLATE 'en-ci' ,\nup_mult_factor DECIMAL(7,3),\nup_label_unit VARCHAR(5)  COLLATE 'en-ci' ,\npending_cost DECIMAL(9,4),\npending_cost_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n-- ARIS: 20190213: removed the following columns.  These will be calculated later at price area level\n--      hist_reg_rtl_prc DECIMAL(7,2),\n--      hist_reg_rtl_prc_fctr DECIMAL(2,0),\n--      hist_last_eff_dt DATE FORMAT 'YY/MM/DD',\nalw_typ VARCHAR(1)  COLLATE 'en-ci' ,\narrival_from_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\narrival_to_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nallow_amt DECIMAL(11,4),\namt_in_cost DECIMAL(11,4));\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-33","title":"Step 33","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_whse_item_attr_2\n(       division_id\n,       store_id\n,       genrt_cic_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n-- ,       pack_whse_qty\n,       pack_retail_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       WHSE_CD\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n--,       rog_id\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       DIV_PROMO_GRP_CD\n,       VEND_NBR\n,       VEND_SUB_ACCT_NBR\n,       loc_retail_sect_id\n,       BUYER_NBR\n,       unit_prc_tbl_nbr\n,       price_area_id\n,       cost_area_id\n,       buyer_nm\n,       vend_nm\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n,       offer_id\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\n,       adplan_flag\n,       up_mult_factor\n,       up_label_unit\n,       pending_cost\n,       pending_cost_date\n-- ARIS: 20190213: removed the following columns.  These will be calculated later at price area level\n--,       hist_reg_rtl_prc\n--,       hist_reg_rtl_prc_fctr\n--,       hist_last_eff_dt\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost\n)\nSELECT  tmp.division_id\n,       tmp.store_id\n,       tmp.genrt_cic_id\n,       tmp.corp_item_cd\n,       tmp.cic_dsc\n,       tmp.group_id\n,       tmp.category_id\n,       tmp.vend_conv_fctr\n-- ,       tmp.pack_whse_qty\n,       tmp.pack_retail_qty\n,       tmp.pack_dsc\n,       tmp.size_dsc\n,       tmp.dst_cntr\n,       tmp.cic_vend_cst\n,       tmp.corporation_id\n,       tmp.WHSE_CD\n,       tmp.status_dst\n,       tmp.cic_ib_cst\n,       tmp.item_type_cd\n//,       tmp.rog_id ,       tmp.rog_cd ,       tmp.retail_status_cd\n,       tmp.loc_common_retail_cd\n,       tmp.upc_id\n,       tmp.snstv_tier_cd\n,       tmp.DIV_PROMO_GRP_CD\n,       tmp.VEND_NBR\n,       tmp.VEND_SUB_ACCT_NBR\n,       tmp.loc_retail_sect_id\n,       tmp.BUYER_NBR\n,       tmp.unit_prc_tbl_nbr\n,       spa.price_area_cd\n,       0 ::SMALLINT AS cost_area_id\n,       buy.buyer_nm\n,       ven.VENDOR_NM\n,       reg.ITEM_PRICE_AMT\n,       reg.ITEM_PRICE_FCTR\n,       cpn.offer_id\n,       cpn.coupon_amt\n,       cpn.promo_method_cd\n,       cpn.promo_min_purch_qty\n,       cpn.promo_lim_qty\n,       cpn.promo_prc\n,       cpn.promo_prc_fctr\n,       cpn.first_eff_dt\n,       cpn.last_eff_dt\n,       prtl.first_eff_dt AS prtl_first_eff_dt\n,       prtl.reg_rtl_prc  AS prtl_reg_rtl_prc\n,       prtl.reg_rtl_prc_fctr   AS prtl_reg_rtl_prc_fctr\n,       CASE WHEN adp.store_id IS NULL THEN ' ' ELSE 'Y' END AS adplan_flag\n,       uni.UNIT_PRC_MULT_FCTR  AS up_mult_factor\n,       uni.UNIT_PRC_LABEL_DSC  AS up_label_unit\n,       wcst.cost_vend AS pending_cost\n,       wcst.date_eff AS pending_cost_date\n-- ARIS: 20190213: removed the following columns.  These will be calculated later at price area level\n--,       hrtl.reg_rtl_prc AS hist_reg_rtl_prc\n--,       hrtl.reg_rtl_prc_fctr AS hist_reg_rtl_prc_fctr\n--,       hrtl.last_eff_dt AS hist_last_eff_dt\n,       alw.alw_typ\n,       alw.arrival_from_date\n,       alw.arrival_to_date\n,       alw.allow_amt\n,       alw.amt_in_cost\nFROM   EDM_SANDBOX_PRD.MERCHAPPS.T_PE_WHSE_ITEM_ATTR_1  tmp\nINNER   JOIN (\nSELECT  rsspa.facility_integration_id\n,       rs.facility_nbr\n,       rsspa.section_cd\n,       rsspa.price_area_cd\n,       rs.rog_ID\nFROM    EDM_VIEWS_PRD.dw_views.RETAIL_STORE_SECTION_PRICE_AREA rsspa\nINNER   JOIN EDM_VIEWS_PRD.dw_views.retail_store rs\nON      rs.facility_integration_id = rsspa.facility_integration_id\ninner join EDM_VIEWS_PRD.dw_views.Retail_Order_Group rog\non rs.rog_ID=rog.rog_ID\n\nWHERE   rsspa.dw_current_version_ind = TRUE\nAND     rsspa.dw_logical_delete_ind = false and     rs.dw_logical_delete_ind = false AND     rs.dw_current_version_ind = TRUE\n\nand  rsspa.dw_last_effective_dt = '9999-12-31'::DATE\nand rog.dw_current_version_ind = TRUE\nAND     rog.DW_LOGICAL_DELETE_IND = FALSE\n) spa\nON     try_to_number(spa.section_cd) = tmp.loc_retail_sect_id\nAND   spa.facility_nbr = tmp.store_id\nINNER   JOIN (\nSELECT DISTINCT\nbuyer_id,\nbuyer_nm\nFROM\nEDM_VIEWS_PRD.DW_VIEWS.BUYER\nwhere     dw_current_version_ind = TRUE\nAND     DW_LOGICAL_DELETE_IND = FALSE\n) buy\nON      buy.buyer_id = tmp.buyer_nbr\n\nINNER   JOIN (\nSELECT DISTINCT\nVM.VENDOR_ID as vend_nbr,\nVO.CORPORATION_ID as corporation_id,\nVM.VENDOR_NM as VENDOR_NM FROM\nEDM_VIEWS_PRD.DW_VIEWS.VENDOR_MASTER VM\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.VW_VENDOR_OUTLET VO\nON VM.VENDOR_ID = VO.VENDOR_ID\nAND VO.DW_LOGICAL_DELETE_IND = FALSE\nAND VO.DW_CURRENT_VERSION_IND = TRUE\nAND VM.DW_LOGICAL_DELETE_IND = FALSE\nAND VM.DW_CURRENT_VERSION_IND = TRUE\nAND VO.CORPORATION_ID = 1\n) ven\nON      ven.vend_nbr = tmp.vend_nbr\nAND     ven.corporation_id = tmp.corporation_id\n\nLEFT    OUTER JOIN (\nselect distinct f.FACILITY_NBR as FACILITY_NBR,\nrs.ITEM_PRICE_AMT as ITEM_PRICE_AMT,\nrs.ITEM_PRICE_FCTR as ITEM_PRICE_FCTR,\nrs.UPC_NBR as UPC_NBR,\nrs.DW_FIRST_EFFECTIVE_DT as DW_FIRST_EFFECTIVE_DT,\nrs.DW_LAST_EFFECTIVE_DT as DW_LAST_EFFECTIVE_DT\nfrom EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE_UPC_PRICE rs\njoin EDM_VIEWS_PRD.DW_VIEWS.facility f on\nrs.FACILITY_INTEGRATION_ID=f.FACILITY_INTEGRATION_ID\nand\nrs.DW_LOGICAL_DELETE_IND = FALSE\nAND     rs.DW_CURRENT_VERSION_IND = TRUE\nand\nf.DW_LOGICAL_DELETE_IND = FALSE\nAND     f.DW_CURRENT_VERSION_IND = TRUE\n)  reg ON      reg.FACILITY_NBR = tmp.store_id\nAND reg.UPC_NBR   = tmp.upc_id\nAND     CURRENT_DATE BETWEEN reg.DW_FIRST_EFFECTIVE_DT AND reg.DW_LAST_EFFECTIVE_DT\n\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.T_PE_CPN_ADPLAN_ALL cpn\nON      cpn.store_id = tmp.store_id\nAND     cpn.upc_id = tmp.upc_id\n\nAND     cpn.offer_type_cd IN ('ECP', 'PCP')\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.T_PE_PENDING_REG_RTL prtl\nON      prtl.store_id = tmp.store_id\nAND     prtl.upc_id   = tmp.upc_id\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.T_PE_CPN_ADPLAN_ALL adp\nON      adp.store_id = tmp.store_id\nAND     adp.upc_id = tmp.upc_id\nAND     adp.offer_type_cd IN ('AD', 'LTS')\nLEFT    OUTER JOIN (\nSELECT DISTINCT UNIT_PRICE_TABLE_NBR AS UNIT_PRC_ID,\nUNIT_PRICE_MULTIPLICATION_FCTR AS UNIT_PRC_MULT_FCTR,\nUNIT_PRICE_LABEL_UNIT_CD AS UNIT_PRC_LABEL_DSC\nFROM EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP_UPC\nwhere dw_current_version_ind = TRUE\nand DW_LOGICAL_DELETE_IND = FALSE\n) uni\nON      uni.UNIT_PRC_ID = tmp.unit_prc_tbl_nbr\n\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.T_PE_PENDING_WHSE_COST wcst\nON      wcst.dst_cntr = tmp.dst_cntr\nAND     wcst.corp_item_cd = tmp.corp_item_cd\n-- ARIS: 20190213: removed the following table\n--LEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl hrtl\n--ON      hrtl.store_id = tmp.store_id\n--AND     hrtl.upc_id   = tmp.upc_id\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.T_PE_ALW_FINAL alw\nON      alw.corp = tmp.corporation_id\nAND     alw.facility = tmp.whse_cd\nAND     alw.corp_item_cd = tmp.corp_item_cd\nAND     alw.rog = tmp.rog_cd\nAND     alw.price_area_id = spa.price_area_cd\nAND     alw.vend_num = tmp.vend_nbr\nAND     alw.vend_sub_acnt = tmp.vend_sub_acct_nbr\nAND     alw.cost_area = 0\n--jyoti-20190306-exclusion\nWHERE NOT(tmp.division_id=27 AND tmp.rog_cd='SSEA' AND spa.price_area_cd=46)\nAND NOT(tmp.division_id=27 AND tmp.rog_cd='SACG' AND spa.price_area_cd=9)\n-- exclusion for denever\nAND NOT(tmp.division_id=5 AND tmp.rog_cd ='SDEN' AND spa.price_area_cd in (3,14))\n-- exclusion for shaws\nAND NOT(tmp.division_id=33 AND tmp.rog_cd ='SEAS' AND spa.price_area_cd=1)\n-- exclusion for Southern\nAND NOT(tmp.division_id=20 AND tmp.rog_cd ='ADAL' AND spa.price_area_cd=6)\n-- exclusion for Eastern\nAND NOT(tmp.division_id=35 AND tmp.rog_cd ='SEAS' AND spa.price_area_cd=1)\n-- exclusion for Portland\nAND NOT(tmp.division_id=19 AND tmp.rog_cd ='SPRT' AND spa.price_area_cd in (61))\n</code></pre>"},{"location":"pricing_execution/#step-34","title":"Step 34","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl_pa;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-35","title":"Step 35","text":"<pre><code>CREATE or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl_pa (\ndivision_id INTEGER,\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nprice_area_id INTEGER,\nupc_id DECIMAL(13,0),\nhist_reg_rtl_prc DECIMAL(7,2),\nhist_reg_rtl_prc_fctr DECIMAL(2,0),\nhist_last_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}') COMMENT = '{\"multiset\": true}' ;\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_MULTISET_OPTION - Remove MULTISET create table option\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n-- T_CREATE_TABLE_META - Add table metadata to table comment\n</code></pre>"},{"location":"pricing_execution/#step-36","title":"Step 36","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl_pa\n(       division_id\n--,       rog_id\n,       rog_cd\n,       price_area_id\n,       upc_id\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\n)\nSELECT  division_id\n--,       rog_id\n,       rog_cd\n,       price_area_id\n,       upc_id\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\nFROM    (\nSELECT  dt.division_id\n--,       dt.rog_id\n,       dt.rog_cd\n,       dt.price_area_id\n,       dt.upc_id\n,       rtl.reg_rtl_prc AS hist_reg_rtl_prc\n,       rtl.reg_rtl_prc_fctr AS hist_reg_rtl_prc_fctr\n,       rtl.last_eff_dt AS hist_last_eff_dt\n,       COUNT(DISTINCT dt.store_id) AS store_count\nFROM    (\nSELECT  division_id\n--,       rog_id\n,       rog_cd\n,       store_id\n,       price_area_id\n,       upc_id\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_item_attr_2\nGROUP   BY division_id\n--,       rog_id\n,       rog_cd\n,       store_id\n,       price_area_id\n,       upc_id\nUNION\nSELECT  division_id\n--,       rog_id\n,       rog_cd\n,       store_id\n,       price_area_id\n,       upc_id\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_whse_item_attr_2\nGROUP   BY division_id\n--,       rog_id\n,       rog_cd\n,       store_id\n,       price_area_id\n,       upc_id\n) dt\nINNER   JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl rtl\nON      rtl.store_id = dt.store_id\nAND     rtl.upc_id = dt.upc_id\nGROUP   BY 1,2,3,4,5,6,7\n) dt1\nQUALIFY ROW_NUMBER() OVER (PARTITION BY division_id, rog_cd, price_area_id, upc_id ORDER BY hist_last_eff_dt DESC, store_count DESC, hist_reg_rtl_prc ASC) = 1;\n</code></pre>"},{"location":"pricing_execution/#step-37","title":"Step 37","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_3;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-38","title":"Step 38","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_3 (\ndivision_id INTEGER,\nstore_id INTEGER,\ncorp_item_cd DECIMAL(8,0),\ncic_dsc VARCHAR(40)  COLLATE 'en-ci' ,\ngroup_id SMALLINT,\ncategory_id SMALLINT,\nvend_conv_fctr SMALLINT,\npack_retail_qty DECIMAL(7,2),\n-- pack_whse_qty DECIMAL(7,2),\npack_dsc CHAR(30)  COLLATE 'en-ci' ,\nsize_dsc CHAR(30)  COLLATE 'en-ci' ,\ndst_cntr VARCHAR(4)  COLLATE 'en-ci' ,\ncic_vend_cst DECIMAL(9,4),\ncorporation_id BYTEINT,\nWHSE_CD VARCHAR(4)  COLLATE 'en-ci' ,\nstatus_dst CHAR(1)  COLLATE 'en-ci' ,\ncic_ib_cst DECIMAL(9,4),\nitem_type_cd DECIMAL(3,0),\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nretail_status_cd CHAR(1)  COLLATE 'en-ci' ,\nloc_common_retail_cd DECIMAL(5,0),\nupc_id DECIMAL(13,0),\nsnstv_tier_cd CHAR(1)  COLLATE 'en-ci' ,\nDIV_PROMO_GRP_CD INTEGER,\nVEND_NBR VARCHAR(6)  COLLATE 'en-ci' ,\nVEND_SUB_ACCT_NBR VARCHAR(3)  COLLATE 'en-ci' ,\nloc_retail_sect_id INTEGER,\nBUYER_NBR CHAR(2)  COLLATE 'en-ci' ,\nunit_prc_tbl_nbr SMALLINT,\nprice_area_id INTEGER,\ncost_area_id SMALLINT,\nbuyer_nm CHAR(20)  COLLATE 'en-ci' ,\nvend_nm CHAR(40)  COLLATE 'en-ci' ,\nreg_rtl_prc DECIMAL(7,2),\nreg_rtl_prc_fctr DECIMAL(2,0),\noffer_id DECIMAL(13,0),\nCOUPON_AMT DECIMAL(8,2),\npromo_method_cd CHAR(2)  COLLATE 'en-ci' ,\npromo_min_purch_qty DECIMAL(2,0),\npromo_lim_qty SMALLINT,\npromo_prc DECIMAL(7,2),\npromo_prc_fctr DECIMAL(2,0),\nfirst_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nlast_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_first_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_reg_rtl_prc DECIMAL(7,2),\nprtl_reg_rtl_prc_fctr DECIMAL(2,0),\nadplan_flag VARCHAR(1)  COLLATE 'en-ci' ,\nup_mult_factor DECIMAL(7,3),\nup_label_unit VARCHAR(5)  COLLATE 'en-ci' ,\npending_cost DECIMAL(9,4),\npending_cost_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nhist_reg_rtl_prc DECIMAL(7,2),\nhist_reg_rtl_prc_fctr DECIMAL(2,0),\nhist_last_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nalw_typ VARCHAR(1)  COLLATE 'en-ci' ,\narrival_from_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\narrival_to_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nallow_amt DECIMAL(11,4),\namt_in_cost DECIMAL(11,4));\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-39","title":"Step 39","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_3\n(       division_id\n,       store_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n,       pack_retail_qty\n-- ,       pack_whse_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       WHSE_CD\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n--,       rog_id\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       DIV_PROMO_GRP_CD\n,       VEND_NBR\n,       VEND_SUB_ACCT_NBR\n,       loc_retail_sect_id\n,       BUYER_NBR\n,       unit_prc_tbl_nbr\n,       price_area_id\n,       cost_area_id\n,       buyer_nm\n,       vend_nm\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n,       offer_id\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\n,       adplan_flag\n,       up_mult_factor\n,       up_label_unit\n,       pending_cost\n,       pending_cost_date\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost\n)\nSELECT  tmp.division_id\n,       tmp.store_id\n,       tmp.corp_item_cd\n,       tmp.cic_dsc\n,       tmp.group_id\n,       tmp.category_id\n,       tmp.vend_conv_fctr\n,       tmp.pack_retail_qty\n-- ,       tmp.pack_whse_qty\n,       tmp.pack_dsc\n,       tmp.size_dsc\n,       tmp.dst_cntr\n,       tmp.cic_vend_cst\n,       tmp.corporation_id\n,       tmp.whse_cd\n,       tmp.status_dst\n,       tmp.cic_ib_cst\n,       tmp.item_type_cd\n--,       tmp.rog_id\n,       tmp.rog_cd\n,       tmp.retail_status_cd\n,       tmp.loc_common_retail_cd\n,       tmp.upc_id\n,       tmp.snstv_tier_cd\n,       tmp.div_promo_grp_cd\n,       tmp.vend_nbr\n,       tmp.vend_sub_acct_nbr\n,       tmp.loc_retail_sect_id\n,       tmp.buyer_nbr\n,       tmp.unit_prc_tbl_nbr\n,       tmp.price_area_id\n,       tmp.cost_area_id\n,       tmp.buyer_nm\n,       tmp.vend_nm\n,       tmp.reg_rtl_prc\n,       tmp.reg_rtl_prc_fctr\n,       tmp.offer_id\n,       tmp.COUPON_AMT\n,       tmp.promo_method_cd\n,       tmp.promo_min_purch_qty\n,       tmp.promo_lim_qty\n,       tmp.promo_prc\n,       tmp.promo_prc_fctr\n,       tmp.first_eff_dt\n,       tmp.last_eff_dt\n,       tmp.prtl_first_eff_dt\n,       tmp.prtl_reg_rtl_prc\n,       tmp.prtl_reg_rtl_prc_fctr\n,       tmp.adplan_flag\n,       tmp.up_mult_factor\n,       tmp.up_label_unit\n,       tmp.pending_cost\n,       tmp.pending_cost_date\n,       reg.hist_reg_rtl_prc\n,       reg.hist_reg_rtl_prc_fctr\n,       reg.hist_last_eff_dt\n,       tmp.alw_typ\n,       tmp.arrival_from_date\n,       tmp.arrival_to_date\n,       tmp.allow_amt\n,       tmp.amt_in_cost\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_item_attr_2 tmp\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl_pa reg\nON      reg.rog_cd = tmp.rog_cd\nAND      reg.price_area_id = tmp.price_area_id\nAND     reg.upc_id = tmp.upc_id\nGROUP   BY tmp.division_id\n,       tmp.store_id\n,       tmp.corp_item_cd\n,       tmp.cic_dsc\n,       tmp.group_id\n,       tmp.category_id\n,       tmp.vend_conv_fctr\n,       tmp.pack_retail_qty\n-- ,       tmp.pack_whse_qty\n,       tmp.pack_dsc\n,       tmp.size_dsc\n,       tmp.dst_cntr\n,       tmp.cic_vend_cst\n,       tmp.corporation_id\n,       tmp.whse_cd\n,       tmp.status_dst\n,       tmp.cic_ib_cst\n,       tmp.item_type_cd\n--,       tmp.rog_id\n,       tmp.rog_cd\n,       tmp.retail_status_cd\n,       tmp.loc_common_retail_cd\n,       tmp.upc_id\n,       tmp.snstv_tier_cd\n,       tmp.div_promo_grp_cd\n,       tmp.vend_nbr\n,       tmp.vend_sub_acct_nbr\n,       tmp.loc_retail_sect_id\n,       tmp.buyer_nbr\n,       tmp.unit_prc_tbl_nbr\n,       tmp.price_area_id\n,       tmp.cost_area_id\n,       tmp.buyer_nm\n,       tmp.vend_nm\n,       tmp.reg_rtl_prc\n,       tmp.reg_rtl_prc_fctr\n,       tmp.offer_id\n,       tmp.COUPON_AMT\n,       tmp.promo_method_cd\n,       tmp.promo_min_purch_qty\n,       tmp.promo_lim_qty\n,       tmp.promo_prc\n,       tmp.promo_prc_fctr\n,       tmp.first_eff_dt\n,       tmp.last_eff_dt\n,       tmp.prtl_first_eff_dt\n,       tmp.prtl_reg_rtl_prc\n,       tmp.prtl_reg_rtl_prc_fctr\n,       tmp.adplan_flag\n,       tmp.up_mult_factor\n,       tmp.up_label_unit\n,       tmp.pending_cost\n,       tmp.pending_cost_date\n,       reg.hist_reg_rtl_prc\n,       reg.hist_reg_rtl_prc_fctr\n,       reg.hist_last_eff_dt\n,       tmp.alw_typ\n,       tmp.arrival_from_date\n,       tmp.arrival_to_date\n,       tmp.allow_amt\n,       tmp.amt_in_cost\n\nUNION ALL\n\nSELECT  tmp.division_id\n,       tmp.store_id\n,       tmp.corp_item_cd\n,       tmp.cic_dsc\n,       tmp.group_id\n,       tmp.category_id\n,       tmp.vend_conv_fctr\n,       tmp.pack_retail_qty\n-- ,       tmp.pack_whse_qty\n,       tmp.pack_dsc\n,       tmp.size_dsc\n,       tmp.dst_cntr\n,       tmp.cic_vend_cst\n,       tmp.corporation_id\n,       tmp.whse_cd\n,       tmp.status_dst\n,       tmp.cic_ib_cst\n,       tmp.item_type_cd\n--,       tmp.rog_id\n,       tmp.rog_cd\n,       tmp.retail_status_cd\n,       tmp.loc_common_retail_cd\n,       tmp.upc_id\n,       tmp.snstv_tier_cd\n,       tmp.div_promo_grp_cd\n,       tmp.vend_nbr\n,       tmp.vend_sub_acct_nbr\n,       tmp.loc_retail_sect_id\n,       tmp.buyer_nbr\n,       tmp.unit_prc_tbl_nbr\n,       tmp.price_area_id\n,       tmp.cost_area_id\n,       tmp.buyer_nm\n,       tmp.vend_nm\n,       tmp.reg_rtl_prc\n,       tmp.reg_rtl_prc_fctr\n,       tmp.offer_id\n,       tmp.COUPON_AMT\n,       tmp.promo_method_cd\n,       tmp.promo_min_purch_qty\n,       tmp.promo_lim_qty\n,       tmp.promo_prc\n,       tmp.promo_prc_fctr\n,       tmp.first_eff_dt\n,       tmp.last_eff_dt\n,       tmp.prtl_first_eff_dt\n,       tmp.prtl_reg_rtl_prc\n,       tmp.prtl_reg_rtl_prc_fctr\n,       tmp.adplan_flag\n,       tmp.up_mult_factor\n,       tmp.up_label_unit\n,       tmp.pending_cost\n,       tmp.pending_cost_date\n,       reg.hist_reg_rtl_prc\n,       reg.hist_reg_rtl_prc_fctr\n,       reg.hist_last_eff_dt\n,       tmp.alw_typ\n,       tmp.arrival_from_date\n,       tmp.arrival_to_date\n,       tmp.allow_amt\n,       tmp.amt_in_cost\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_whse_item_attr_2 tmp\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_hist_reg_rtl_pa reg\nON      reg.rog_cd = tmp.rog_cd\nAND     reg.price_area_id = tmp.price_area_id\nAND     reg.upc_id = tmp.upc_id\nGROUP   BY tmp.division_id\n,       tmp.store_id\n,       tmp.corp_item_cd\n,       tmp.cic_dsc\n,       tmp.group_id\n,       tmp.category_id\n,       tmp.vend_conv_fctr\n,       tmp.pack_retail_qty\n-- ,       tmp.pack_whse_qty\n,       tmp.pack_dsc\n,       tmp.size_dsc\n,       tmp.dst_cntr\n,       tmp.cic_vend_cst\n,       tmp.corporation_id\n,       tmp.whse_cd\n,       tmp.status_dst\n,       tmp.cic_ib_cst\n,       tmp.item_type_cd\n--,       tmp.rog_id\n,       tmp.rog_cd\n,       tmp.retail_status_cd\n,       tmp.loc_common_retail_cd\n,       tmp.upc_id\n,       tmp.snstv_tier_cd\n,       tmp.div_promo_grp_cd\n,       tmp.vend_nbr\n,       tmp.vend_sub_acct_nbr\n,       tmp.loc_retail_sect_id\n,       tmp.buyer_nbr\n,       tmp.unit_prc_tbl_nbr\n,       tmp.price_area_id\n,       tmp.cost_area_id\n,       tmp.buyer_nm\n,       tmp.vend_nm\n,       tmp.reg_rtl_prc\n,       tmp.reg_rtl_prc_fctr\n,       tmp.offer_id\n,       tmp.COUPON_AMT\n,       tmp.promo_method_cd\n,       tmp.promo_min_purch_qty\n,       tmp.promo_lim_qty\n,       tmp.promo_prc\n,       tmp.promo_prc_fctr\n,       tmp.first_eff_dt\n,       tmp.last_eff_dt\n,       tmp.prtl_first_eff_dt\n,       tmp.prtl_reg_rtl_prc\n,       tmp.prtl_reg_rtl_prc_fctr\n,       tmp.adplan_flag\n,       tmp.up_mult_factor\n,       tmp.up_label_unit\n,       tmp.pending_cost\n,       tmp.pending_cost_date\n,       reg.hist_reg_rtl_prc\n,       reg.hist_reg_rtl_prc_fctr\n,       reg.hist_last_eff_dt\n,       tmp.alw_typ\n,       tmp.arrival_from_date\n,       tmp.arrival_to_date\n,       tmp.allow_amt\n,       tmp.amt_in_cost;\n</code></pre>"},{"location":"pricing_execution/#step-40","title":"Step 40:","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_4;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-41","title":"Step 41:","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_4 (\ndivision_id INTEGER,\ncorp_item_cd DECIMAL(8,0),\ncic_dsc VARCHAR(40)  COLLATE 'en-ci' ,\ngroup_id SMALLINT,\ncategory_id SMALLINT,\nvend_conv_fctr SMALLINT,\npack_retail_qty DECIMAL(7,2),\n-- pack_whse_qty DECIMAL(7,2),\npack_dsc CHAR(30)  COLLATE 'en-ci' ,\nsize_dsc CHAR(30)  COLLATE 'en-ci' ,\ndst_cntr VARCHAR(4)  COLLATE 'en-ci' ,\ncic_vend_cst DECIMAL(9,4),\ncorporation_id BYTEINT,\nWHSE_CD VARCHAR(4)  COLLATE 'en-ci' ,\nstatus_dst CHAR(1)  COLLATE 'en-ci' ,\ncic_ib_cst DECIMAL(9,4),\nitem_type_cd DECIMAL(3,0),\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nretail_status_cd CHAR(1)  COLLATE 'en-ci' ,\nloc_common_retail_cd DECIMAL(5,0),\nupc_id DECIMAL(13,0),\nsnstv_tier_cd CHAR(1)  COLLATE 'en-ci' ,\nDIV_PROMO_GRP_CD INTEGER,\nVEND_NBR VARCHAR(6)  COLLATE 'en-ci' ,\nVEND_SUB_ACCT_NBR VARCHAR(3)  COLLATE 'en-ci' ,\nloc_retail_sect_id INTEGER,\nBUYER_NBR CHAR(2)  COLLATE 'en-ci' ,\nunit_prc_tbl_nbr SMALLINT,\nprice_area_id INTEGER,\ncost_area_id SMALLINT,\nbuyer_nm CHAR(20)  COLLATE 'en-ci' ,\nvend_nm CHAR(40)  COLLATE 'en-ci' ,\nreg_rtl_prc DECIMAL(7,2),\nreg_rtl_prc_fctr DECIMAL(2,0),\noffer_id DECIMAL(13,0),\nCOUPON_AMT DECIMAL(8,2),\npromo_method_cd CHAR(2)  COLLATE 'en-ci' ,\npromo_min_purch_qty DECIMAL(2,0),\npromo_lim_qty SMALLINT,\npromo_prc DECIMAL(7,2),\npromo_prc_fctr DECIMAL(2,0),\nfirst_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nlast_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_first_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_reg_rtl_prc DECIMAL(7,2),\nprtl_reg_rtl_prc_fctr DECIMAL(2,0),\nadplan_flag VARCHAR(1)  COLLATE 'en-ci' ,\nup_mult_factor DECIMAL(7,3),\nup_label_unit VARCHAR(5)  COLLATE 'en-ci' ,\npending_cost DECIMAL(9,4),\npending_cost_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nhist_reg_rtl_prc DECIMAL(7,2),\nhist_reg_rtl_prc_fctr DECIMAL(2,0),\nhist_last_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nalw_typ VARCHAR(1)  COLLATE 'en-ci' ,\narrival_from_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\narrival_to_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nallow_amt DECIMAL(11,4),\namt_in_cost DECIMAL(11,4));\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-42","title":"Step 42:","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_4\n(       division_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n,       pack_retail_qty\n-- ,       pack_whse_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       whse_cd\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n--,       rog_id\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       div_promo_grp_cd\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       loc_retail_sect_id\n,       buyer_nbr\n,       unit_prc_tbl_nbr\n,       price_area_id\n,       cost_area_id\n,       buyer_nm\n,       vend_nm\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n,       offer_id\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\n,       adplan_flag\n,       up_mult_factor\n,       up_label_unit\n,       pending_cost\n,       pending_cost_date\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost\n)\nSELECT  division_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n,       pack_retail_qty\n-- ,       pack_whse_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       whse_cd\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n--,       rog_id\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       div_promo_grp_cd\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       loc_retail_sect_id\n,       buyer_nbr\n,       unit_prc_tbl_nbr\n,       price_area_id\n,       cost_area_id\n,       buyer_nm\n,       vend_nm\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n,       offer_id\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\n,       adplan_flag\n,       up_mult_factor\n,       up_label_unit\n,       pending_cost\n,       pending_cost_date\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_3\nGROUP   BY division_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n,       pack_retail_qty\n-- ,       pack_whse_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       whse_cd\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n--,       rog_id\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       div_promo_grp_cd\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       loc_retail_sect_id\n,       buyer_nbr\n,       unit_prc_tbl_nbr\n,       price_area_id\n,       cost_area_id\n,       buyer_nm\n,       vend_nm\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n,       offer_id\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\n,       adplan_flag\n,       up_mult_factor\n,       up_label_unit\n,       pending_cost\n,       pending_cost_date\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost;\n</code></pre>"},{"location":"pricing_execution/#step-43","title":"Step 43","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_5;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-44","title":"Step 44","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_5 (\ndivision_id INTEGER,\ncorp_item_cd DECIMAL(8,0),\ncic_dsc VARCHAR(40)  COLLATE 'en-ci' ,\ngroup_id SMALLINT,\ncategory_id SMALLINT,\nvend_conv_fctr SMALLINT,\npack_retail_qty DECIMAL(7,2),\n-- pack_whse_qty DECIMAL(7,2),\npack_dsc CHAR(30)  COLLATE 'en-ci' ,\nsize_dsc CHAR(30)  COLLATE 'en-ci' ,\ndst_cntr VARCHAR(4)  COLLATE 'en-ci' ,\ncic_vend_cst DECIMAL(9,4),\ncorporation_id BYTEINT,\nWHSE_CD VARCHAR(4)  COLLATE 'en-ci' ,\nstatus_dst CHAR(1)  COLLATE 'en-ci' ,\ncic_ib_cst DECIMAL(9,4),\nitem_type_cd DECIMAL(3,0),\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nretail_status_cd CHAR(1)  COLLATE 'en-ci' ,\nloc_common_retail_cd DECIMAL(5,0),\nupc_id DECIMAL(13,0),\nsnstv_tier_cd CHAR(1)  COLLATE 'en-ci' ,\nDIV_PROMO_GRP_CD INTEGER,\nVEND_NBR VARCHAR(6)  COLLATE 'en-ci' ,\nVEND_SUB_ACCT_NBR VARCHAR(3)  COLLATE 'en-ci' ,\nloc_retail_sect_id INTEGER,\nBUYER_NBR CHAR(2)  COLLATE 'en-ci' ,\nunit_prc_tbl_nbr SMALLINT,\nprice_area_id INTEGER,\ncost_area_id SMALLINT,\nbuyer_nm CHAR(20)  COLLATE 'en-ci' ,\nvend_nm CHAR(40)  COLLATE 'en-ci' ,\nreg_rtl_prc DECIMAL(7,2),\nreg_rtl_prc_fctr DECIMAL(2,0),\nCOUPON_AMT DECIMAL(8,2),\npromo_method_cd CHAR(2)  COLLATE 'en-ci' ,\npromo_min_purch_qty DECIMAL(2,0),\npromo_lim_qty SMALLINT,\npromo_prc DECIMAL(7,2),\npromo_prc_fctr DECIMAL(2,0),\nfirst_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nlast_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_first_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nprtl_reg_rtl_prc DECIMAL(7,2),\nprtl_reg_rtl_prc_fctr DECIMAL(2,0),\nadplan_flag VARCHAR(1)  COLLATE 'en-ci' ,\nup_mult_factor DECIMAL(7,3),\nup_label_unit VARCHAR(5)  COLLATE 'en-ci' ,\npending_cost DECIMAL(9,4),\npending_cost_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nhist_reg_rtl_prc DECIMAL(7,2),\nhist_reg_rtl_prc_fctr DECIMAL(2,0),\nhist_last_eff_dt DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nalw_typ VARCHAR(1)  COLLATE 'en-ci' ,\narrival_from_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\narrival_to_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nallow_amt DECIMAL(11,4),\namt_in_cost DECIMAL(11,4));\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-45","title":"Step 45","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_5\n(       division_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n,       pack_retail_qty\n-- ,       pack_whse_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       WHSE_CD\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n--,       rog_id\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       DIV_PROMO_GRP_CD\n,       VEND_NBR\n,       VEND_SUB_ACCT_NBR\n,       loc_retail_sect_id\n,       BUYER_NBR\n,       unit_prc_tbl_nbr\n,       price_area_id\n,       cost_area_id\n,       buyer_nm\n,       vend_nm\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\n,       adplan_flag\n,       up_mult_factor\n,       up_label_unit\n,       pending_cost\n,       pending_cost_date\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost\n)\nSELECT  dt.division_id\n,       dt.corp_item_cd\n,       dt.cic_dsc\n,       dt.group_id\n,       dt.category_id\n,       dt.vend_conv_fctr\n,       dt.pack_retail_qty\n-- ,       dt.pack_whse_qty\n,       dt.pack_dsc\n,       dt.size_dsc\n,       dt.dst_cntr\n,       dt.cic_vend_cst\n,       dt.corporation_id\n,       dt.whse_cd\n,       dt.status_dst\n,       dt.cic_ib_cst\n,       dt.item_type_cd\n--,       dt.rog_id\n,       dt.rog_cd\n,       dt.retail_status_cd\n,       dt.loc_common_retail_cd\n,       dt.upc_id\n,       dt.snstv_tier_cd\n,       dt.div_promo_grp_cd\n,       dt.vend_nbr\n,       dt.vend_sub_acct_nbr\n,       dt.loc_retail_sect_id\n,       dt.buyer_nbr\n,       dt.unit_prc_tbl_nbr\n,       dt.price_area_id\n,       dt.cost_area_id\n,       dt.buyer_nm\n,       dt.vend_nm\n,       reg.reg_rtl_prc\n,       reg.reg_rtl_prc_fctr\n--,       promo.COUPON_AMT\n,       (promo.promo_prc / COALESCE(NULLIF(promo.promo_prc_fctr,'0'), 1.00    )) AS coupon_amt    /* ARIS:  change from promo.COUPON_AMT to this new code */\n--MAYANK : Change for Markdown Column\n,       promo.promo_method_cd\n,       promo.promo_min_purch_qty\n,       promo.promo_lim_qty\n,       promo.promo_prc\n,       promo.promo_prc_fctr\n,       promo.first_eff_dt\n,       promo.last_eff_dt\n,       prtl.prtl_first_eff_dt\n,       prtl.prtl_reg_rtl_prc\n,       prtl.prtl_reg_rtl_prc_fctr\n,       dt.adplan_flag\n,       dt.up_mult_factor\n,       dt.up_label_unit\n,       dt.pending_cost\n,       dt.pending_cost_date\n,       hreg.hist_reg_rtl_prc\n,       hreg.hist_reg_rtl_prc_fctr\n,       hreg.hist_last_eff_dt\n,       dt.alw_typ\n,       dt.arrival_from_date\n,       dt.arrival_to_date\n,       dt.allow_amt\n,       dt.amt_in_cost\nFROM    (\nSELECT  division_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n,       pack_retail_qty\n-- ,       pack_whse_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       whse_cd\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n--,       rog_id\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       div_promo_grp_cd\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       loc_retail_sect_id\n,       buyer_nbr\n,       unit_prc_tbl_nbr\n,       price_area_id\n,       cost_area_id\n,       buyer_nm\n,       vend_nm\n,       adplan_flag\n,       up_mult_factor\n,       up_label_unit\n,       pending_cost\n,       pending_cost_date\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_4\nGROUP   BY division_id\n,       corp_item_cd\n,       cic_dsc\n,       group_id\n,       category_id\n,       vend_conv_fctr\n,       pack_retail_qty\n-- ,       pack_whse_qty\n,       pack_dsc\n,       size_dsc\n,       dst_cntr\n,       cic_vend_cst\n,       corporation_id\n,       whse_cd\n,       status_dst\n,       cic_ib_cst\n,       item_type_cd\n--,       rog_id\n,       rog_cd\n,       retail_status_cd\n,       loc_common_retail_cd\n,       upc_id\n,       snstv_tier_cd\n,       div_promo_grp_cd\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       loc_retail_sect_id\n,       buyer_nbr\n,       unit_prc_tbl_nbr\n,       price_area_id\n,       cost_area_id\n,       buyer_nm\n,       vend_nm\n,       first_eff_dt\n,       last_eff_dt\n,       adplan_flag\n,       up_mult_factor\n,       up_label_unit\n,       pending_cost\n,       pending_cost_date\n,       alw_typ\n,       arrival_from_date\n,       arrival_to_date\n,       allow_amt\n,       amt_in_cost\n) dt\nLEFT    OUTER JOIN (\nSELECT  rog_cd\n,       upc_id\n,       price_area_id\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\nFROM    (\nSELECT  rog_cd\n,       upc_id\n,       price_area_id\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n,       COUNT(1) AS cnt\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_3\nWHERE   reg_rtl_prc_fctr &gt; 0\nGROUP   BY rog_cd\n,       upc_id\n,       price_area_id\n,       reg_rtl_prc\n,       reg_rtl_prc_fctr\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY rog_cd, upc_id, price_area_id ORDER BY cnt DESC) = 1\n) reg\nON      reg.rog_cd = dt.rog_cd\nAND     reg.upc_id = dt.upc_id\nAND     reg.price_area_id = dt.price_area_id\nLEFT    OUTER JOIN (\nSELECT  rog_cd\n,       upc_id\n,       price_area_Id\n,       offer_id\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\nFROM    (\nSELECT  rog_cd\n,       upc_id\n,       price_area_Id\n,       offer_id\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n,       COUNT(1) AS cnt\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_3\nWHERE   offer_id IS NOT NULL\nGROUP   BY rog_cd\n,       upc_id\n,       price_area_Id\n,       offer_id\n,       COUPON_AMT\n,       promo_method_cd\n,       promo_min_purch_qty\n,       promo_lim_qty\n,       promo_prc\n,       promo_prc_fctr\n,       first_eff_dt\n,       last_eff_dt\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY rog_cd, upc_id, price_area_id ORDER BY cnt DESC, coupon_amt ASC, promo_prc ASC, offer_id ASC) = 1\n) promo\nON      promo.rog_cd = dt.rog_cd\nAND     promo.upc_id = dt.upc_id\nAND     promo.price_area_id = dt.price_area_id\nLEFT    OUTER JOIN (\nSELECT  rog_cd\n,       upc_id\n,       price_area_id\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\nFROM    (\nSELECT  rog_cd\n,       upc_id\n,       price_area_id\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\n,       COUNT(1) AS cnt\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_3\nWHERE   prtl_reg_rtl_prc_fctr &gt; 0\nGROUP   BY rog_cd\n,       upc_id\n,       price_area_id\n,       prtl_first_eff_dt\n,       prtl_reg_rtl_prc\n,       prtl_reg_rtl_prc_fctr\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY rog_cd, upc_id, price_area_id ORDER BY cnt DESC, prtl_reg_rtl_prc ASC, prtl_first_eff_dt ASC) = 1\n) prtl\nON      prtl.rog_cd = dt.rog_cd\nAND     prtl.upc_id = dt.upc_Id\nAND     prtl.price_area_id = dt.price_area_id\nLEFT    OUTER JOIN (\nSELECT  rog_cd\n,       upc_id\n,       price_area_id\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\nFROM    (\nSELECT  rog_cd\n,       upc_id\n,       price_area_id\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\n,       COUNT(1) AS cnt\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_3\nWHERE   hist_reg_rtl_prc_fctr &gt; 0\nGROUP   BY rog_cd\n,       upc_id\n,       price_area_id\n,       hist_reg_rtl_prc\n,       hist_reg_rtl_prc_fctr\n,       hist_last_eff_dt\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY rog_cd, upc_id, price_area_id ORDER BY cnt DESC, hist_last_eff_dt DESC, hist_reg_rtl_prc ASC) = 1\n) hreg\nON      hreg.rog_cd = dt.rog_cd\nAND     hreg.upc_id = dt.upc_Id\nAND     hreg.price_area_id = dt.price_area_id;\n-- NULLIFZERO: Translated NullifZero to nullif function\n</code></pre>"},{"location":"pricing_execution/#step-46","title":"Step 46:","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-47","title":"Step 47:","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6 (\ndivision_id INTEGER,\npromo_no_allowance CHAR(1)  COLLATE 'en-ci' ,\nallow_no_promo CHAR(1)  COLLATE 'en-ci' ,\nmissing_allowance CHAR(1)  COLLATE 'en-ci' ,\ncost_change CHAR(1)  COLLATE 'en-ci' ,\nad_plan CHAR(1)  COLLATE 'en-ci' ,\nless_10_Promo CHAR(1)  COLLATE 'en-ci' ,\nless_10_allowance CHAR(1)  COLLATE 'en-ci' ,\ngreater_100_pass_through CHAR(1)  COLLATE 'en-ci' ,\nt_09_Retail CHAR(1)  COLLATE 'en-ci' ,\nlead_item CHAR(1)  COLLATE 'en-ci' ,\nDominant_Price_Area CHAR(1)  COLLATE 'en-ci' ,\nOOB CHAR(1)  COLLATE 'en-ci' ,\nsskvi CHAR(1)  COLLATE 'en-ci' ,\ngroup_cd SMALLINT,\ngroup_nm CHAR(46)  COLLATE 'en-ci' ,\nSMIC CHAR(4)  COLLATE 'en-ci' ,\nSMIC_name CHAR(46)  COLLATE 'en-ci' ,\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nprice_area_id INTEGER,\nPA_name CHAR(1)  COLLATE 'en-ci' ,\npricing_role CHAR(1)  COLLATE 'en-ci' ,\nOOB_gap_id CHAR(20)  COLLATE 'en-ci' ,\nDIV_PROMO_GRP_CD INTEGER,\nloc_common_retail_cd DECIMAL(5,0),\nvendor_name VARCHAR(40)  COLLATE 'en-ci' ,\nVEND_NBR VARCHAR(6)  COLLATE 'en-ci' ,\nVEND_SUB_ACCT_NBR VARCHAR(3)  COLLATE 'en-ci' ,\ncost_area_id SMALLINT,\nManuf CHAR(5)  COLLATE 'en-ci' ,\nupc_id DECIMAL(13,0),\ncorp_item_cd DECIMAL(8,0),\nitem_description VARCHAR(40)  COLLATE 'en-ci' ,\nDST VARCHAR(4)  COLLATE 'en-ci' ,\nFACILITY VARCHAR(4)  COLLATE 'en-ci' ,\ndst_stat CHAR(1)  COLLATE 'en-ci' ,\nrtl_stat CHAR(1)  COLLATE 'en-ci' ,\nbuyer_nm CHAR(20)  COLLATE 'en-ci' ,\nvend_conv_fctr SMALLINT,\nt_pack_retail_qty DECIMAL(10,0),\nsize_dsc CHAR(30)  COLLATE 'en-ci' ,\nRow_Offset CHAR(1)  COLLATE 'en-ci' ,\nUPC_13_Wk_Avg_Sales CHAR(1)  COLLATE 'en-ci' ,\nUPC_13_Wk_Avg_Qty CHAR(1)  COLLATE 'en-ci' ,\nUPC_13_Wk_Avg_RTL CHAR(1)  COLLATE 'en-ci' ,\nt_Rank CHAR(1)  COLLATE 'en-ci' ,\npct_ACV_Stores CHAR(1)  COLLATE 'en-ci' ,\nCPC_13_Wk_Avg_Sales CHAR(1)  COLLATE 'en-ci' ,\nCPC_13_Wk_Avg_Qty CHAR(1)  COLLATE 'en-ci' ,\nCPC_13_Wk_Avg_RTL CHAR(1)  COLLATE 'en-ci' ,\nPND_Cost_Change_VND DECIMAL(15,4),\nPND_VEN_Date_Effective DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nNew_Recc_Reg_Retail CHAR(1)  COLLATE 'en-ci' ,\nVendor_Unit_Cost DECIMAL(10,3),\nUnit_Item_Billing_Cost DECIMAL(10,3),\nPrev_Retail_Price_Fctr DECIMAL(2,0),\nPrevious_Retail_Price DECIMAL(7,2),\nPrev_Retail_Effective_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nPending_EDLP_Mult DECIMAL(2,0),\nPending_EDLP_Retail DECIMAL(7,2),\nPending_EDLP_Chg_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nPending_GP_pctg CHAR(1)  COLLATE 'en-ci' ,\nReg_Retail_Price_Fctr DECIMAL(2,0),\nReg_Retail DECIMAL(10,2),\nt_price_Per DECIMAL(10,3),\nt_Unit VARCHAR(5)  COLLATE 'en-ci' ,\nReg_GP_pctg CHAR(1)  COLLATE 'en-ci' ,\ncase_allow_count INTEGER,\ncase_allow_amt DECIMAL(15,4),\nCase_Allow_amt_per_Unit DECIMAL(15,4),\nCase_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nCase_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nS2S_Allow_count INTEGER,\nS2S_Allow_amt DECIMAL(15,4),\nS2S_Allow_amt_per_Unit DECIMAL(15,4),\nS2S_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nS2S_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nScan_Allow_count INTEGER,\nScan_Allow_amt DECIMAL(15,4),\nScan_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nScan_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nRedem_Scan_Allow_count INTEGER,\nRedem_Allow_amt DECIMAL(15,4),\nRedem_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nRedem_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nTotal_Allow_Unit CHAR(1)  COLLATE 'en-ci' ,\nAllowance_pctg CHAR(1)  COLLATE 'en-ci' ,\nNet_Cost_with_Allow CHAR(1)  COLLATE 'en-ci' ,\nPromo_Multiple DECIMAL(3,0),\nPromo_Price DECIMAL(10,4),\nCoupon_Method CHAR(2)  COLLATE 'en-ci' ,\nMin_Purch DECIMAL(2,0),\nLimit_Per_Txn SMALLINT,\nPromo_GP_pctg CHAR(1)  COLLATE 'en-ci' ,\nNet_Promo_Price DECIMAL(10,2),\nPrice_Per DECIMAL(10,3),\nt2_Unit VARCHAR(5)  COLLATE 'en-ci' ,\nMarkdown_pctg CHAR(1)  COLLATE 'en-ci' ,\nMark_down DECIMAL(10,2),\nPromo_Start DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nPromo_End DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nPass_Through CHAR(1)  COLLATE 'en-ci' ,\nNEW_Multiple CHAR(1)  COLLATE 'en-ci' ,\nNEW_Retail CHAR(1)  COLLATE 'en-ci' ,\nNEW_EDLP_GP_pctg CHAR(1)  COLLATE 'en-ci' ,\nNEW_Promo_Multiple CHAR(1)  COLLATE 'en-ci' ,\nNEW_Promo_Retail CHAR(1)  COLLATE 'en-ci' ,\nNEW_Promo_GPpctg CHAR(1)  COLLATE 'en-ci' ,\nNEW_Passthrough CHAR(1)  COLLATE 'en-ci' ,\ncompet_code VARCHAR(6)  COLLATE 'en-ci' ,\nprice_chk_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\ncomp_reg_mult DECIMAL(2,0),\ncom_reg_price DECIMAL(7,2),\nREG_CPI CHAR(1)  COLLATE 'en-ci' ,\nCOMP_AD_MULT DECIMAL(2,0),\nCOMP_AD_PRICE DECIMAL(7,2),\nComments CHAR(1)  COLLATE 'en-ci' ,\nModified_flag CHAR(1)  COLLATE 'en-ci' ,\nROG_and_CIG VARCHAR(15)  COLLATE 'en-ci' ,\nAllowance_Counts CHAR(50)  COLLATE 'en-ci' ,\nReport_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}');\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-48","title":"Step 48:","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6\n(       division_id\n,       promo_no_allowance\n,       allow_no_promo\n,       missing_allowance\n,       cost_change\n,       ad_plan\n,       less_10_Promo\n,       less_10_allowance\n,       greater_100_pass_through\n,       t_09_Retail\n,       lead_item\n,       Dominant_Price_Area\n,       OOB\n,       sskvi\n,       group_cd\n,       group_nm\n,       SMIC\n,       SMIC_name\n,       rog_cd\n,       price_area_id\n,       PA_name\n,       pricing_role\n,       OOB_gap_id\n,       DIV_PROMO_GRP_CD\n,       loc_common_retail_cd\n,       vendor_name\n,       VEND_NBR\n,       VEND_SUB_ACCT_NBR\n,       cost_area_id\n,       Manuf\n,       upc_id\n,       corp_item_cd\n,       item_description\n,       DST\n,       FACILITY\n,       dst_stat\n,       rtl_stat\n,       buyer_nm\n,       vend_conv_fctr\n,       t_pack_retail_qty\n,       size_dsc\n,       Row_Offset\n,       UPC_13_Wk_Avg_Sales\n,       UPC_13_Wk_Avg_Qty\n,       UPC_13_Wk_Avg_RTL\n,       t_Rank\n,       pct_ACV_Stores\n,       CPC_13_Wk_Avg_Sales\n,       CPC_13_Wk_Avg_Qty\n,       CPC_13_Wk_Avg_RTL\n,       PND_Cost_Change_VND\n,       PND_VEN_Date_Effective\n,       New_Recc_Reg_Retail\n,       Vendor_Unit_Cost\n,       Unit_Item_Billing_Cost\n,       Prev_Retail_Price_Fctr\n,       Previous_Retail_Price\n,       Prev_Retail_Effective_Date\n,       Pending_EDLP_Mult\n,       Pending_EDLP_Retail\n,       Pending_EDLP_Chg_Date\n,       Pending_GP_pctg\n,       Reg_Retail_Price_Fctr\n,       Reg_Retail\n,       t_price_Per\n,       t_Unit\n,       Reg_GP_pctg\n,       case_allow_count\n,       case_allow_amt\n,       Case_Allow_amt_per_Unit\n,       Case_Start_Date\n,       Case_End_Date\n,       S2S_Allow_count\n,       S2S_Allow_amt\n,       S2S_Allow_amt_per_Unit\n,       S2S_Start_Date\n,       S2S_End_Date\n,       Scan_Allow_count\n,       Scan_Allow_amt\n,       Scan_Start_Date\n,       Scan_End_Date\n,       Redem_Scan_Allow_count\n,       Redem_Allow_amt\n,       Redem_Start_Date\n,       Redem_End_Date\n,       Total_Allow_Unit\n,       Allowance_pctg\n,       Net_Cost_with_Allow\n,       Promo_Multiple\n,       Promo_Price\n,       Coupon_Method\n,       Min_Purch\n,       Limit_Per_Txn\n,       Promo_GP_pctg\n,       Net_Promo_Price\n,       Price_Per\n,       t2_Unit\n,       Markdown_pctg\n,       Mark_down\n,       Promo_Start\n,       Promo_End\n,       Pass_Through\n,       NEW_Multiple\n,       NEW_Retail\n,       NEW_EDLP_GP_pctg\n,       NEW_Promo_Multiple\n,       NEW_Promo_Retail\n,       NEW_Promo_GPpctg\n,       NEW_Passthrough\n,       compet_code\n,       price_chk_date\n,       comp_reg_mult\n,       com_reg_price\n,       REG_CPI\n,       COMP_AD_MULT\n,       COMP_AD_PRICE\n,       Comments\n,       Modified_flag\n,       ROG_and_CIG\n,       Allowance_Counts\n,       Report_Date\n)\nSELECT  t.division_id\n,       TRIM(' ') ::CHAR(1) AS promo_no_allowance\n,       TRIM(' ') ::CHAR(1) AS allow_no_promo\n,       TRIM(' ') ::CHAR(1) AS missing_allowance\n,       TRIM(' ') ::CHAR(1) AS cost_change\n,       adplan_flag ::CHAR(1) AS ad_plan\n,       TRIM(' ') ::CHAR(1) AS less_10_Promo\n,       TRIM(' ') ::CHAR(1) AS less_10_allowance\n,       TRIM(' ') ::CHAR(1) AS greater_100_pass_through\n,       TRIM(' ') ::CHAR(1) AS t_09_Retail\n,       TRIM(' ') ::CHAR(1) AS lead_item\n,       CASE WHEN t.rog_cd = 'SEAS' AND price_area_id = 36 THEN 'Y'     -- SEAS\nWHEN t.rog_cd = 'SEAG' AND price_area_id = 2  THEN 'Y'     -- SEAG\nWHEN t.rog_cd = 'ACME' AND price_area_id = 87    THEN 'Y' -- ACME\nWHEN t.rog_cd = 'SDEN' AND price_area_id = 71    THEN 'Y' -- SDEN\nWHEN t.rog_cd = 'ADEN' AND price_area_id = 1 THEN 'Y'\nWHEN t.rog_cd = 'AIMT' AND price_area_id = 6 THEN 'Y'\nWHEN t.rog_cd = 'AJWL' AND price_area_id = 1 THEN 'Y'\nWHEN t.rog_cd = 'SHAW' AND price_area_id = 47 THEN 'Y'\nWHEN t.rog_cd = 'SNCA' AND price_area_id = 11 THEN 'Y'\nWHEN t.rog_cd = 'SPRT' AND price_area_id = 22 THEN 'Y'\nWHEN t.rog_cd = 'APOR' AND price_area_id = 4 THEN 'Y'\nWHEN t.rog_cd = 'SSEA' AND price_area_id = 47 THEN 'Y'\nWHEN t.rog_cd = 'SSPK' AND price_area_id = 60 THEN 'Y'\nWHEN t.rog_cd = 'SACG' AND price_area_id = 8 THEN 'Y'\nWHEN t.rog_cd = 'ASHA' AND price_area_id = 4 THEN 'Y'\nWHEN t.rog_cd = 'AVMT' AND price_area_id = 32 THEN 'Y'\nWHEN t.rog_cd = 'VSOC' AND price_area_id = 1 THEN 'Y'\nWHEN t.rog_cd = 'ASOC' AND price_area_id = 1 THEN 'Y'\nWHEN t.rog_cd = 'PSOC' AND price_area_id = 89 THEN 'Y'\nWHEN t.rog_cd = 'RHOU' AND price_area_id = 33 THEN 'Y'\nWHEN t.rog_cd = 'RDAL' AND price_area_id = 80 THEN 'Y'\nWHEN t.rog_cd = 'ADAL' AND price_area_id = 4 THEN 'Y'\nWHEN t.rog_cd = 'AHOU' AND price_area_id = 1 THEN 'Y'\nWHEN t.rog_cd = 'ALAS' AND price_area_id = 71 THEN 'Y'\nWHEN t.rog_cd = 'APHO' AND price_area_id = 41 THEN 'Y'\nWHEN t.rog_cd = 'SPHO' AND price_area_id = 1 THEN 'Y'\nWHEN t.rog_cd = 'SPHX' AND price_area_id = 1 THEN 'Y'\nWHEN t.rog_cd = 'VLAS' AND price_area_id = 62 THEN 'Y'\nWHEN t.rog_cd = 'SWMA' AND price_area_id = 53 THEN 'Y' -- add this on 9.28\nWHEN t.rog_cd = 'AKBA' AND price_area_id = 1 THEN 'Y'  -- add this on 9.28\nWHEN t.rog_cd = 'SHGN' AND price_area_id = 53 THEN 'Y'\nELSE ' '\nEND ::CHAR(1) AS Dominant_Price_Area                      -- MAYANK : Changed rog_cd to t.rog_cd for Lead Item issue\n,       TRIM(' ') ::CHAR(1) AS OOB\n,       TRIM(' ') ::CHAR(1) AS sskvi\n,       translate(to_char(t.group_id , '00'), ' .+-', '')  group_cd\n,       grp.SMIC_GROUP_DSC AS GROUP_NM\n,       translate(to_char(t.category_id , '0000'), ' .+-', '') ::CHAR(4) AS SMIC\n,       cat.smic_category_dsc AS SMIC_name\n,       t.rog_cd                                                  -- MAYANK : Changed rog_cd to t.rog_cd for Lead Item issue.\n,       price_area_id\n,       TRIM(' ') ::CHAR(1) AS PA_name\n,       snstv_tier_cd AS pricing_role\n,       ((translate(to_char(t.group_id , '00'), ' .+-', '') ::CHAR(2)) || '-' || TRIM(translate(to_char(item_type_cd , '000'), ' .+-', '') ::CHAR(3))) ::CHAR(20) AS OOB_gap_id  -- change \"|\" to \"-\"\n,       div_promo_grp_cd  -- CIG\n,       loc_common_retail_cd  -- COMMON_CD\n,       COALESCE(vend_nm, '') AS vendor_name\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       cost_area_id\n,       SUBSTR(translate(to_char(t.upc_id , '000000000000'), ' .+-', '') ::CHAR(12), 3, 5) ::CHAR(5) AS Manuf\n,       t.upc_id\n,       corp_item_cd\n,       cic_dsc AS item_description\n,       dst_cntr AS DST\n,       whse_cd AS FACILITY\n,       status_dst AS dst_stat\n,       retail_status_cd AS rtl_stat\n,       buyer_nm\n,       vend_conv_fctr\n,       pack_retail_qty ::DECIMAL(10,0) AS t_pack_retail_qty\n,       size_dsc\n,       TRIM(' ') ::CHAR(1) AS Row_Offset\n,       TRIM(' ') ::CHAR(1) AS UPC_13_Wk_Avg_Sales\n,       TRIM(' ') ::CHAR(1) AS UPC_13_Wk_Avg_Qty\n,       TRIM(' ') ::CHAR(1) AS UPC_13_Wk_Avg_RTL\n,       TRIM(' ') ::CHAR(1) AS t_Rank\n,       TRIM(' ') ::CHAR(1) AS pct_ACV_Stores\n,       TRIM(' ') ::CHAR(1) AS CPC_13_Wk_Avg_Sales\n,       TRIM(' ') ::CHAR(1) AS CPC_13_Wk_Avg_Qty\n,       TRIM(' ') ::CHAR(1) AS CPC_13_Wk_Avg_RTL\n,       pending_cost / NULLIF(vend_conv_fctr,'0') / NULLIF(pack_retail_qty,'0') AS PND_Cost_Change_VND\n,       pending_cost_date AS PND_VEN_Date_Effective\n,       TRIM(' ') ::CHAR(1) AS New_Recc_Reg_Retail\n,       (cic_vend_cst / NULLIF(vend_conv_fctr,'0') / NULLIF(pack_retail_qty,'0')) ::DECIMAL(10,3) AS Vendor_Unit_Cost\n,       (cic_ib_cst / NULLIF(pack_retail_qty,'0')) ::DECIMAL(10,3) AS Unit_Item_Billing_Cost\n,       hist_reg_rtl_prc_fctr AS Prev_Retail_Price_Fctr\n,       hist_reg_rtl_prc AS Previous_Retail_Price\n,       hist_last_eff_dt AS Prev_Retail_Effective_Date\n,       prtl_reg_rtl_prc_fctr AS Pending_EDLP_Mult\n,       prtl_reg_rtl_prc AS Pending_EDLP_Retail\n,       prtl_first_eff_dt AS Pending_EDLP_Chg_Date\n,       TRIM(' ') ::CHAR(1) AS Pending_GP_pctg\n,       reg_rtl_prc_fctr AS Reg_Retail_Price_Fctr\n,       reg_rtl_prc ::DECIMAL(10,2) AS Reg_Retail\n-- MAYANK : added itm.up_measure\n--Akash : converted '/' to '*' between up_measure and up_mult_factor\n,       (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0') / NULLIF(itm.up_measure,'0') * NULLIF(up_mult_factor,'0')) ::DECIMAL(10,3) AS t_price_Per -- missing SSITMPOS.up_measure\n--, Decimal(Round(promo_prc / promo_prc_fctr /\n--  ITM.UP_MEASURE * up_mult_factor, 2), 10, 3) AS \"Price_Per...\"\n,       CASE\nWHEN reg_rtl_prc IS NOT NULL THEN up_label_unit\nELSE ''\nEND AS t_Unit\n,       TRIM(' ') ::CHAR(1) AS Reg_GP_pctg\n,       COUNT(CASE WHEN ALW_TYP = 'C' THEN ALLOW_AMT END) AS case_allow_count\n,       Sum (CASE  WHEN ALW_TYP = 'C' THEN ALLOW_AMT ELSE 0 END) AS case_allow_amt\n,       Sum (CASE  WHEN ALW_TYP = 'C' THEN ALLOW_AMT / NULLIF(pack_retail_qty,'0') /\nNULLIF(VEND_CONV_FCTR,'0') ELSE 0 END) AS Case_Allow_amt_per_Unit\n,       Max (CASE  WHEN ALW_TYP = 'C' THEN ARRIVAL_FROM_DATE\nELSE NULL END) AS Case_Start_Date\n,       Min (CASE  WHEN ALW_TYP = 'C' THEN ARRIVAL_TO_DATE\nELSE NULL END) AS Case_End_Date\n,       COUNT(CASE WHEN ALW_TYP = 'S' THEN ALLOW_AMT END) AS S2S_Allow_count\n,       Sum (CASE  WHEN ALW_TYP = 'S' THEN ALLOW_AMT ELSE 0 END) AS S2S_Allow_amt\n,       Sum (CASE  WHEN ALW_TYP = 'S' THEN ALLOW_AMT / NULLIF(pack_retail_qty,'0')\nELSE 0 END) AS S2S_Allow_amt_per_Unit\n,       Max (CASE  WHEN ALW_TYP = 'S' THEN ARRIVAL_FROM_DATE\nELSE NULL END) AS S2S_Start_Date\n,       Min (CASE  WHEN ALW_TYP = 'S' THEN ARRIVAL_TO_DATE\nELSE NULL END) AS S2S_End_Date\n,       COUNT(CASE WHEN ALW_TYP = 'T' THEN ALLOW_AMT END) AS Scan_Allow_count\n,       Sum (CASE  WHEN ALW_TYP = 'T' THEN ALLOW_AMT ELSE 0 END) AS Scan_Allow_amt\n,       Max (CASE  WHEN ALW_TYP = 'T' THEN ARRIVAL_FROM_DATE\nELSE NULL END) AS Scan_Start_Date\n,       Min (CASE  WHEN ALW_TYP = 'T' THEN ARRIVAL_TO_DATE\nELSE NULL END) AS Scan_End_Date\n,       COUNT(CASE WHEN ALW_TYP = 'R' THEN ALLOW_AMT END) AS Redem_Scan_Allow_count\n,       Sum (CASE  WHEN ALW_TYP = 'R' THEN ALLOW_AMT ELSE 0 END) AS Redem_Allow_amt\n,       Max (CASE  WHEN ALW_TYP = 'R' THEN ARRIVAL_FROM_DATE\nELSE NULL END) AS Redem_Start_Date\n,       Min (CASE  WHEN ALW_TYP = 'R' THEN ARRIVAL_TO_DATE\nELSE NULL END) AS Redem_End_Date\n,       TRIM(' ') ::CHAR(1) AS Total_Allow_Unit\n,       TRIM(' ') ::CHAR(1) AS Allowance_pctg\n,       TRIM(' ') ::CHAR(1) AS Net_Cost_with_Allow\n,       CASE WHEN promo_prc_fctr = 0 THEN 1 ELSE promo_prc_fctr END AS Promo_Multiple\n,       CASE WHEN promo_prc_fctr = 0 AND coupon_amt &gt; 0 THEN coupon_amt\nELSE promo_prc + 0.0001 END AS Promo_Price\n,       promo_method_cd AS Coupon_Method\n,       promo_min_purch_qty AS Min_Purch\n,       promo_lim_qty AS Limit_Per_Txn\n,       TRIM(' ') ::CHAR(1) AS Promo_GP_pctg\n,       CASE\nWHEN promo_method_cd = 'NE' AND coupon_amt &gt; 0 THEN coupon_amt\nWHEN promo_method_cd = 'NW' AND coupon_amt &gt; 0 THEN coupon_amt\nWHEN promo_method_cd = 'NE' AND promo_min_purch_qty &gt; 1 AND coupon_amt = 0 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) / NULLIF(promo_min_purch_qty,'0') )\nWHEN promo_method_cd = 'NW' AND promo_min_purch_qty &gt; 1 AND coupon_amt = 0 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) / NULLIF(promo_min_purch_qty,'0'))\nWHEN promo_method_cd = 'CE' AND promo_min_purch_qty = 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) - coupon_amt\nWHEN promo_method_cd = 'CW' AND promo_min_purch_qty = 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) - coupon_amt\nWHEN promo_method_cd = 'CE' AND promo_min_purch_qty &gt; 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( coupon_amt / NULLIF(promo_min_purch_qty,'0'))\nWHEN promo_method_cd = 'CW' AND promo_min_purch_qty &gt; 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( coupon_amt / NULLIF(promo_min_purch_qty,'0'))\nWHEN promo_method_cd = 'PE' THEN (reg_rtl_prc/NULLIF(reg_rtl_prc_fctr,'0'))-\n( ( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0'))*coupon_amt)/100)\nWHEN promo_method_cd = 'PW' THEN (reg_rtl_prc/NULLIF(reg_rtl_prc_fctr,'0'))-\n( ( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0'))*coupon_amt )/100)\nELSE 0\nEND ::DECIMAL(10,2) AS Net_Promo_Price -- (DECIMAL(10,2)) AS Net_Promo_Price\n,       (CASE\nWHEN promo_method_cd ='NE' AND coupon_amt &gt; 0 THEN coupon_amt\nWHEN promo_method_cd ='NW' AND coupon_amt &gt; 0 THEN coupon_amt\nWHEN promo_method_cd ='NE' AND promo_min_purch_qty&gt;1 AND coupon_amt=0 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) /\nNULLIF(promo_min_purch_qty,'0') )\nWHEN promo_method_cd ='NW' AND promo_min_purch_qty&gt;1 AND coupon_amt=0 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n((reg_rtl_prc/NULLIF(reg_rtl_prc_fctr,'0'))/ NULLIF(promo_min_purch_qty,'0'))\nWHEN promo_method_cd ='CE' AND promo_min_purch_qty = 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0'))-coupon_amt\nWHEN promo_method_cd ='CW' AND promo_min_purch_qty = 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0'))-coupon_amt\nWHEN promo_method_cd ='CE' AND promo_min_purch_qty &gt; 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( coupon_amt / NULLIF(promo_min_purch_qty,'0'))\nWHEN promo_method_cd ='CW' AND promo_min_purch_qty &gt; 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( coupon_amt / NULLIF(promo_min_purch_qty,'0'))\nWHEN promo_method_cd ='PE' THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( ( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) *\ncoupon_amt ) / 100 )\nWHEN promo_method_cd ='PW' THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( ( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) *\ncoupon_amt ) / 100 )\nELSE 0\nEND --/ (CASE WHEN promo_prc_fctr = 0 THEN 1 ELSE promo_prc_fctr END) --AKASH : commented this line as suggested by Steve\n/ NULLIF(itm.up_measure,'0') * up_mult_factor ) ::DECIMAL(10,3) AS Price_Per -- (DECIMAL(10,3)) AS Price_Per\n--                        / ITM.UP_MEASURE * up_mult_factor AS \"Price_Per....\" -- MAYANK : added itm.up_measure\n,       CASE\nWHEN (\nCASE\nWHEN promo_method_cd = 'NE' AND coupon_amt &gt; 0 THEN coupon_amt\nWHEN promo_method_cd = 'NW' AND coupon_amt &gt; 0 THEN coupon_amt\nWHEN promo_method_cd = 'NE' AND promo_min_purch_qty &gt; 1 AND coupon_amt = 0 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) / NULLIF(promo_min_purch_qty,'0') )\nWHEN promo_method_cd = 'NW' AND promo_min_purch_qty &gt; 1 AND coupon_amt = 0 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) / NULLIF(promo_min_purch_qty,'0') )\nWHEN promo_method_cd = 'CE' AND promo_min_purch_qty = 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) - coupon_amt\nWHEN promo_method_cd = 'CW' AND promo_min_purch_qty = 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) - coupon_amt\nWHEN promo_method_cd = 'CE' AND promo_min_purch_qty &gt; 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( coupon_amt / NULLIF(promo_min_purch_qty,'0') )\nWHEN promo_method_cd = 'CW' AND promo_min_purch_qty &gt; 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( coupon_amt / NULLIF(promo_min_purch_qty,'0') )\nWHEN promo_method_cd = 'PE' THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n(((reg_rtl_prc/NULLIF(reg_rtl_prc_fctr,'0'))*coupon_amt )/ 100)\nWHEN promo_method_cd = 'PW' THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n(((reg_rtl_prc/NULLIF(reg_rtl_prc_fctr,'0'))*coupon_amt)/100)\nELSE 0\nEND) &lt;&gt; 0 THEN up_label_unit\nELSE NULL --TRIM(' ')\nEND AS t2_Unit\n,       TRIM(' ') ::CHAR(1) AS Markdown_pctg\n,       CASE\nWHEN NOT promo_method_cd IS NULL THEN (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n(\nCASE\nWHEN promo_method_cd = 'NE' AND coupon_amt &gt; 0 THEN coupon_amt\nWHEN promo_method_cd = 'NW' AND coupon_amt &gt; 0 THEN coupon_amt\nWHEN promo_method_cd = 'NE' AND promo_min_purch_qty &gt; 1 AND coupon_amt = 0 THEN\n( reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) /NULLIF(promo_min_purch_qty,'0') )\nWHEN promo_method_cd = 'NW' AND promo_min_purch_qty &gt; 1 AND coupon_amt = 0 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) - ( (reg_rtl_prc /\nNULLIF(reg_rtl_prc_fctr,'0')) / NULLIF(promo_min_purch_qty,'0'))\nWHEN promo_method_cd = 'CE' AND promo_min_purch_qty = 1 THEN\n( reg_rtl_prc /NULLIF(reg_rtl_prc_fctr,'0')) - coupon_amt\nWHEN promo_method_cd = 'CW' AND promo_min_purch_qty = 1 THEN\n( reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) - coupon_amt\nWHEN promo_method_cd = 'CE' AND promo_min_purch_qty &gt; 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) - ( coupon_amt /NULLIF(promo_min_purch_qty,'0'))\nWHEN promo_method_cd = 'CW' AND promo_min_purch_qty &gt; 1 THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) - ( coupon_amt / NULLIF(promo_min_purch_qty,'0'))\nWHEN promo_method_cd = 'PE' THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( ( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) * coupon_amt ) / 100 )\nWHEN promo_method_cd = 'PW' THEN\n(reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) -\n( ( (reg_rtl_prc / NULLIF(reg_rtl_prc_fctr,'0')) * coupon_amt ) / 100 )\nELSE 0\nEND)\nELSE NULL\nEND ::DECIMAL(10,2) AS Mark_down\n,       first_eff_dt AS Promo_Start\n,       last_eff_dt AS Promo_End\n,       TRIM(' ') ::CHAR(1) AS Pass_Through\n,       TRIM(' ') ::CHAR(1) AS NEW_Multiple\n,       TRIM(' ') ::CHAR(1) AS NEW_Retail\n,       TRIM(' ') ::CHAR(1) AS NEW_EDLP_GP_pctg\n,       TRIM(' ') ::CHAR(1) AS NEW_Promo_Multiple\n,       TRIM(' ') ::CHAR(1) AS NEW_Promo_Retail\n,       TRIM(' ') ::CHAR(1) AS NEW_Promo_GPpctg\n,       TRIM(' ') ::CHAR(1) AS NEW_Passthrough\n,       cmp.COMPET_CODE AS compet_code  --TRIM(TB2.COMPET_CODE) AS \"COMPET_CODE\"\n,       cmp.PRICE_CHK_DATE AS price_chk_date --TB2.PRICE_CHK_DATE AS \"DATE\"\n,       cmp.CMP_PRICE_FCTR AS comp_reg_mult -- TB2.CMP_PRICE_FCTR AS \"COMP_REG_MULT\"\n,       cmp.CMP_PRICE AS com_reg_price -- (TB2.CMP_PRICE) AS \"COMP_REG_PRICE\"\n,       TRIM(' ') ::CHAR(1) AS REG_CPI\n,       cmp.CMP_SHELF_PRC_FCTR AS COMP_AD_MULT --TB2.CMP_SHELF_PRC_FCTR AS \"COMP_AD_MULT\"\n,       cmp.CMP_SHELF_PRICE AS COMP_AD_PRICE --(TB2.CMP_SHELF_PRICE) AS \"COMP_AD_PRICE\"\n,       TRIM(' ') ::CHAR(1) AS Comments\n,       TRIM(' ') ::CHAR(1) AS Modified_flag\n,       CASE\nWHEN t.rog_cd = 'SEAS' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-SEAS' || '-'\nWHEN t.rog_cd = 'SEAG' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-SEAG' || '-'\nWHEN t.rog_cd = 'ACME' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-ACME' || '-'\nWHEN t.rog_cd = 'AKAB' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-AKAB' || '-' -- added this logic on 9.28\nWHEN t.rog_cd = 'SWMA' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '3-SWMA' || '-' -- added this logic on 9.28\nWHEN t.rog_cd = 'SDEN' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-SDEN' || '-'\nWHEN t.rog_cd = 'ADEN' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-ADEN' || '-'\nWHEN t.rog_cd = 'AIMT' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-AIMT' || '-'\nWHEN t.rog_cd = 'AJWL' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-AJWL' || '-'\nWHEN t.rog_cd = 'SNCA' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-SNCA' || '-'\nWHEN t.rog_cd = 'SHAW' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-SHAW' || '-'\nWHEN t.rog_cd = 'SPRT' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-SPRT' || '-'\nWHEN t.rog_cd = 'APOR' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-APOR' || '-'\nWHEN t.rog_cd = 'SSEA' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-SSEA' || '-'\nWHEN t.rog_cd = 'SSPK' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-SSPK' || '-'\nWHEN t.rog_cd = 'SACG' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '3-SACG' || '-'\nWHEN t.rog_cd = 'ASHA' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-ASHA' || '-'\nWHEN t.rog_cd = 'AVMT' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-AVMT' || '-'\nWHEN t.rog_cd = 'VSOC' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-VSOC' || '-'\nWHEN t.rog_cd = 'ASOC' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-ASOC' || '-'\nWHEN t.rog_cd = 'PSOC' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '3-PSOC' || '-'\nWHEN t.rog_cd = 'RDAL' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-RDAL' || '-'\nWHEN t.rog_cd = 'ADAL' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-ADAL' || '-'\nWHEN t.rog_cd = 'RHOU' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '3-RHOU' || '-'\nWHEN t.rog_cd = 'AHOU' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '4-AHOU' || '-'\nWHEN t.rog_cd = 'SPHO' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '1-SPHO' || '-'\nWHEN t.rog_cd = 'APHO' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '2-APHO' || '-'\nWHEN t.rog_cd = 'ALAS' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '3-ALAS' || '-'\nWHEN t.rog_cd = 'VLAS' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '4-VLAS' || '-'\nWHEN t.rog_cd = 'SPHX' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '5-SPHX' || '-'\nWHEN t.rog_cd = 'TEST' AND DIV_PROMO_GRP_CD IS NOT NULL THEN '6-TEST' || '-'\nELSE TRIM(' ')  --MAYANK : changed rog_cd to t.rog_cd for Lead Item\nEND || COALESCE(TRIM(CAST(DIV_PROMO_GRP_CD AS CHAR(11))), TRIM(' ')) ::VARCHAR(15) AS ROG_and_CIG\n,       TRIM(COUNT(CASE WHEN ALW_TYP = 'C' THEN ALLOW_AMT END)) || '-' ||\nTRIM(COUNT(CASE WHEN ALW_TYP = 'S' THEN ALLOW_AMT END)) || '-' ||\nTRIM(COUNT(CASE WHEN ALW_TYP = 'T' THEN ALLOW_AMT END)) || '-' ||\nTRIM(COUNT(CASE WHEN ALW_TYP = 'R' THEN ALLOW_AMT END)) ::CHAR(50) AS Allowance_Counts\n-- ,       DATE '2021-07-01' AS Report_Date  --Max(CURRENT DATE+(13-Dayofweek(CURRENT DATE+2 DAY))DAY) AS \"Report Date\"\n-- Akash: 27/03/2019 : Changed Report_Date with below logic\n,       (CASE\nWHEN (t.division_id = '33' or t.division_id = '34') THEN (current_date + \"\"\"+str(east_gap)+\"\"\")::DATE\nELSE (current_date + \"\"\"+str(reg_gap)+\"\"\")::DATE\nEND) AS Report_Date\n\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_5 t\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.SMIC_Group grp\nON      grp.SMIC_GROUP_CD = t.group_id\nAND     grp.DW_CURRENT_VERSION_IND = TRUE AND     grp.DW_LOGICAL_DELETE_IND = FALSE\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.SMIC_Category cat\nON      cat.smic_group_cd * 100 + cat.smic_category_cd = t.category_id\nAND     cat.DW_CURRENT_VERSION_IND = TRUE AND     cat.DW_LOGICAL_DELETE_IND = FALSE\n\n-- MAYANK : Adding join for Price Per column    \nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.lu_upc_rog_clone itm    ON      itm.corporation_id = t.corporation_id   AND     itm.rog_cd = t.rog_cd   AND     itm.upc_id = t.upc_id\n\nLEFT    OUTER JOIN (\nSELECT  CORPORATE_UPC_NBR AS UPC_ID\n,       COMPETITOR_FACILITY_CD     AS COMPET_FACILITY\n,       COMPETITOR_ITEM_PRICE_FCTR    AS CMP_PRICE_FCTR\n,       COMPETITOR_ITEM_PRICE_AMT     AS CMP_PRICE\n,       COMPETITOR_SHELF_PRICE_FCTR    AS CMP_SHELF_PRC_FCTR\n,       COMPETITOR_SHELF_PRICE_AMT      AS CMP_SHELF_PRICE\n,       COMPETITOR_PRICE_CHECK_TS::DATE        AS PRICE_CHK_DATE\n,        COMPETITOR_CD               AS COMPET_CODE\n\nFROM    EDM_VIEWS_PRD.DW_VIEWS.Competitor_Item_Price\nWHERE DW_CURRENT_VERSION_IND = TRUE AND DW_LOGICAL_DELETE_IND = FALSE\nGROUP   BY 1,2,3,4,5,6,7,8\n) cmp\nON      cmp.upc_id = t.upc_id\nAND     cmp.compet_facility = (\nCASE WHEN t.ROG_CD = 'SEAG' THEN '7319'\nWHEN t.ROG_CD = 'SEAS' AND PRICE_AREA_ID = 4 THEN '1806'\nWHEN t.ROG_CD = 'SEAS' AND PRICE_AREA_ID &lt;&gt; 4 THEN '7319'\n\nWHEN t.ROG_CD = 'ACME' AND PRICE_AREA_ID IN (2,3,5) THEN '9503'\nWHEN t.ROG_CD = 'ACME' AND PRICE_AREA_ID IN (4) THEN '9504'\nWHEN t.ROG_CD = 'ACME' AND PRICE_AREA_ID IN (6, 87) THEN '9587'\nWHEN t.ROG_CD = 'ACME' AND PRICE_AREA_ID IN (7, 9) THEN '9509'\nWHEN t.ROG_CD = 'ACME' AND PRICE_AREA_ID IN (8) THEN '9508'\nWHEN t.ROG_CD = 'ACME' AND PRICE_AREA_ID IN (88, 89) THEN '9589'\n\nWHEN t.ROG_CD = 'ADEN' AND PRICE_AREA_ID IN (1) THEN '2039'\nWHEN t.ROG_CD = 'ADEN' AND PRICE_AREA_ID IN (2, 3) THEN '2000'\nWHEN t.ROG_CD = 'SDEN' AND PRICE_AREA_ID IN (12) THEN '2650'\nWHEN t.ROG_CD = 'SDEN' AND PRICE_AREA_ID IN (13, 41, 51, 55, 61, 70, 71, 95) THEN '2000'\n\nWHEN t.ROG_CD = 'AIMT' AND PRICE_AREA_ID IN (1, 2, 5) THEN '9119'\nWHEN t.ROG_CD = 'AIMT' AND PRICE_AREA_ID IN (4) THEN '9112'\nWHEN t.ROG_CD = 'AIMT' AND PRICE_AREA_ID IN (6) THEN '9111'\nWHEN t.ROG_CD = 'AIMT' AND PRICE_AREA_ID IN (8) THEN '9124'\nWHEN t.ROG_CD = 'AIMT' AND PRICE_AREA_ID IN (14) THEN '9128'\n\nWHEN t.ROG_CD = 'AJWL' THEN '8002'\n\nWHEN t.ROG_CD = 'SHAW' AND PRICE_AREA_ID IN (47) THEN '5601'\nWHEN t.ROG_CD = 'SNCA' AND PRICE_AREA_ID IN (1) THEN '4194'\nWHEN t.ROG_CD = 'SNCA' AND PRICE_AREA_ID IN (11) THEN '4115'\nWHEN t.ROG_CD = 'SNCA' AND PRICE_AREA_ID IN (17) THEN '4128'\nWHEN t.ROG_CD = 'SNCA' AND PRICE_AREA_ID IN (18) THEN '4295'\n\nWHEN t.ROG_CD = 'SPRT' AND PRICE_AREA_ID IN (1, 61) THEN '9502'\nWHEN t.ROG_CD = 'SPRT' AND PRICE_AREA_ID NOT IN (1, 61) THEN '3500'\nWHEN t.ROG_CD = 'APOR' THEN '3500'\n\nWHEN t.ROG_CD = 'SSEA' AND PRICE_AREA_ID IN (47,73, 42,53) THEN '6185'\nWHEN t.ROG_CD = 'SSEA' AND PRICE_AREA_ID IN (33,43) THEN '6120'\nWHEN t.ROG_CD = 'SSEA' AND PRICE_AREA_ID IN (34) THEN '6134'\nWHEN t.ROG_CD = 'SSPK' AND PRICE_AREA_ID IN (60,62,63,65) THEN '6160'\nWHEN t.ROG_CD = 'SSPK' AND PRICE_AREA_ID IN (71) THEN '6161'\nWHEN t.ROG_CD = 'SSPK' AND PRICE_AREA_ID IN (72) THEN '6673'\nWHEN t.ROG_CD = 'SACG' AND PRICE_AREA_ID IN (8,10,16) THEN '6108'\n\nWHEN t.ROG_CD = 'ASHA' AND PRICE_AREA_ID IN (3,4,8,10) THEN '3304'\nWHEN t.ROG_CD = 'ASHA' AND PRICE_AREA_ID IN (5) THEN '3305'\nWHEN t.ROG_CD = 'ASHA' AND PRICE_AREA_ID IN (6,16,22,23) THEN '3301'\nWHEN t.ROG_CD = 'ASHA' AND PRICE_AREA_ID IN (54,61) THEN '3302'\nWHEN t.ROG_CD = 'AVMT' AND PRICE_AREA_ID IN (32,35) THEN '3303'\nWHEN t.ROG_CD = 'AVMT' AND PRICE_AREA_ID IN (58) THEN '3302'\n\nWHEN t.ROG_CD = 'ASOC' AND PRICE_AREA_ID IN (1,2,4) THEN '9307'\nWHEN t.ROG_CD = 'ASOC' AND PRICE_AREA_ID IN (3,10) THEN '9106'\nWHEN t.ROG_CD = 'VSOC' AND PRICE_AREA_ID IN (1,2,4) THEN '9307'\nWHEN t.ROG_CD = 'VSOC' AND PRICE_AREA_ID IN (3) THEN '9106'\nWHEN t.ROG_CD = 'PSOC' AND PRICE_AREA_ID IN (88,89) THEN '9307'\n\nWHEN t.ROG_CD = 'RHOU' THEN '1720'\nWHEN t.ROG_CD = 'RDAL' THEN '1724'\nWHEN t.ROG_CD = 'ADAL' AND PRICE_AREA_ID NOT IN (6) THEN '1789'\nWHEN t.ROG_CD = 'ADAL' AND PRICE_AREA_ID IN (6) THEN '1791'\nWHEN t.ROG_CD = 'AHOU' THEN '1804'\n\nWHEN t.ROG_CD = 'ALAS' AND PRICE_AREA_ID IN (71,72) THEN '9401'\nWHEN t.ROG_CD = 'APHO' AND PRICE_AREA_ID IN (31) THEN '9931'\nWHEN t.ROG_CD = 'APHO' AND PRICE_AREA_ID IN (41) THEN '2749'\nWHEN t.ROG_CD = 'SPHO' AND PRICE_AREA_ID IN (1) THEN '2749'\nEND\n)\nGROUP   BY cmp.compet_facility\n,       itm.up_measure\n,       division_id\n,       promo_no_allowance\n,       allow_no_promo\n,       missing_allowance\n,       cost_change\n,       ad_plan\n,       less_10_Promo\n,       less_10_allowance\n,       greater_100_pass_through\n,       t_09_Retail\n,       lead_item\n,       Dominant_Price_Area\n,       OOB\n,       sskvi\n,       group_cd\n,       group_nm\n,       SMIC\n,       SMIC_name\n,       t.rog_cd      --MAYANK : changed rog_cd to t.rog_cd\n,       price_area_id\n,       PA_name\n,       pricing_role\n,       OOB_gap_id\n,       div_promo_grp_cd  -- CIG\n,       loc_common_retail_cd\n,       vendor_name\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       cost_area_id\n,       Manuf\n,       t.upc_id\n,       corp_item_cd\n,       item_description\n,       DST\n,       FACILITY\n,       dst_stat\n,       rtl_stat\n,       buyer_nm\n,       vend_conv_fctr\n,       pack_retail_qty\n,       size_dsc\n,       Row_Offset\n,       UPC_13_Wk_Avg_Sales\n,       UPC_13_Wk_Avg_Qty\n,       UPC_13_Wk_Avg_RTL\n,       t_Rank\n,       pct_ACV_Stores\n,       CPC_13_Wk_Avg_Sales\n,       CPC_13_Wk_Avg_Qty\n,       CPC_13_Wk_Avg_RTL\n,       PND_Cost_Change_VND\n--COALESCE (PENDING_VENDOR_COST.COST_VEND, PENDING_WSD_COST.COST_VEND) /\n--  VEND_CONV_FCTR / PACK_WHSE AS \"PND Cost Change VND\"\n,       PND_VEN_Date_Effective\n,       New_Recc_Reg_Retail\n,       Vendor_Unit_Cost\n--, Decimal(TB2.COST_VEND/PACK_WHSE/VEND_CONV_FCTR,10,3) AS \"Vendor Unit Cost\"\n,       Unit_Item_Billing_Cost\n--, Decimal(TB2.COST_IB / PACK_WHSE, 10, 3) AS \"Unit Item Billing Cost\"\n,       Prev_Retail_Price_Fctr\n,       Previous_Retail_Price\n,       Prev_Retail_Effective_Date\n,       Pending_EDLP_Mult\n,       Pending_EDLP_Retail\n,       Pending_EDLP_Chg_Date\n,       Pending_GP_pctg\n,       Reg_Retail_Price_Fctr\n,       Reg_Retail\n,       t_price_Per -- missing SSITMPOS.up_measure\n--, Decimal(Round(promo_prc / promo_prc_fctr /\n--  ITM.UP_MEASURE * up_mult_factor, 2), 10, 3) AS \"Price_Per...\"\n,       t_Unit\n--, CASE\n--    WHEN TB2.PRICE IS NOT NULL THEN up_label_unit\n--    ELSE TRIM(' ')\n--  END AS \"...Unit\"\n,       Reg_GP_pctg\n,       Total_Allow_Unit\n,       Allowance_pctg\n,       Net_Cost_with_Allow\n,       Promo_Multiple\n,       Promo_Price\n,       Coupon_Method\n,       Min_Purch\n,       Limit_Per_Txn\n,       Promo_GP_pctg\n,       Net_Promo_Price\n,       Price_Per\n,       t2_Unit\n,       Markdown_pctg\n,       Mark_down\n,       Promo_Start\n,       Promo_End\n,       Pass_Through\n,       NEW_Multiple\n,       NEW_Retail\n,       NEW_EDLP_GP_pctg\n,       NEW_Promo_Multiple\n,       NEW_Promo_Retail\n,       NEW_Promo_GPpctg\n,       NEW_Passthrough\n,       compet_code  --TRIM(TB2.COMPET_CODE) AS \"COMPET_CODE\"\n,       price_chk_date --TB2.PRICE_CHK_DATE AS \"DATE\"\n,       comp_reg_mult -- TB2.CMP_PRICE_FCTR AS \"COMP_REG_MULT\"\n,       com_reg_price -- (TB2.CMP_PRICE) AS \"COMP_REG_PRICE\"\n,       REG_CPI\n,       COMP_AD_MULT --TB2.CMP_SHELF_PRC_FCTR AS \"COMP_AD_MULT\"\n,       COMP_AD_PRICE --(TB2.CMP_SHELF_PRICE) AS \"COMP_AD_PRICE\"\n,       Comments\n,       Modified_flag\n,       ROG_and_CIG\n,       Report_Date;\n-- EXPR_FORMAT - Convert expression FORMAT/CAST_AS_FORMAT to TO_CHAR/TO_DATE\n-- FUN_CAST_OPTR - Reformat casting\n-- FUN_DATE_CAST - Reformat STRING-to-DATE casting\n-- NULLIFZERO: Translated NullifZero to nullif function\n</code></pre>"},{"location":"pricing_execution/#step-49","title":"Step 49:","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-50","title":"Step 50:","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales (\ndivision_id INTEGER,\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nupc_id DECIMAL(14,0),\nrog_upc VARCHAR(25)  COLLATE 'en-ci' ,\nupc_dsc VARCHAR(40)  COLLATE 'en-ci' ,\ndepartment_id VARCHAR(11)  COLLATE 'en-ci' ,\ndepartment_name VARCHAR(30)  COLLATE 'en-ci' ,\ngroup_id VARCHAR(6)  COLLATE 'en-ci' ,\ngroup_nm VARCHAR(46)  COLLATE 'en-ci' ,\ncategory_id VARCHAR(6)  COLLATE 'en-ci' ,\ncategory_nm VARCHAR(46)  COLLATE 'en-ci' ,\ncpc VARCHAR(11)  COLLATE 'en-ci' ,\ndiv_promo_grp_cd INTEGER,\navg_net_sales_13_wk DECIMAL(18,2),\nrank_by_rog_and_cpc VARCHAR(18)  COLLATE 'en-ci' ,\navg_item_qty_13_wk DECIMAL(18,3),\nnum_stores_selling INTEGER,\nnum_stores_in_rog INTEGER);\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-51","title":"Step 51:","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales\n(       division_id\n,       rog_cd\n,       upc_id\n,       ROG_UPC\n,       upc_dsc\n,       department_id\n,       department_name\n,       group_id\n,       group_nm\n,       category_id\n,       category_nm\n,       cpc\n,       div_promo_grp_cd\n,       avg_net_sales_13_wk\n,       rank_by_rog_and_cpc\n,       avg_item_qty_13_wk\n,       num_stores_selling\n,       num_stores_in_rog\n)\nSELECT  ft.division_id\n,       str.rog_id\n,       upc.upc_nbr\n,       str.rog_id || '-' || TRIM(cast(upc.upc_nbr AS BIGINT)) AS rog_upc\n,       upc.ITEM_DSC\n,       TRIM(upc.RETAIL_DEPARTMENT_ID) AS department_id\n,       TRIM(upc.department_nm) AS department_name\n,       TRIM(upc.smic_group_id)      AS group_id\n,       TRIM(upc.SMIC_GROUP_DSC)      AS group_nm\n,       TRIM(upc.SMIC_CATEGORY_ID)   AS category_id\n,       TRIM(upc.SMIC_CATEGORY_DSC)   AS category_nm\n,       cic.COMMON_PROMOTION_CD  AS cpc\n,       urx.common_item_group_cd\n,       SUM(agp.net_amt) /13    AS avg_net_sales_13_wk\n,       CASE\nWHEN cic.COMMON_PROMOTION_CD &lt;&gt; NULL\nTHEN str.rog_id || '_' || RIGHT('00' || TRIM(ROW_NUMBER() OVER(\nPARTITION BY str.rog_id,cic.COMMON_PROMOTION_CD\nORDER BY avg_net_sales_13_wk DESC)),3)\nELSE NULL\nEND AS rank_by_rog_and_cpc\n,       SUM(agp.item_qty)/13    AS avg_item_qty_13_wk\n,       COUNT (DISTINCT FT.FACILITY_NBR) AS num_stores_selling\n,       tb1.total_stores            AS num_stores_in_rog\nFROM    EDM_VIEWS_PRD.DW_VIEWS.store_upc_agp agp\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE AS STR\nON  STR.FACILITY_INTEGRATION_ID = AGP.FACILITY_INTEGRATION_ID\nAND STR.DW_LOGICAL_DELETE_IND = FALSE\nAND STR.DW_CURRENT_VERSION_IND = TRUE\nAND STR.CORPORATION_ID = 1\n\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.FACILITY AS FT\nON STR.FACILITY_INTEGRATION_ID = FT.FACILITY_INTEGRATION_ID\nAND FT.DW_LOGICAL_DELETE_IND = FALSE\nAND FT.DW_CURRENT_VERSION_IND = TRUE\nINNER JOIN (\nSELECT  rog_id\n,       upc_nbr\n,       common_item_group_cd\nFROM    (\nSELECT  CUR.rog_id\n,       upc_nbr\n,       COALESCE(CIGI.common_item_group_cd,0)::NUMBER as common_item_group_cd\n,       COUNT(1) AS cnt\nFROM    EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE as cur\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP AS ROG\nON ROG.ROG_ID = CUR.ROG_ID AND ROG.DW_LOGICAL_DELETE_IND = FALSE AND ROG.DW_CURRENT_VERSION_IND = TRUE  LEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.Common_Item_Group_Item AS CIGI\non CIGI.Corporate_item_integration_id = cur.Corporate_item_integration_id\nAND ROG.DIVISION_ID = CIGI.DIVISION_ID\nAND CIGI.DW_LOGICAL_DELETE_IND = FALSE\nAND CIGI.DW_CURRENT_VERSION_IND = TRUE\n\nWHERE   CUR.DW_LOGICAL_DELETE_IND = FALSE\nAND CUR.DW_CURRENT_VERSION_IND = TRUE\n-- MAYANK : 20190625 : To bring out the sales for UPCs with blank CIGs\n-- AND     div_promo_grp_cd &gt; 0\n-- MAYANK : 20190527 : To stop UPCs with following status\nAND    Cur.status_cd NOT IN ('X','D')\nGROUP   BY 1,2,3\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY rog_id, upc_NBR ORDER BY TO_NUMBER(common_item_group_cd) DESC, cnt DESC) = 1\n) urx\nON      urx.rog_id = str.rog_id\nAND     urx.upc_nbr = agp.upc_nbr\nINNER   JOIN    (\nSELECT  str.rog_id\n,       COUNT(DISTINCT STR.FACILITY_NBR) AS total_stores\n\nFROM     EDM_VIEWS_PRD.DW_VIEWS.FACILITY as FT\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE AS STR\nON STR.FACILITY_INTEGRATION_ID = FT.FACILITY_INTEGRATION_ID\nAND STR.DW_LOGICAL_DELETE_IND = FALSE\nAND STR.DW_CURRENT_VERSION_IND = TRUE\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE D1\nON   D1.FACILITY_INTEGRATION_ID = FT.FACILITY_INTEGRATION_ID\nAND  D1.DW_LOGICAL_DELETE_IND = FALSE\nAND  D1.CORPORATION_ID = '001'\nAND  D1.FACILITY_STATUS_CD    = 'OPEN'\nAND  D1.FACILITY_SUB_TYPE_CD &lt;&gt; 'X'\nAND  D1.FACILITY_SUB_TYPE_CD &lt;&gt; 'N/A'\nAND  D1.DISTRICT_TYPE_CD     &lt;&gt; 'N'\nAND  D1.CONVERSION_IND        = TRUE\n\nWHERE   STR.corporation_id = 1\nAND     FT.close_dt &gt; CURRENT_DATE\nAND     FT.DW_LOGICAL_DELETE_IND = FALSE\nAND     FT.DW_CURRENT_VERSION_IND = TRUE\nAND     FT.FACILITY_NBR NOT IN (38,47,339,630,1227,1509,1708,4025,4041,4602  -- div 30 exclusions\n, 1132,1615,2911,2919 -- div 05 exclusions\n, 9835 -- div 35 exclusions\n)\n\nAND     STR.FACILITY_NBR NOT IN (\nSELECT RT.FACILITY_NBR FROM  EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE RT\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.FACILITY FT\nON FT.FACILITY_NBR = RT.FACILITY_NBR\nAND FT.DW_LOGICAL_DELETE_IND = FALSE\nAND FT.DW_CURRENT_VERSION_IND = TRUE\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.DISTRICT DT\nON DT.DISTRICT_CD = RT.DISTRICT_CD\nAND DT.DW_LOGICAL_DELETE_IND = FALSE\nAND DT.DW_CURRENT_VERSION_IND = TRUE\n\nWHERE FT.division_id = 27 AND DT.district_id = 39 AND RT.DW_LOGICAL_DELETE_IND = FALSE AND  RT.DW_CURRENT_VERSION_IND = TRUE)  -- div 27 exclusions\nGROUP   BY STR.rog_id\n) AS tb1\nON      str.rog_id = tb1.rog_id\nINNER   JOIN    EDM_VIEWS_PRD.DW_VIEWS.D1_UPC upc\nON      upc.upc_nbr = agp.upc_nbr\nAND     upc.corporation_id = 1\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM AS CIC\nON CIC.CORPORATE_ITEM_INTEGRATION_ID = UPC.CORPORATE_ITEM_INTEGRATION_ID\nAND CIC.DW_LOGICAL_DELETE_IND = FALSE\nAND CIC.DW_CURRENT_VERSION_IND = TRUE\nWHERE   -- MAYANK : 20190627 : Including all the SMICs as suggested by Steve\n--      upc.SMIC_CATEGORY_ID NOT IN (1350, 1390,1995,3290,7301,7305,7306,7310,7315,\n--      7320,7325,7330,7335,7340,7345,7401,7402,7405,\n--      7410,7415,7416,7420,7425,7430,7445,7450,7470,\n--      7480,7485,7490)\n--      AND    \nagp.transaction_dt BETWEEN CURRENT_DATE - 93 AND CURRENT_DATE - 3\nAND     NOT (agp.net_amt &lt;= 0 and agp.item_qty &lt;= 0)\nAND     FT.close_dt &gt; CURRENT_DATE\nAND     upc.smic_group_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,\n49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,88,89,91,92,94,95,96,97)\nAND     ft.facility_nbr NOT IN (38,47,339,630,1227,1509,1708,4025,4041,4602\n, 1132,1615,2911,2919\n, 9835\n)\nAND     ft.facility_nbr NOT IN (\nSELECT RT.FACILITY_NBR FROM  EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE RT\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.FACILITY FT\nON FT.FACILITY_NBR = RT.FACILITY_NBR\nAND FT.DW_LOGICAL_DELETE_IND = FALSE\nAND FT.DW_CURRENT_VERSION_IND = TRUE\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.DISTRICT DT\nON DT.DISTRICT_CD = RT.DISTRICT_CD\nAND DT.DW_LOGICAL_DELETE_IND = FALSE\nAND DT.DW_CURRENT_VERSION_IND = TRUE\n\nWHERE FT.division_id = 27 AND DT.district_id = 39 AND RT.DW_LOGICAL_DELETE_IND = FALSE AND  RT.DW_CURRENT_VERSION_IND = TRUE\n\n)\nGROUP   BY ft.division_id\n,       STR.rog_id\n,       upc.upc_nbr\n,       upc.ITEM_DSC\n,       upc.RETAIL_DEPARTMENT_ID\n,       upc.department_nm\n,       upc.smic_group_id\n,       upc.SMIC_GROUP_DSC\n,       upc.SMIC_CATEGORY_ID\n,       upc.SMIC_CATEGORY_DSC\n,       cic.COMMON_PROMOTION_CD\n,       urx.common_item_group_cd\n,       tb1.total_stores;\n-- COL_ALIAS_IN_EXPR - Review column alias reference\n-- FUN_DATE_CAST - Reformat STRING-to-DATE casting\n-- FUN_TD_LEFT_RIGHT - replace function LEFT and RIGHT with TD_LEFT and TD_RIGHT\n</code></pre>"},{"location":"pricing_execution/#step-52","title":"Step 52:","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-53","title":"Step 53:","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases (\ndivision_id INTEGER,\nrpt_group VARCHAR(100)  COLLATE 'en-ci' ,\nrog_cd CHAR(4)  COLLATE 'en-ci' ,\nupc_id DECIMAL(14,0),\nrog_upc VARCHAR(25)  COLLATE 'en-ci' ,\nupc_dsc VARCHAR(40)  COLLATE 'en-ci' ,\ndepartment_id VARCHAR(11)  COLLATE 'en-ci' ,\ndepartment_name VARCHAR(30)  COLLATE 'en-ci' ,\ngroup_id VARCHAR(6)  COLLATE 'en-ci' ,\ngroup_nm VARCHAR(46)  COLLATE 'en-ci' ,\ncategory_id VARCHAR(6)  COLLATE 'en-ci' ,\ncategory_nm VARCHAR(46)  COLLATE 'en-ci' ,\ncpc VARCHAR(11)  COLLATE 'en-ci' ,\ndiv_promo_grp_cd INTEGER,\nrank_by_rog_and_cpc VARCHAR(18)  COLLATE 'en-ci' ,\navg_net_sales_13_wk DECIMAL(18,2),\navg_item_qty_13_wk DECIMAL(18,3),\nnum_stores_selling INTEGER,\nnum_stores_in_rog INTEGER);\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-54","title":"Step 54:","text":"<pre><code>INSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\n(       division_id\n,       rpt_group\n,       rog_cd\n,       upc_id\n,       ROG_UPC\n,       upc_dsc\n,       department_id\n,       department_name\n,       group_id\n,       group_nm\n,       category_id\n,       category_nm\n,       cpc\n,       div_promo_grp_cd\n,       rank_by_rog_and_cpc\n,       avg_net_sales_13_wk\n,       avg_item_qty_13_wk\n,       num_stores_selling\n,       num_stores_in_rog\n)\nSELECT dt.division_id\n,        dt.rpt_group\n,       dt.rog_id\n,       dt.upc_nbr\n,       dt.rog_upc\n,       dt.item_dsc\n,       dt.department_id\n,       dt.department_name\n,       dt.group_id\n,       dt.group_nm\n,       dt.category_id\n,       dt.category_nm\n,       dt.cpc\n,       dt.common_item_group_cd\n,       dt.rank_by_rog_and_cpc\n,       dt.avg_net_sales_13_wk\n,       dt.avg_item_qty_13_wk\n,       dt.num_stores_selling\n,       tb1.total_stores AS num_stores_in_rog\nFROM    (\nSELECT  ft.division_id\n,       CASE\nWHEN ft.facility_nbr = 199 THEN 'S30_02'\nWHEN ft.facility_nbr IN (339, 1509, 1708) THEN 'S30_03'\nWHEN ft.facility_nbr IN (1911,1912,2089,2105,2203,2210,2212,2214,2215,2216,2217,2224,2225,2226,2228,2229,2231,2233,2235,2412,2739,2803,2813,3005,3237) THEN 'S29_02'\nEND AS rpt_group\n,       str.rog_id\n,       upc.upc_nbr\n,       str.rog_id || '-' || TRIM(cast(upc.upc_nbr AS BIGINT)) AS rog_upc\n,       upc.ITEM_DSC\n,       TRIM(upc.RETAIL_DEPARTMENT_ID) AS department_id\n,       TRIM(upc.department_nm) AS department_name\n,       TRIM(upc.smic_group_id)      AS group_id\n,       TRIM(upc.SMIC_GROUP_DSC)      AS group_nm\n,       TRIM(upc.SMIC_CATEGORY_ID)   AS category_id\n,       TRIM(upc.SMIC_CATEGORY_DSC)   AS category_nm\n,       cic.COMMON_PROMOTION_CD  AS cpc\n,       urx.common_item_group_cd\n,       SUM(agp.net_amt) /13    AS avg_net_sales_13_wk\n,       CASE\nWHEN cic.COMMON_PROMOTION_CD &lt;&gt; NULL\nTHEN str.rog_id || '_' || RIGHT('00' || TRIM(ROW_NUMBER() OVER(\nPARTITION BY str.rog_id,cic.COMMON_PROMOTION_CD\nORDER BY avg_net_sales_13_wk DESC)),3)\nELSE NULL\nEND AS rank_by_rog_and_cpc\n,       SUM(agp.item_qty)/13    AS avg_item_qty_13_wk\n,       COUNT (DISTINCT ft.facility_nbr) AS num_stores_selling\n\nFROM EDM_VIEWS_PRD.DW_VIEWS.STORE_UPC_AGP AS AGP\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE AS STR\nON  STR.FACILITY_INTEGRATION_ID = AGP.FACILITY_INTEGRATION_ID\nAND STR.DW_LOGICAL_DELETE_IND = FALSE AND STR.DW_CURRENT_VERSION_IND = TRUE\nAND STR.CORPORATION_ID = 1\n\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.FACILITY AS FT ON STR.FACILITY_INTEGRATION_ID = FT.FACILITY_INTEGRATION_ID\nAND FT.DW_LOGICAL_DELETE_IND = FALSE\nAND FT.DW_CURRENT_VERSION_IND = TRUE\n\nINNER JOIN (\nSELECT  rog_id\n,       upc_nbr\n,       common_item_group_cd\nFROM    (\nSELECT  CUR.rog_id\n,       upc_nbr\n,       COALESCE(CIGI.common_item_group_cd,0)::NUMBER as common_item_group_cd\n,       COUNT(1) AS cnt\nFROM    EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE as cur\n\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP AS ROG\nON ROG.ROG_ID = CUR.ROG_ID AND ROG.DW_LOGICAL_DELETE_IND = FALSE AND ROG.DW_CURRENT_VERSION_IND = TRUE  LEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.Common_Item_Group_Item AS CIGI\non CIGI.Corporate_item_integration_id = cur.Corporate_item_integration_id\nAND ROG.DIVISION_ID = CIGI.DIVISION_ID\nAND CIGI.DW_LOGICAL_DELETE_IND = FALSE\nAND CIGI.DW_CURRENT_VERSION_IND = TRUE\n\nWHERE   CUR.DW_LOGICAL_DELETE_IND = FALSE\nAND CUR.DW_CURRENT_VERSION_IND = TRUE\n-- MAYANK : 20190625 : To bring out the sales for UPCs with blank CIGs\n-- AND     div_promo_grp_cd &gt; 0\n-- MAYANK : 20190527 : To stop UPCs with following status\nAND    Cur.status_cd NOT IN ('X','D')\nGROUP   BY 1,2,3\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY rog_id, upc_NBR ORDER BY TO_NUMBER(common_item_group_cd) DESC, cnt DESC) = 1\n) urx\nON      urx.rog_id = str.rog_id\nAND     urx.upc_nbr = agp.upc_nbr\n\nINNER   JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_UPC upc\nON      upc.upc_nbr = agp.upc_nbr\nAND     upc.corporation_id = 1\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM AS CIC\nON CIC.CORPORATE_ITEM_INTEGRATION_ID = UPC.CORPORATE_ITEM_INTEGRATION_ID\nAND CIC.DW_LOGICAL_DELETE_IND = FALSE\nAND CIC.DW_CURRENT_VERSION_IND = TRUE\n\nWHERE   -- MAYANK : 20190627 : Including all the SMICs as suggested by Steve\n--         upc.SMIC_CATEGORY_ID NOT IN (1350, 1390,1995,3290,7301,7305,7306,7310,7315,\n--         7320,7325,7330,7335,7340,7345,7401,7402,7405,\n--         7410,7415,7416,7420,7425,7430,7445,7450,7470,\n--         7480,7485,7490)\n-- AND     \nagp.transaction_dt BETWEEN CURRENT_DATE - 93 AND CURRENT_DATE - 3\nAND     NOT (agp.net_amt &lt;= 0 and agp.item_qty &lt;= 0)\nAND     ft.close_dt &gt; CURRENT_DATE\nAND     upc.smic_group_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,\n49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,88,89,91,92,94,95,96,97)\nAND     ft.facility_nbr IN (199 -- S30_02\n, 339, 1509, 1708 -- 'S30_03'\n, 1911,1912,2089,2105,2203,2210,2212,2214,2215,2216,2217,2224,2225,2226,2228,2229,2231,2233,2235,2412,2739,2803,2813,3005,3237 -- 'S29_02'\n)\nGROUP   BY ft.division_id\n,        rpt_group\n,       str.rog_id\n,       upc.upc_nbr\n,       upc.ITEM_DSC\n,       upc.RETAIL_DEPARTMENT_ID\n,       upc.department_nm\n,       upc.smic_group_id\n,       upc.SMIC_GROUP_DSC\n,       upc.SMIC_CATEGORY_ID\n,       upc.SMIC_CATEGORY_DSC\n,       cic.COMMON_PROMOTION_CD\n,       urx. common_item_group_cd\n) dt\nINNER   JOIN    (\nSELECT  str.rog_id\n,       CASE\nWHEN FT.FACILITY_NBR = 199 THEN 'S30_02'\nWHEN FT.FACILITY_NBR IN (339, 1509, 1708) THEN 'S30_03'\nWHEN FT.FACILITY_NBR IN (1911,1912,2089,2105,2203,2210,2212,2214,2215,2216,2217,2224,2225,2226,2228,2229,2231,2233,2235,2412,2739,2803,2813,3005,3237) THEN 'S29_02'\nEND AS rpt_group\n,       COUNT(DISTINCT FT.FACILITY_NBR) AS total_stores\nFROM     EDM_VIEWS_PRD.DW_VIEWS.FACILITY as FT\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE AS STR\nON STR.FACILITY_INTEGRATION_ID = FT.FACILITY_INTEGRATION_ID\nAND STR.DW_LOGICAL_DELETE_IND = FALSE AND STR.DW_CURRENT_VERSION_IND = TRUE\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE D1\nON   D1.FACILITY_INTEGRATION_ID = FT.FACILITY_INTEGRATION_ID\nAND  D1.DW_LOGICAL_DELETE_IND = FALSE\nAND  D1.CORPORATION_ID = '001'\nAND  D1.FACILITY_STATUS_CD    = 'OPEN'\nAND  D1.FACILITY_SUB_TYPE_CD &lt;&gt; 'X'\nAND  D1.FACILITY_SUB_TYPE_CD &lt;&gt; 'N/A'\nAND  D1.DISTRICT_TYPE_CD     &lt;&gt; 'N'\nAND  D1.CONVERSION_IND        = TRUE\n\n\nWHERE   STR.corporation_id = 1\nAND     FT.close_dt &gt; CURRENT_DATE\nAND FT.DW_LOGICAL_DELETE_IND = FALSE\nAND FT.DW_CURRENT_VERSION_IND = TRUE\nAND     FT.FACILITY_NBR IN (199, 339, 1509, 1708  -- div 30 special reports\n,1911,1912,2089,2105,2203,2210,2212,2214,2215,2216,2217,2224,2225,2226,2228,2229,2231,2233,2235,2412,2739,2803,2813,3005,3237 -- div 29 special reports\n)\nGROUP   BY str.rog_id\n,       rpt_group\n) AS tb1\nON      dt.rog_id = tb1.rog_id\nAND     dt.rpt_group = tb1.rpt_group;\n-- COL_ALIAS_IN_EXPR - Review column alias reference\n-- FUN_DATE_CAST - Reformat STRING-to-DATE casting\n-- FUN_TD_LEFT_RIGHT - replace function LEFT and RIGHT with TD_LEFT and TD_RIGHT\n</code></pre>"},{"location":"pricing_execution/#step-55","title":"Step 55:","text":"<pre><code>DROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_final;\n-- DROP_TBL: Add if exists in drop table\n</code></pre>"},{"location":"pricing_execution/#step-56","title":"Step 56:","text":"<pre><code>CREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_final (\ndivision_id INTEGER,\nrpt_group VARCHAR(100)  COLLATE 'en-ci' ,\npromo_no_allowance VARCHAR(1)  COLLATE 'en-ci' ,\nallow_no_promo VARCHAR(1)  COLLATE 'en-ci' ,\nmissing_allowance VARCHAR(1)  COLLATE 'en-ci' ,\ncost_change VARCHAR(1)  COLLATE 'en-ci' ,\nad_plan CHAR(1)  COLLATE 'en-ci' ,\nless_10_Promo VARCHAR(1)  COLLATE 'en-ci' ,\nless_10_allowance VARCHAR(1)  COLLATE 'en-ci' ,\ngreater_100_pass_through VARCHAR(1)  COLLATE 'en-ci' ,\nt_09_Retail CHAR(1)  COLLATE 'en-ci' ,\nlead_item VARCHAR(1)  COLLATE 'en-ci' ,\nDominant_Price_Area CHAR(1)  COLLATE 'en-ci' ,\nt_OOB VARCHAR(1)  COLLATE 'en-ci' ,\nsskvi CHAR(1)  COLLATE 'en-ci' ,\ngroup_cd SMALLINT,\ngroup_nm CHAR(46)  COLLATE 'en-ci' ,\nSMIC CHAR(4)  COLLATE 'en-ci' ,\nSMIC_name CHAR(46)  COLLATE 'en-ci' ,\nrog VARCHAR(10)  COLLATE 'en-ci' ,\nprice_area_id INTEGER,\nPA_name CHAR(1)  COLLATE 'en-ci' ,\npricing_role CHAR(1)  COLLATE 'en-ci' ,\nOOB_gap_id CHAR(20)  COLLATE 'en-ci' ,\nDIV_PROMO_GRP_CD INTEGER,\nloc_common_retail_cd DECIMAL(5,0),\nvendor_name VARCHAR(40)  COLLATE 'en-ci' ,\nvend_nbr CHAR(6)  COLLATE 'en-ci' ,\nvend_sub_acct_nbr CHAR(3)  COLLATE 'en-ci' ,\ncost_area_id SMALLINT,\nManuf CHAR(5)  COLLATE 'en-ci' ,\nupc_id DECIMAL(13,0),\ncorp_item_cd DECIMAL(8,0),\nitem_description VARCHAR(40)  COLLATE 'en-ci' ,\nDST CHAR(4)  COLLATE 'en-ci' ,\nFACILITY CHAR(4)  COLLATE 'en-ci' ,\ndst_stat CHAR(1)  COLLATE 'en-ci' ,\nrtl_stat CHAR(1)  COLLATE 'en-ci' ,\nbuyer_nm CHAR(20)  COLLATE 'en-ci' ,\nvend_conv_fctr SMALLINT,\nt_pack_retail_qty DECIMAL(10,0),\nsize_dsc CHAR(30)  COLLATE 'en-ci' ,\nRow_Offset CHAR(1)  COLLATE 'en-ci' ,\nUPC_13_Wk_Avg_Sales DECIMAL(18,2),\nUPC_13_Wk_Avg_Qty DECIMAL(18,3),\nUPC_13_Wk_Avg_RTL DECIMAL(18,3),\nT_RANK_BY_ROG_AND_CPC INTEGER,\npct_ACV_Stores DECIMAL(5,2),\nt_CPC_13_Wk_Avg_Sales DECIMAL(18,2),\nt_CPC_13_Wk_Avg_Qty DECIMAL(18,3),\nt_CPC_13_Wk_Avg_RTL DECIMAL(18,3),\nPND_Cost_Change_VND DECIMAL(15,4),\nPND_VEN_Date_Effective DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nNew_Recc_Reg_Retail DECIMAL(18,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\nVendor_Unit_Cost DECIMAL(10,3),\nUnit_Item_Billing_Cost DECIMAL(10,3),\nPrev_Retail_Price_Fctr DECIMAL(2,0),\nPrevious_Retail_Price DECIMAL(7,2),\nPrev_Retail_Effective_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nPending_EDLP_Mult DECIMAL(2,0),\nPending_EDLP_Retail DECIMAL(7,2),\nPending_EDLP_Chg_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nPending_GP_pctg DECIMAL(15,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\nReg_Retail_Price_Fctr DECIMAL(2,0),\nReg_Retail DECIMAL(10,2),\nt_price_Per DECIMAL(10,3),\nt_Unit VARCHAR(5)  COLLATE 'en-ci' ,\nReg_GP_pctg DECIMAL(15,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\ncase_allow_count INTEGER,\ncase_allow_amt DECIMAL(15,4),\nCase_Allow_amt_per_Unit DECIMAL(15,4),\nCase_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nCase_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nS2S_Allow_count INTEGER,\nS2S_Allow_amt DECIMAL(15,4),\nS2S_Allow_amt_per_Unit DECIMAL(15,4),\nS2S_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nS2S_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nScan_Allow_count INTEGER,\nScan_Allow_amt DECIMAL(15,4),\nScan_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nScan_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nRedem_Scan_Allow_count INTEGER,\nRedem_Allow_amt DECIMAL(15,4),\nRedem_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nRedem_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nTotal_Allow_Unit DECIMAL(15,4),\nt_Allowance_pctg DECIMAL(15,3),\nNet_Cost_with_Allow DECIMAL(18,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\nPromo_Multiple DECIMAL(3,0),\nPromo_Price DECIMAL(10,4),\nCoupon_Method CHAR(2)  COLLATE 'en-ci' ,\nMin_Purch DECIMAL(2,0),\nLimit_Per_Txn SMALLINT,\nPromo_GP_pctg DECIMAL(15,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\nNet_Promo_Price DECIMAL(10,2),\nPrice_Per DECIMAL(10,3),\nt2_Unit VARCHAR(5)  COLLATE 'en-ci' ,\nt_markdown_pctg DECIMAL(15,4),\nMark_down DECIMAL(10,2),\nPromo_Start DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\nPromo_End DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\npass_through DECIMAL(15,2),\nNEW_Multiple CHAR(1)  COLLATE 'en-ci' ,\nNEW_Retail CHAR(1)  COLLATE 'en-ci' ,\nNEW_EDLP_GP_pctg CHAR(1)  COLLATE 'en-ci' ,\nNEW_Promo_Multiple CHAR(1)  COLLATE 'en-ci' ,\nNEW_Promo_Retail CHAR(1)  COLLATE 'en-ci' ,\nNEW_Promo_GPpctg CHAR(1)  COLLATE 'en-ci' ,\nNEW_Passthrough CHAR(1)  COLLATE 'en-ci' ,\ncompet_code VARCHAR(6)  COLLATE 'en-ci' ,\nprice_chk_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\ncomp_reg_mult DECIMAL(2,0),\ncom_reg_price DECIMAL(7,2),\nREG_CPI DECIMAL(18,3),  --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\nCOMP_AD_MULT DECIMAL(2,0),\nCOMP_AD_PRICE DECIMAL(7,2),\nComments CHAR(1)  COLLATE 'en-ci' ,\nModified_flag CHAR(1)  COLLATE 'en-ci' ,\nROG_and_CIG VARCHAR(15)  COLLATE 'en-ci' ,\nAllowance_Counts CHAR(50)  COLLATE 'en-ci' ,\nReport_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}');\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n</code></pre>"},{"location":"pricing_execution/#step-57","title":"Step 57:","text":"<pre><code>sql_step55 = \"\"\"\nDROP TABLE if exists EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_final;\n-- DROP_TBL: Add if exists in drop table\"\"\"\n\nsql_step56 = \"\"\"\nCREATE /*SET*/ or replace TABLE EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_final \n     (\n      division_id INTEGER,\n      rpt_group VARCHAR(100)  COLLATE 'en-ci' ,\n      promo_no_allowance VARCHAR(1)  COLLATE 'en-ci' ,\n      allow_no_promo VARCHAR(1)  COLLATE 'en-ci' ,\n      missing_allowance VARCHAR(1)  COLLATE 'en-ci' ,\n      cost_change VARCHAR(1)  COLLATE 'en-ci' ,\n      ad_plan CHAR(1)  COLLATE 'en-ci' ,\n      less_10_Promo VARCHAR(1)  COLLATE 'en-ci' ,\n      less_10_allowance VARCHAR(1)  COLLATE 'en-ci' ,\n      greater_100_pass_through VARCHAR(1)  COLLATE 'en-ci' ,\n      t_09_Retail CHAR(1)  COLLATE 'en-ci' ,\n      lead_item VARCHAR(1)  COLLATE 'en-ci' ,\n      Dominant_Price_Area CHAR(1)  COLLATE 'en-ci' ,\n      t_OOB VARCHAR(1)  COLLATE 'en-ci' ,\n      sskvi CHAR(1)  COLLATE 'en-ci' ,\n      group_cd SMALLINT,\n      group_nm CHAR(46)  COLLATE 'en-ci' ,\n      SMIC CHAR(4)  COLLATE 'en-ci' ,\n      SMIC_name CHAR(46)  COLLATE 'en-ci' ,\n      rog VARCHAR(10)  COLLATE 'en-ci' ,\n      price_area_id INTEGER,\n      PA_name CHAR(1)  COLLATE 'en-ci' ,\n      pricing_role CHAR(1)  COLLATE 'en-ci' ,\n      OOB_gap_id CHAR(20)  COLLATE 'en-ci' ,\n      DIV_PROMO_GRP_CD INTEGER,\n      loc_common_retail_cd DECIMAL(5,0),\n      vendor_name VARCHAR(40)  COLLATE 'en-ci' ,\n      vend_nbr CHAR(6)  COLLATE 'en-ci' ,\n      vend_sub_acct_nbr CHAR(3)  COLLATE 'en-ci' ,\n      cost_area_id SMALLINT,\n      Manuf CHAR(5)  COLLATE 'en-ci' ,\n      upc_id DECIMAL(13,0),\n      corp_item_cd DECIMAL(8,0),\n      item_description VARCHAR(40)  COLLATE 'en-ci' ,\n      DST CHAR(4)  COLLATE 'en-ci' ,\n      FACILITY CHAR(4)  COLLATE 'en-ci' ,\n      dst_stat CHAR(1)  COLLATE 'en-ci' ,\n      rtl_stat CHAR(1)  COLLATE 'en-ci' ,\n      buyer_nm CHAR(20)  COLLATE 'en-ci' ,\n      vend_conv_fctr SMALLINT,\n      t_pack_retail_qty DECIMAL(10,0),\n      size_dsc CHAR(30)  COLLATE 'en-ci' ,\n      Row_Offset CHAR(1)  COLLATE 'en-ci' ,\n      UPC_13_Wk_Avg_Sales DECIMAL(18,2),\n      UPC_13_Wk_Avg_Qty DECIMAL(18,3),\n      UPC_13_Wk_Avg_RTL DECIMAL(18,3),\n      T_RANK_BY_ROG_AND_CPC INTEGER,\n      pct_ACV_Stores DECIMAL(5,2),\n      t_CPC_13_Wk_Avg_Sales DECIMAL(18,2),\n      t_CPC_13_Wk_Avg_Qty DECIMAL(18,3),\n      t_CPC_13_Wk_Avg_RTL DECIMAL(18,3),\n      PND_Cost_Change_VND DECIMAL(15,4),\n      PND_VEN_Date_Effective DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      New_Recc_Reg_Retail DECIMAL(18,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\n      Vendor_Unit_Cost DECIMAL(10,3),\n      Unit_Item_Billing_Cost DECIMAL(10,3),\n      Prev_Retail_Price_Fctr DECIMAL(2,0),\n      Previous_Retail_Price DECIMAL(7,2),\n      Prev_Retail_Effective_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      Pending_EDLP_Mult DECIMAL(2,0),\n      Pending_EDLP_Retail DECIMAL(7,2),\n      Pending_EDLP_Chg_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      Pending_GP_pctg DECIMAL(15,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\n      Reg_Retail_Price_Fctr DECIMAL(2,0),\n      Reg_Retail DECIMAL(10,2),\n      t_price_Per DECIMAL(10,3),\n      t_Unit VARCHAR(5)  COLLATE 'en-ci' ,\n      Reg_GP_pctg DECIMAL(15,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\n      case_allow_count INTEGER,\n      case_allow_amt DECIMAL(15,4),\n      Case_Allow_amt_per_Unit DECIMAL(15,4),\n      Case_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      Case_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      S2S_Allow_count INTEGER,\n      S2S_Allow_amt DECIMAL(15,4),\n      S2S_Allow_amt_per_Unit DECIMAL(15,4),\n      S2S_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      S2S_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      Scan_Allow_count INTEGER,\n      Scan_Allow_amt DECIMAL(15,4),\n      Scan_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      Scan_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      Redem_Scan_Allow_count INTEGER,\n      Redem_Allow_amt DECIMAL(15,4),\n      Redem_Start_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      Redem_End_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      Total_Allow_Unit DECIMAL(15,4),\n      t_Allowance_pctg DECIMAL(15,3),\n      Net_Cost_with_Allow DECIMAL(18,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\n      Promo_Multiple DECIMAL(3,0),\n      Promo_Price DECIMAL(10,4),\n      Coupon_Method CHAR(2)  COLLATE 'en-ci' ,\n      Min_Purch DECIMAL(2,0),\n      Limit_Per_Txn SMALLINT,\n      Promo_GP_pctg DECIMAL(15,3), --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\n      Net_Promo_Price DECIMAL(10,2),\n      Price_Per DECIMAL(10,3),\n      t2_Unit VARCHAR(5)  COLLATE 'en-ci' ,\n      t_markdown_pctg DECIMAL(15,4),\n      Mark_down DECIMAL(10,2),\n      Promo_Start DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      Promo_End DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      pass_through DECIMAL(15,2),\n      NEW_Multiple CHAR(1)  COLLATE 'en-ci' ,\n      NEW_Retail CHAR(1)  COLLATE 'en-ci' ,\n      NEW_EDLP_GP_pctg CHAR(1)  COLLATE 'en-ci' ,\n      NEW_Promo_Multiple CHAR(1)  COLLATE 'en-ci' ,\n      NEW_Promo_Retail CHAR(1)  COLLATE 'en-ci' ,\n      NEW_Promo_GPpctg CHAR(1)  COLLATE 'en-ci' ,\n      NEW_Passthrough CHAR(1)  COLLATE 'en-ci' ,\n      compet_code VARCHAR(6)  COLLATE 'en-ci' ,\n      price_chk_date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}',\n      comp_reg_mult DECIMAL(2,0),\n      com_reg_price DECIMAL(7,2),\n      REG_CPI DECIMAL(18,3),  --CHARACTER SET UNICODE NOT CASESPECIFIC, MAYANK 20190430:changed column type from char(1)-&gt;decimal(18,3) for flattening the formulas\n      COMP_AD_MULT DECIMAL(2,0),\n      COMP_AD_PRICE DECIMAL(7,2),\n      Comments CHAR(1)  COLLATE 'en-ci' ,\n      Modified_flag CHAR(1)  COLLATE 'en-ci' ,\n      ROG_and_CIG VARCHAR(15)  COLLATE 'en-ci' ,\n      Allowance_Counts CHAR(50)  COLLATE 'en-ci' ,\n      Report_Date DATE  comment '{\"FORMAT\":\"YY/MM/DD\"}');\n-- CHAR_SET - Remove CHARACTER SET create table option\n-- COLUMN_ATTRIBUTES - Remove not casespecific and replace with collate en-ci\n-- COLUMN_ATTRIBUTES - move format into comment\n-- CREATE_SET_OPTION - Remove SET create table option, please review in insert statement!\n-- CREATE_TABLE_OPTION - remove create table options\n-- TABLE_INDEX - Remove table index options\n\n\"\"\"\n\nsql_step57 = \"\"\"\nINSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_final\n(       division_id\n,       rpt_group\n,       promo_no_allowance\n,       allow_no_promo\n,       missing_allowance\n,       cost_change\n,       ad_plan\n,       t_markdown_pctg\n,       less_10_Promo\n,       t_Allowance_pctg\n,       less_10_allowance\n,       greater_100_pass_through\n,       t_09_Retail\n,       lead_item\n,       Dominant_Price_Area\n,       t_OOB\n,       sskvi\n,       group_cd\n,       group_nm\n,       SMIC\n,       SMIC_name\n,       rog\n,       price_area_id\n,       PA_name\n,       pricing_role\n,       OOB_gap_id\n,       DIV_PROMO_GRP_CD\n,       loc_common_retail_cd\n,       vendor_name\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       cost_area_id\n,       Manuf\n,       upc_id\n,       corp_item_cd\n,       item_description\n,       DST\n,       FACILITY\n,       dst_stat\n,       rtl_stat\n,       buyer_nm\n,       vend_conv_fctr\n,       t_pack_retail_qty\n,       size_dsc\n,       Row_Offset\n,       UPC_13_Wk_Avg_Sales\n,       UPC_13_Wk_Avg_Qty\n,       UPC_13_Wk_Avg_RTL\n,       T_RANK_BY_ROG_AND_CPC\n,       pct_ACV_Stores\n,       t_CPC_13_Wk_Avg_Sales\n,       t_CPC_13_Wk_Avg_Qty\n,       t_CPC_13_Wk_Avg_RTL\n,       PND_Cost_Change_VND\n,       PND_VEN_Date_Effective\n,       New_Recc_Reg_Retail\n,       Vendor_Unit_Cost\n,       Unit_Item_Billing_Cost\n,       Prev_Retail_Price_Fctr\n,       Previous_Retail_Price\n,       Prev_Retail_Effective_Date\n,       Pending_EDLP_Mult\n,       Pending_EDLP_Retail\n,       Pending_EDLP_Chg_Date\n,       Pending_GP_pctg\n,       Reg_Retail_Price_Fctr\n,       Reg_Retail\n,       t_price_Per\n,       t_Unit\n,       Reg_GP_pctg\n,       case_allow_count\n,       case_allow_amt\n,       Case_Allow_amt_per_Unit\n,       Case_Start_Date\n,       Case_End_Date\n,       S2S_Allow_count\n,       S2S_Allow_amt\n,       S2S_Allow_amt_per_Unit\n,       S2S_Start_Date\n,       S2S_End_Date\n,       Scan_Allow_count\n,       Scan_Allow_amt\n,       Scan_Start_Date\n,       Scan_End_Date\n,       Redem_Scan_Allow_count\n,       Redem_Allow_amt\n,       Redem_Start_Date\n,       Redem_End_Date\n,       Total_Allow_Unit\n,       Net_Cost_with_Allow\n,       Promo_Multiple\n,       Promo_Price\n,       Coupon_Method\n,       Min_Purch\n,       Limit_Per_Txn\n,       Promo_GP_pctg\n,       Net_Promo_Price\n,       Price_Per\n,       t2_Unit\n,       Mark_down\n,       Promo_Start\n,       Promo_End\n,       pass_through\n,       NEW_Multiple\n,       NEW_Retail\n,       NEW_EDLP_GP_pctg\n,       NEW_Promo_Multiple\n,       NEW_Promo_Retail\n,       NEW_Promo_GPpctg\n,       NEW_Passthrough\n,       compet_code\n,       price_chk_date\n,       comp_reg_mult\n,       com_reg_price\n,       REG_CPI\n,       COMP_AD_MULT\n,       COMP_AD_PRICE\n,       Comments\n,       Modified_flag\n,       ROG_and_CIG\n,       Allowance_Counts\n,       Report_Date\n)\nSELECT  dsd.division_id\n,       CASE\nWHEN dsd.division_id = 34 AND dsd.price_area_id IN (87, 3)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^ACME PAs 87 &amp; 03'\nWHEN dsd.division_id = 33 AND dsd.price_area_id IN (4, 10, 23, 61)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^ASHA PAs 04,23,61 &amp; 10'\nWHEN dsd.division_id = 32 AND dsd.price_area_id IN (1)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^AJWL PA 01'\nWHEN dsd.division_id = 30 AND dsd.price_area_id IN (2,4,6,8)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^AIMT PAs 02, 04, 06, 08 ONLY'\nWHEN dsd.division_id = 5 AND dsd.price_area_id IN (2,41, 51, 71)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^SDEN PAs 02, 41, 51, 71'\nWHEN dsd.division_id = 25 AND dsd.price_area_id IN (11,17,18,47)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^SHAW 47, SNCA 11, 17, 18'\nWHEN dsd.division_id = 29 AND dsd.price_area_id IN (1,3)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^VSOC 01 &amp; 03, ASOCs 01 &amp; 03'\nWHEN dsd.division_id = 19 AND dsd.price_area_id IN (1,69,3,75)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^SPRT 01, 69, 75 &amp; APOR 03'\nWHEN dsd.division_id = 17 AND dsd.price_area_id IN (1,31,41,71)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^SPHO 01, APHO 31 &amp; 41, ALAS 71'\nWHEN dsd.division_id = 35 AND dsd.price_area_id IN (40, 49, 53) AND dsd.group_cd &gt; 1\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^(ALL GROUPS) - SEAS PAs 40, 49, 53'\n-- MAYANK : 20190614 : changed the PA 33 to 73\nWHEN dsd.division_id = 27 AND dsd.group_cd IN (96,97) AND dsd.price_area_id IN (8,47,73,60)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^Beth &amp; Randy' || '^SSEA 47 &amp; 73, SSPK 60, &amp; SACG 08'\nWHEN dsd.division_id = 27 AND dsd.group_cd IN (96,97) AND dsd.price_area_id NOT IN (8,47,73,60)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^Beth &amp; Randy'\nWHEN dsd.division_id = 27 AND dsd.price_area_id IN (8,47,73,60)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^SSEA 47 &amp; 73, SSPK 60, &amp; SACG 08'\nWHEN dsd.division_id = 20 AND dsd.price_area_id IN (1,4,33,83)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^RDAL 83, ADAL 04, RHOU 33, AHOU 01'\n-- MAYANK : 20190614 : adding the conditions for Haggen Master Files\nWHEN dsd.division_id = 24 AND dsd.price_area_id IN (53)\nTHEN (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2)) || '^SHGN PA 53'\nELSE    (translate(to_char(dsd.group_cd , '00'), ' .+-', '') ::CHAR(2))\nEND AS rpt_group\n,       CASE WHEN COALESCE(dsd.Net_Promo_Price, 0) &gt; 0 AND (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0)) = 0 THEN 'Y' ELSE ' ' END AS promo_no_allowance\n,       CASE WHEN COALESCE(dsd.S2S_Allow_amt, 0) + COALESCE(dsd.Scan_Allow_amt, 0) &gt; 0 AND COALESCE(dsd.Net_Promo_Price, 0) = 0 THEN 'Y' ELSE ' ' END AS allow_no_promo\n,       CASE WHEN malw.rog_and_cig IS NULL THEN ' ' ELSE 'Y' END AS missing_allowance\n,       CASE WHEN dsd.PND_Cost_Change_VND IS NULL THEN ' ' ELSE 'Y' END AS cost_change\n,       dsd.ad_plan\n,       dsd.Mark_down / NULLIF(dsd.Reg_Retail,'0') / NULLIF(dsd.Reg_Retail_Price_Fctr,'0') AS t_markdown_pctg -- dsd.Markdown_pctg\n,       CASE WHEN t_markdown_pctg &gt; 0 AND t_markdown_pctg &lt; 0.1 THEN 'Y' ELSE ' ' END AS less_10_Promo  -- dsd.less_10_Promo\n,       ((COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0))/ NULLIF(dsd.Vendor_Unit_Cost,'0')) ::DECIMAL(15,3) AS t_Allowance_pctg -- dsd.Allowance_pctg    -- COLUMN CH\n,       CASE WHEN t_Allowance_pctg &gt; 0 AND t_Allowance_pctg &lt; 0.1 THEN 'Y' ELSE ' ' END AS less_10_allowance  -- dsd.less_10_allowance\n,       CASE WHEN (dsd.mark_down / NULLIF(COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0),'0')) /*(DECIMAL(5,2))*/ &gt; 1 THEN 'Y' ELSE ' ' END AS greater_100_pass_through  --dsd.greater_100_pass_through\n\n--,       dsd.t_09_Retail MAYANK : 20190426 : flattening the formulas in excel\n,       CASE WHEN (round(dsd.Reg_Retail - floor(dsd.Reg_Retail),2) = 0.09) THEN 'Y' ELSE ' ' END AS t_09_Retail ,       -- MAYANK : marking blank CIGS as Lead Item (28/03/2019)\nCASE WHEN litm.division_id IS NOT NULL THEN 'Y'  WHEN dsd.div_promo_grp_cd = 0 THEN 'Y'\n--WHEN litm.division_id IS NULL THEN ' '\nELSE ' '            END AS lead_item -- dsd.lead_item\n,       dsd.Dominant_Price_Area\n,       CASE WHEN dsd.manuf IN ('21130', '79893', '58200', '11535', '41303', '41130') THEN 'Y' ELSE ' ' END AS t_OOB  -- dsd.OOB\n,       dsd.sskvi\n,       dsd.group_cd\n,       dsd.group_nm\n,       dsd.SMIC\n,       dsd.SMIC_name\n,       CASE\nWHEN dsd.rog_cd = 'SEAS' THEN '1-SEAS'\nWHEN dsd.rog_cd = 'SEAG' THEN '2-SEAG'\nWHEN dsd.rog_cd = 'ACME' THEN '1-ACME'\nWHEN dsd.rog_cd = 'SDEN' THEN '1-SDEN'\nWHEN dsd.rog_cd = 'ADEN' THEN '2-ADEN'\nWHEN dsd.rog_cd = 'AIMT' THEN '1-AIMT'\nWHEN dsd.rog_cd = 'AJWL' THEN '1-AJWL'\nWHEN dsd.rog_cd = 'SNCA' THEN '1-SNCA'\nWHEN dsd.rog_cd = 'SHAW' THEN '2-SHAW'\nWHEN dsd.rog_cd = 'SPRT' THEN '1-SPRT'\nWHEN dsd.rog_cd = 'APOR' THEN '2-APOR'\nWHEN dsd.rog_cd = 'SSEA' THEN '1-SSEA'\nWHEN dsd.rog_cd = 'SSPK' THEN '2-SSPK'\nWHEN dsd.rog_cd = 'SACG' THEN '3-SACG'\nWHEN dsd.rog_cd = 'ASHA' THEN '1-ASHA'\nWHEN dsd.rog_cd = 'AVMT' THEN '2-AVMT'\nWHEN dsd.rog_cd = 'VSOC' THEN '1-VSOC'\nWHEN dsd.rog_cd = 'ASOC' THEN '2-ASOC'\nWHEN dsd.rog_cd = 'PSOC' THEN '3-PSOC'\nWHEN dsd.rog_cd = 'RDAL' THEN '1-RDAL'\nWHEN dsd.rog_cd = 'ADAL' THEN '2-ADAL'\nWHEN dsd.rog_cd = 'RHOU' THEN '3-RHOU'\nWHEN dsd.rog_cd = 'AHOU' THEN '4-AHOU'\nWHEN dsd.rog_cd = 'SPHO' THEN '1-SPHO'\nWHEN dsd.rog_cd = 'APHO' THEN '2-APHO'\nWHEN dsd.rog_cd = 'ALAS' THEN '3-ALAS'\nWHEN dsd.rog_cd = 'VLAS' THEN '4-VLAS'\nWHEN dsd.rog_cd = 'SPHX' THEN '5-SPHX'\nWHEN dsd.rog_cd = 'SHGN' THEN '1-SHGN'\nWHEN dsd.rog_cd = 'TEST' THEN '6-TEST'\nELSE dsd.rog_cd\nEND ::VARCHAR(10) AS rog\n,       dsd.price_area_id               -- COLUMN S\n,       dsd.PA_name                     -- COLUMN T\n,       dsd.pricing_role\n,       dsd.OOB_gap_id\n,       dsd.DIV_PROMO_GRP_CD            -- COLUMN W CIG\n,       dsd.loc_common_retail_cd        -- COLUMN X\n,       dsd.vendor_name\n,       dsd.vend_nbr\n,       dsd.vend_sub_acct_nbr\n,       dsd.cost_area_id\n,       dsd.Manuf\n,       dsd.upc_id\n,       dsd.corp_item_cd\n,       dsd.item_description\n,       dsd.DST\n,       dsd.FACILITY\n,       dsd.dst_stat\n,       dsd.rtl_stat\n,       dsd.buyer_nm\n,       dsd.vend_conv_fctr\n,       dsd.t_pack_retail_qty\n,       dsd.size_dsc\n,       dsd.Row_Offset\n,       sua.AVG_NET_SALES_13_WK     AS UPC_13_Wk_Avg_Sales           -- COLUMN: AP\n,       sua.AVG_ITEM_QTY_13_WK      AS UPC_13_Wk_Avg_Qty\n,       sua.AVG_NET_SALES_13_WK / NULLIF(sua.AVG_ITEM_QTY_13_WK,'0') AS UPC_13_Wk_Avg_RTL  -- dsd.UPC_13_Wk_Avg_RTL\n,       CASE WHEN litm.division_id IS NULL THEN NULL ELSE 1 END ::INTEGER AS T_RANK_BY_ROG_AND_CPC\n,       (sua.NUM_STORES_SELLING * 1.00) / (sua.NUM_STORES_IN_ROG * 1.00)  ::DECIMAL(5,2) AS pct_ACV_Stores\n-- ,       COALESCE(cig.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK) AS t_CPC_13_Wk_Avg_Sales -- dsd.CPC_13_Wk_Avg_Sales   -- COLUMN: AU\n-- ,       COALESCE(cig.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK) AS t_CPC_13_Wk_Avg_Qty  -- dsd.CPC_13_Wk_Avg_Qty\n--      MAYANK : 20190625 : CIG sales cases for blank and non-blank CIGs\n,       CASE WHEN dsd.div_promo_grp_cd = 0 THEN COALESCE(cig_upc.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK)\nELSE COALESCE(cig.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK)\nEND AS t_CPC_13_Wk_Avg_Sales -- dsd.CPC_13_Wk_Avg_Sales   -- COLUMN: AU\n,       CASE\nWHEN dsd.div_promo_grp_cd = 0 THEN COALESCE(cig_upc.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK)\nELSE COALESCE(cig.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK)\nEND AS t_CPC_13_Wk_Avg_Qty  -- dsd.t_CPC_13_Wk_Avg_Qty\n,       t_CPC_13_Wk_Avg_Sales / NULLIF(t_CPC_13_Wk_Avg_Qty,'0')  AS t_CPC_13_Wk_Avg_RTL  --dsd.CPC_13_Wk_Avg_RTL\n,       dsd.PND_Cost_Change_VND\n,       dsd.PND_VEN_Date_Effective\n--,       dsd.New_Recc_Reg_Retail MAYANK : 20190426 : flattening the formulas in excel\n,       ((dsd.PND_Cost_Change_VND/NULLIF(dsd.Vendor_Unit_Cost,'0'))*dsd.Reg_Retail) ::DECIMAL(18,3) as New_Recc_Reg_Retail\n,       dsd.Vendor_Unit_Cost\n,       dsd.Unit_Item_Billing_Cost\n,       dsd.Prev_Retail_Price_Fctr\n,       dsd.Previous_Retail_Price\n,       dsd.Prev_Retail_Effective_Date\n,       dsd.Pending_EDLP_Mult\n,       dsd.Pending_EDLP_Retail\n,       dsd.Pending_EDLP_Chg_Date\n--,       dsd.Pending_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,       (((dsd.Pending_EDLP_Retail/NULLIF(dsd.Pending_EDLP_Mult,'0'))-dsd.Unit_Item_Billing_Cost)/NULLIF(dsd.Pending_EDLP_Retail/NULLIF(dsd.Pending_EDLP_Mult,'0'),'0')) ::DECIMAL(15,3) as Pending_GP_pctg\n,       dsd.Reg_Retail_Price_Fctr\n,       dsd.Reg_Retail\n,       dsd.t_price_Per\n,       dsd.t_Unit\n--,       dsd.Reg_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,       (((dsd.Reg_Retail/NULLIF(dsd.Reg_Retail_Price_Fctr,'0'))-dsd.Unit_Item_Billing_Cost)/NULLIF(dsd.Reg_Retail/NULLIF(dsd.Reg_Retail_Price_Fctr,'0'),'0')) ::DECIMAL(15,3) as Reg_GP_pctg\n,       dsd.case_allow_count\n,       dsd.case_allow_amt            AS case_allow_amt\n,       dsd.Case_Allow_amt_per_Unit   AS Case_Allow_amt_per_Unit\n,       dsd.Case_Start_Date\n,       dsd.Case_End_Date\n,       dsd.S2S_Allow_count\n,       dsd.S2S_Allow_amt             AS S2S_Allow_amt\n,       dsd.S2S_Allow_amt_per_Unit    AS S2S_Allow_amt_per_Unit\n,       dsd.S2S_Start_Date\n,       dsd.S2S_End_Date\n,       dsd.Scan_Allow_count\n,       dsd.Scan_Allow_amt            AS Scan_Allow_amt\n,       dsd.Scan_Start_Date\n,       dsd.Scan_End_Date\n,       dsd.Redem_Scan_Allow_count\n,       dsd.Redem_Allow_amt           AS Redem_Allow_amt\n,       dsd.Redem_Start_Date\n,       dsd.Redem_End_Date\n,       COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0) AS Total_Allow_Unit\n--,       dsd.Net_Cost_with_Allow MAYANK : 20190426 : flattening the formulas in excel\n,       (dsd.Vendor_Unit_Cost - (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0))) ::DECIMAL(18,3) as Net_Cost_with_Allow\n,       dsd.Promo_Multiple\n,       dsd.Promo_Price\n,       dsd.Coupon_Method\n,       dsd.Min_Purch\n,       dsd.Limit_Per_Txn\n--,       dsd.Promo_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,       ((dsd.Net_Promo_Price - (dsd.Vendor_Unit_Cost - (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0))))/NULLIF(dsd.Net_Promo_Price,'0')) ::DECIMAL(15,3) as Promo_GP_pctg\n,       dsd.Net_Promo_Price\n,       dsd.Price_Per\n,       dsd.t2_Unit\n,       dsd.Mark_down\n,       dsd.Promo_Start\n,       dsd.Promo_End\n,       (dsd.Mark_down/ NULLIF(COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0),'0')) ::DECIMAL(15,2) AS pass_through  -- dsd.Pass_Through  -- COLUMN CW\n,       dsd.NEW_Multiple\n,       dsd.NEW_Retail\n,       dsd.NEW_EDLP_GP_pctg\n,       dsd.NEW_Promo_Multiple\n,       dsd.NEW_Promo_Retail\n,       dsd.NEW_Promo_GPpctg\n,       dsd.NEW_Passthrough\n,       dsd.compet_code\n,       dsd.price_chk_date\n,       dsd.comp_reg_mult\n,       dsd.com_reg_price\n--,       dsd.REG_CPI MAYANK : 20190426 : flattening the formulas in excel\n,       CASE WHEN com_reg_price&gt;0 THEN (dsd.Reg_Retail/GREATEST(dsd.Reg_Retail_Price_Fctr,1) - dsd.com_reg_price/GREATEST(dsd.comp_reg_mult,1))/NULLIF(dsd.Reg_Retail/ GREATEST(dsd.Reg_Retail_Price_Fctr,1),'0')\nELSE NULL\nEND ::DECIMAL(18,3) AS REG_CPI\n,       dsd.COMP_AD_MULT\n,       dsd.COMP_AD_PRICE\n,       dsd.Comments\n,       dsd.Modified_flag\n,       dsd.ROG_and_CIG\n,       dsd.Allowance_Counts\n,       dsd.Report_Date\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6 dsd\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales sua\nON      sua.rog_cd = dsd.rog_cd\nAND     sua.upc_id = dsd.upc_id\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       upc_id\n,       SUM(AVG_NET_SALES_13_WK) AS upc_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS upc_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales\nGROUP   BY 1,2\n) upc\nON      upc.division_id = dsd.division_id\nAND     upc.upc_id      = dsd.upc_id\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       DIV_PROMO_GRP_CD\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS cig_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales\nGROUP   BY 1,2\n) cig\nON      cig.division_id = dsd.division_id\nAND     cig.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\n--      MAYANK : 20190625 : creating this table for matching the upc and cig sales for blank cigs.\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       upc_id\n,       DIV_PROMO_GRP_CD\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS cig_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales\nGROUP   BY 1,2,3\n) cig_upc\nON      cig_upc.division_id = dsd.division_id\nAND     cig_upc.upc_id = dsd.upc_id\nAND     cig_upc.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       group_id          -- MAYANK : 20190519 : Added group if for correcting the Lead Items in a group also in partition criteria\n,       div_promo_grp_cd\n,       upc_id\nFROM    (\nSELECT  division_id\n,       group_id      -- MAYANK : 20190519 : Added group if for correcting the Lead Items in a group also in partition criteria\n,       div_promo_grp_cd\n,       upc_id\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\n\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales\nWHERE   div_promo_grp_cd &gt; 0\n\nGROUP   BY 1,2,3,4\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY division_id, group_id, div_promo_grp_cd ORDER by cig_sum_AVG_NET_SALES_13_WK DESC, upc_id ASC) = 1\n) litm\nON      litm.division_id = dsd.division_id\nAND     litm.group_id = dsd.group_cd      -- MAYANK : 20190519 : Added group if for correcting the Lead Items in a group also in partition criteria\nAND     litm.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\nAND     litm.upc_id = dsd.upc_id\nLEFT    OUTER JOIN (\nSELECT  rog_and_cig\n,       COUNT(DISTINCT allowance_counts) AS cnt\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6\nGROUP   BY rog_and_cig\nHAVING  cnt &gt; 1\n) malw\nON      malw.rog_and_cig = dsd.rog_and_cig;\n-- EXPR_FORMAT - Convert expression FORMAT/CAST_AS_FORMAT to TO_CHAR/TO_DATE\n-- FUN_CAST_OPTR - Reformat casting\n-- NULLIFZERO: Translated NullifZero to nullif function\n-- SEL_BODY_CLAUSES_ORDER - change the order of all the clauses of a select statement\n-- MAYANK(20190425) : commented below lines to obtain group 1 reports\n-- WHERE   dsd.group_cd &gt; 1\n-- OR      (dsd.division_id = 35 AND group_cd = 1)\n</code></pre>"},{"location":"pricing_execution/#step-58","title":"Step 58","text":"<pre><code>-- Division 30, PA 19 special report\nINSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_final\n(       division_id\n,       rpt_group\n,       promo_no_allowance\n,       allow_no_promo\n,       missing_allowance\n,       cost_change\n,       ad_plan\n,       t_markdown_pctg\n,       less_10_Promo\n,       t_Allowance_pctg\n,       less_10_allowance\n,       greater_100_pass_through\n,       t_09_Retail\n,       lead_item\n,       Dominant_Price_Area\n,       t_OOB\n,       sskvi\n,       group_cd\n,       group_nm\n,       SMIC\n,       SMIC_name\n,       rog\n,       price_area_id\n,       PA_name\n,       pricing_role\n,       OOB_gap_id\n,       DIV_PROMO_GRP_CD\n,       loc_common_retail_cd\n,       vendor_name\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       cost_area_id\n,       Manuf\n,       upc_id\n,       corp_item_cd\n,       item_description\n,       DST\n,       FACILITY\n,       dst_stat\n,       rtl_stat\n,       buyer_nm\n,       vend_conv_fctr\n,       t_pack_retail_qty\n,       size_dsc\n,       Row_Offset\n,       UPC_13_Wk_Avg_Sales\n,       UPC_13_Wk_Avg_Qty\n,       UPC_13_Wk_Avg_RTL\n,       T_RANK_BY_ROG_AND_CPC\n,       pct_ACV_Stores\n,       t_CPC_13_Wk_Avg_Sales\n,       t_CPC_13_Wk_Avg_Qty\n,       t_CPC_13_Wk_Avg_RTL\n,       PND_Cost_Change_VND\n,       PND_VEN_Date_Effective\n,       New_Recc_Reg_Retail\n,       Vendor_Unit_Cost\n,       Unit_Item_Billing_Cost\n,       Prev_Retail_Price_Fctr\n,       Previous_Retail_Price\n,       Prev_Retail_Effective_Date\n,       Pending_EDLP_Mult\n,       Pending_EDLP_Retail\n,       Pending_EDLP_Chg_Date\n,       Pending_GP_pctg\n,       Reg_Retail_Price_Fctr\n,       Reg_Retail\n,       t_price_Per\n,       t_Unit\n,       Reg_GP_pctg\n,       case_allow_count\n,       case_allow_amt\n,       Case_Allow_amt_per_Unit\n,       Case_Start_Date\n,       Case_End_Date\n,       S2S_Allow_count\n,       S2S_Allow_amt\n,       S2S_Allow_amt_per_Unit\n,       S2S_Start_Date\n,       S2S_End_Date\n,       Scan_Allow_count\n,       Scan_Allow_amt\n,       Scan_Start_Date\n,       Scan_End_Date\n,       Redem_Scan_Allow_count\n,       Redem_Allow_amt\n,       Redem_Start_Date\n,       Redem_End_Date\n,       Total_Allow_Unit\n,       Net_Cost_with_Allow\n,       Promo_Multiple\n,       Promo_Price\n,       Coupon_Method\n,       Min_Purch\n,       Limit_Per_Txn\n,       Promo_GP_pctg\n,       Net_Promo_Price\n,       Price_Per\n,       t2_Unit\n,       Mark_down\n,       Promo_Start\n,       Promo_End\n,       pass_through\n,       NEW_Multiple\n,       NEW_Retail\n,       NEW_EDLP_GP_pctg\n,       NEW_Promo_Multiple\n,       NEW_Promo_Retail\n,       NEW_Promo_GPpctg\n,       NEW_Passthrough\n,       compet_code\n,       price_chk_date\n,       comp_reg_mult\n,       com_reg_price\n,       REG_CPI\n,       COMP_AD_MULT\n,       COMP_AD_PRICE\n,       Comments\n,       Modified_flag\n,       ROG_and_CIG\n,       Allowance_Counts\n,       Report_Date\n)\nSELECT  dsd.division_id\n,       'AIMT PA 19 ONLY' AS rpt_group\n,       CASE WHEN COALESCE(dsd.Net_Promo_Price, 0) &gt; 0 AND (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0)) = 0 THEN 'Y' ELSE ' ' END AS promo_no_allowance\n,       CASE WHEN COALESCE(dsd.S2S_Allow_amt, 0) + COALESCE(dsd.Scan_Allow_amt, 0) &gt; 0 AND COALESCE(dsd.Net_Promo_Price, 0) = 0 THEN 'Y' ELSE ' ' END AS allow_no_promo\n,       CASE WHEN malw.rog_and_cig IS NULL THEN ' ' ELSE 'Y' END AS missing_allowance\n,       CASE WHEN dsd.PND_Cost_Change_VND IS NULL THEN ' ' ELSE 'Y' END AS cost_change\n,       dsd.ad_plan\n,       dsd.Mark_down / NULLIF(dsd.reg_retail,'0') / NULLIF(dsd.Reg_Retail_Price_Fctr,'0') AS t_markdown_pctg -- dsd.Markdown_pctg\n,       CASE WHEN t_markdown_pctg &gt; 0 AND t_markdown_pctg &lt; 0.1 THEN 'Y' ELSE ' ' END AS less_10_Promo  -- dsd.less_10_Promo\n,       ((COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0)) / NULLIF(dsd.Vendor_Unit_Cost,'0')) ::DECIMAL(15,3) AS t_Allowance_pctg -- dsd.Allowance_pctg    -- COLUMN CH\n,       CASE WHEN t_Allowance_pctg &gt; 0 AND t_Allowance_pctg &lt; 0.1 THEN 'Y' ELSE ' ' END AS less_10_allowance  -- dsd.less_10_allowance\n,       CASE WHEN (dsd.mark_down / NULLIF(COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0),'0')) ::DECIMAL(5,2) &gt; 1 THEN 'Y' ELSE ' ' END AS greater_100_pass_through  --dsd.greater_100_pass_through\n\n--,       dsd.t_09_Retail MAYANK : 20190426 : flattening the formulas in excel\n,            CASE WHEN (round(dsd.Reg_Retail - floor(dsd.Reg_Retail),2) = 0.09) THEN 'Y' ELSE ' ' END AS t_09_Retail\n,       -- MAYANK : marking blank CIGS as Lead Item (28/03/2019)\nCASE WHEN litm.division_id IS NOT NULL THEN 'Y'  WHEN dsd.div_promo_grp_cd = 0 THEN 'Y'\n--WHEN litm.division_id IS NULL THEN ' '\nELSE ' '            END AS lead_item -- dsd.lead_item\n,       dsd.Dominant_Price_Area\n,       CASE WHEN dsd.manuf IN ('21130', '79893', '58200', '11535', '41303', '41130') THEN 'Y' ELSE ' ' END AS t_OOB  -- dsd.OOB\n,       dsd.sskvi\n,       dsd.group_cd\n,       dsd.group_nm\n,       dsd.SMIC\n,       dsd.SMIC_name\n,       CASE\nWHEN dsd.rog_cd = 'SEAS' THEN '1-SEAS'\nWHEN dsd.rog_cd = 'SEAG' THEN '2-SEAG'\nWHEN dsd.rog_cd = 'ACME' THEN '1-ACME'\nWHEN dsd.rog_cd = 'SDEN' THEN '1-SDEN'\nWHEN dsd.rog_cd = 'ADEN' THEN '2-ADEN'\nWHEN dsd.rog_cd = 'AIMT' THEN '1-AIMT'\nWHEN dsd.rog_cd = 'AJWL' THEN '1-AJWL'\nWHEN dsd.rog_cd = 'SNCA' THEN '1-SNCA'\nWHEN dsd.rog_cd = 'SHAW' THEN '2-SHAW'\nWHEN dsd.rog_cd = 'SPRT' THEN '1-SPRT'\nWHEN dsd.rog_cd = 'APOR' THEN '2-APOR'\nWHEN dsd.rog_cd = 'SSEA' THEN '1-SSEA'\nWHEN dsd.rog_cd = 'SSPK' THEN '2-SSPK'\nWHEN dsd.rog_cd = 'SACG' THEN '3-SACG'\nWHEN dsd.rog_cd = 'ASHA' THEN '1-ASHA'\nWHEN dsd.rog_cd = 'AVMT' THEN '2-AVMT'\nWHEN dsd.rog_cd = 'VSOC' THEN '1-VSOC'\nWHEN dsd.rog_cd = 'ASOC' THEN '2-ASOC'\nWHEN dsd.rog_cd = 'PSOC' THEN '3-PSOC'\nWHEN dsd.rog_cd = 'RDAL' THEN '1-RDAL'\nWHEN dsd.rog_cd = 'ADAL' THEN '2-ADAL'\nWHEN dsd.rog_cd = 'RHOU' THEN '3-RHOU'\nWHEN dsd.rog_cd = 'AHOU' THEN '4-AHOU'\nWHEN dsd.rog_cd = 'SPHO' THEN '1-SPHO'\nWHEN dsd.rog_cd = 'APHO' THEN '2-APHO'\nWHEN dsd.rog_cd = 'ALAS' THEN '3-ALAS'\nWHEN dsd.rog_cd = 'VLAS' THEN '4-VLAS'\nWHEN dsd.rog_cd = 'SPHX' THEN '5-SPHX'\nWHEN dsd.rog_cd = 'TEST' THEN '6-TEST'\nELSE dsd.rog_cd\nEND ::VARCHAR(10) AS rog\n,       dsd.price_area_id               -- COLUMN S\n,       dsd.PA_name                     -- COLUMN T\n,       dsd.pricing_role\n,       dsd.OOB_gap_id\n,       dsd.DIV_PROMO_GRP_CD            -- COLUMN W CIG\n,       dsd.loc_common_retail_cd        -- COLUMN X\n,       dsd.vendor_name\n,       dsd.vend_nbr\n,       dsd.vend_sub_acct_nbr\n,       dsd.cost_area_id\n,       dsd.Manuf\n,       dsd.upc_id\n,       dsd.corp_item_cd\n,       dsd.item_description\n,       dsd.DST\n,       dsd.FACILITY\n,       dsd.dst_stat\n,       dsd.rtl_stat\n,       dsd.buyer_nm\n,       dsd.vend_conv_fctr\n,       dsd.t_pack_retail_qty\n,       dsd.size_dsc\n,       dsd.Row_Offset\n,       sua.AVG_NET_SALES_13_WK     AS UPC_13_Wk_Avg_Sales           -- COLUMN: AP\n,       sua.AVG_ITEM_QTY_13_WK      AS UPC_13_Wk_Avg_Qty\n,       sua.AVG_NET_SALES_13_WK / NULLIF(sua.AVG_ITEM_QTY_13_WK,'0') AS UPC_13_Wk_Avg_RTL  -- dsd.UPC_13_Wk_Avg_RTL\n,       CASE WHEN litm.division_id IS NULL THEN NULL ELSE 1 END ::INTEGER AS T_RANK_BY_ROG_AND_CPC\n,       (sua.NUM_STORES_SELLING * 1.00) / (sua.NUM_STORES_IN_ROG * 1.00) * 100 ::DECIMAL(5,2) AS pct_ACV_Stores\n--,       COALESCE(cig.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK) AS t_CPC_13_Wk_Avg_Sales -- dsd.CPC_13_Wk_Avg_Sales   -- COLUMN: AU\n,        CASE WHEN dsd.div_promo_grp_cd = 0 THEN COALESCE(cig_upc.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK)\nELSE COALESCE(cig.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK)\nEND AS t_CPC_13_Wk_Avg_Sales -- dsd.CPC_13_Wk_Avg_Sales   -- COLUMN: AU\n--,       COALESCE(cig.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK) AS t_CPC_13_Wk_Avg_Qty  -- dsd.CPC_13_Wk_Avg_Qty\n,       CASE\nWHEN dsd.div_promo_grp_cd = 0 THEN COALESCE(cig_upc.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK)\nELSE COALESCE(cig.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK)\nEND AS t_CPC_13_Wk_Avg_Qty  -- dsd.t_CPC_13_Wk_Avg_Qty\n,       t_CPC_13_Wk_Avg_Sales / NULLIF(t_CPC_13_Wk_Avg_Qty,'0')  AS t_CPC_13_Wk_Avg_RTL  --dsd.CPC_13_Wk_Avg_RTL\n,       dsd.PND_Cost_Change_VND\n,       dsd.PND_VEN_Date_Effective\n--,       dsd.New_Recc_Reg_Retail MAYANK : 20190426 : flattening the formulas in excel\n,            (dsd.PND_Cost_Change_VND/NULLIF(dsd.Vendor_Unit_Cost,'0'))*dsd.Reg_Retail ::DECIMAL(18,3) as New_Recc_Reg_Retail\n,       dsd.Vendor_Unit_Cost\n,       dsd.Unit_Item_Billing_Cost\n,       dsd.Prev_Retail_Price_Fctr\n,       dsd.Previous_Retail_Price\n,       dsd.Prev_Retail_Effective_Date\n,       dsd.Pending_EDLP_Mult\n,       dsd.Pending_EDLP_Retail\n,       dsd.Pending_EDLP_Chg_Date\n--,       dsd.Pending_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,            ((dsd.Pending_EDLP_Retail/NULLIF(dsd.Pending_EDLP_Mult,'0'))-dsd.Unit_Item_Billing_Cost)/NULLIF((dsd.Pending_EDLP_Retail/NULLIF(dsd.Pending_EDLP_Mult,'0')),'0') ::DECIMAL(15,3) as Pending_GP_pctg\n,       dsd.Reg_Retail_Price_Fctr\n,       dsd.Reg_Retail\n,       dsd.t_price_Per\n,       dsd.t_Unit\n--,       dsd.Reg_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,            ((dsd.Reg_Retail/NULLIF(dsd.Reg_Retail_Price_Fctr,'0'))-dsd.Unit_Item_Billing_Cost)/NULLIF((dsd.Reg_Retail/NULLIF(dsd.Reg_Retail_Price_Fctr,'0')),'0') ::DECIMAL(15,3) as Reg_GP_pctg\n,       dsd.case_allow_count\n,       dsd.case_allow_amt            AS case_allow_amt\n,       dsd.Case_Allow_amt_per_Unit   AS Case_Allow_amt_per_Unit\n,       dsd.Case_Start_Date\n,       dsd.Case_End_Date\n,       dsd.S2S_Allow_count\n,       dsd.S2S_Allow_amt             AS S2S_Allow_amt\n,       dsd.S2S_Allow_amt_per_Unit    AS S2S_Allow_amt_per_Unit\n,       dsd.S2S_Start_Date\n,       dsd.S2S_End_Date\n,       dsd.Scan_Allow_count\n,       dsd.Scan_Allow_amt            AS Scan_Allow_amt\n,       dsd.Scan_Start_Date\n,       dsd.Scan_End_Date\n,       dsd.Redem_Scan_Allow_count\n,       dsd.Redem_Allow_amt           AS Redem_Allow_amt\n,       dsd.Redem_Start_Date\n,       dsd.Redem_End_Date\n,       COALESCE(dsd.Case_Allow_amt_per_Unit, 0) +  COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) +  COALESCE(dsd.Scan_Allow_amt, 0) AS Total_Allow_Unit\n--,       dsd.Net_Cost_with_Allow MAYANK : 20190426 : flattening the formulas in excel\n,            dsd.Vendor_Unit_Cost - (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0)) ::DECIMAL(18,3) as Net_Cost_with_Allow\n,       dsd.Promo_Multiple\n,       dsd.Promo_Price\n,       dsd.Coupon_Method\n,       dsd.Min_Purch\n,       dsd.Limit_Per_Txn\n--,       dsd.Promo_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,            ((dsd.Net_Promo_Price - (dsd.Vendor_Unit_Cost - (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0))))/NULLIF(dsd.Net_Promo_Price,'0')) ::DECIMAL(15,3) as Promo_GP_pctg\n,       dsd.Net_Promo_Price\n,       dsd.Price_Per\n,       dsd.t2_Unit\n,       dsd.Mark_down\n,       dsd.Promo_Start\n,       dsd.Promo_End\n,       (dsd.mark_down / NULLIF(COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0),'0')) ::DECIMAL(5,2) AS pass_through  -- dsd.Pass_Through  -- COLUMN CW\n,       dsd.NEW_Multiple\n,       dsd.NEW_Retail\n,       dsd.NEW_EDLP_GP_pctg\n,       dsd.NEW_Promo_Multiple\n,       dsd.NEW_Promo_Retail\n,       dsd.NEW_Promo_GPpctg\n,       dsd.NEW_Passthrough\n,       dsd.compet_code\n,       dsd.price_chk_date\n,       dsd.comp_reg_mult\n,       dsd.com_reg_price\n--,       dsd.REG_CPI MAYANK : 20190426 : flattening the formulas in excel\n,        CASE WHEN com_reg_price&gt;0 THEN (dsd.Reg_Retail/GREATEST(dsd.Reg_Retail_Price_Fctr,1) - dsd.com_reg_price/GREATEST(dsd.comp_reg_mult,1))/NULLIF(dsd.Reg_Retail/ GREATEST(dsd.Reg_Retail_Price_Fctr,1),'0')\nELSE NULL\nEND ::DECIMAL(18,3) AS REG_CPI\n,       dsd.COMP_AD_MULT\n,       dsd.COMP_AD_PRICE\n,       dsd.Comments\n,       dsd.Modified_flag\n,       dsd.ROG_and_CIG\n,       dsd.Allowance_Counts\n,       dsd.Report_Date\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6 dsd\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases sua\nON      sua.rog_cd = dsd.rog_cd\nAND     sua.upc_id = dsd.upc_id\nAND     sua.rpt_group = 'S30_02'\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       upc_id\n,       SUM(AVG_NET_SALES_13_WK) AS upc_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS upc_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nWHERE   rpt_group = 'S30_02'\nGROUP   BY 1,2\n) upc\nON      upc.division_id = dsd.division_id\nAND     upc.upc_id      = dsd.upc_id\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       DIV_PROMO_GRP_CD\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS cig_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nWHERE   rpt_group = 'S30_02'\nGROUP   BY 1,2\n) cig\nON      cig.division_id = dsd.division_id\nAND     cig.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\n--      MAYANK : 20190625 : creating this table for matching the upc and cig sales for blank cigs.\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       upc_id\n,       DIV_PROMO_GRP_CD\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS cig_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nGROUP   BY 1,2,3\n) cig_upc\nON      cig_upc.division_id = dsd.division_id\nAND     cig_upc.upc_id = dsd.upc_id\nAND     cig_upc.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       div_promo_grp_cd\n,       upc_id\nFROM    (\nSELECT  division_id\n,       div_promo_grp_cd\n,       upc_id\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nWHERE   div_promo_grp_cd &gt; 0\nAND     rpt_group = 'S30_02'\nGROUP   BY 1,2,3\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY division_id, div_promo_grp_cd ORDER by cig_sum_AVG_NET_SALES_13_WK DESC, upc_id ASC) = 1\n) litm\nON      litm.division_id = dsd.division_id\nAND     litm.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\nAND     litm.upc_id = dsd.upc_id\nLEFT    OUTER JOIN (\nSELECT  rog_and_cig\n,       COUNT(DISTINCT allowance_counts) AS cnt\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6\nGROUP   BY rog_and_cig\nHAVING  cnt &gt; 1\n) malw\nON      malw.rog_and_cig = dsd.rog_and_cig\nWHERE   dsd.division_id = 30\nand     dsd.price_area_id = 19;\n-- FUN_CAST_OPTR - Reformat casting\n-- NULLIFZERO: Translated NullifZero to nullif function\n-- MAYANK(20190425) : commented below lines to obtain group 1 reports\n-- AND     dsd.group_cd &gt; 1;\n</code></pre>"},{"location":"pricing_execution/#step-59","title":"Step 59","text":"<pre><code>sql_step59 = \"\"\"\n-- Division 30, PA 13 &amp; 14 special report\nINSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_final\n(       division_id\n,       rpt_group\n,       promo_no_allowance\n,       allow_no_promo\n,       missing_allowance\n,       cost_change\n,       ad_plan\n,       t_markdown_pctg\n,       less_10_Promo\n,       t_Allowance_pctg\n,       less_10_allowance\n,       greater_100_pass_through\n,       t_09_Retail\n,       lead_item\n,       Dominant_Price_Area\n,       t_OOB\n,       sskvi\n,       group_cd\n,       group_nm\n,       SMIC\n,       SMIC_name\n,       rog\n,       price_area_id\n,       PA_name\n,       pricing_role\n,       OOB_gap_id\n,       DIV_PROMO_GRP_CD\n,       loc_common_retail_cd\n,       vendor_name\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       cost_area_id\n,       Manuf\n,       upc_id\n,       corp_item_cd\n,       item_description\n,       DST\n,       FACILITY\n,       dst_stat\n,       rtl_stat\n,       buyer_nm\n,       vend_conv_fctr\n,       t_pack_retail_qty\n,       size_dsc\n,       Row_Offset\n,       UPC_13_Wk_Avg_Sales\n,       UPC_13_Wk_Avg_Qty\n,       UPC_13_Wk_Avg_RTL\n,       T_RANK_BY_ROG_AND_CPC\n,       pct_ACV_Stores\n,       t_CPC_13_Wk_Avg_Sales\n,       t_CPC_13_Wk_Avg_Qty\n,       t_CPC_13_Wk_Avg_RTL\n,       PND_Cost_Change_VND\n,       PND_VEN_Date_Effective\n,       New_Recc_Reg_Retail\n,       Vendor_Unit_Cost\n,       Unit_Item_Billing_Cost\n,       Prev_Retail_Price_Fctr\n,       Previous_Retail_Price\n,       Prev_Retail_Effective_Date\n,       Pending_EDLP_Mult\n,       Pending_EDLP_Retail\n,       Pending_EDLP_Chg_Date\n,       Pending_GP_pctg\n,       Reg_Retail_Price_Fctr\n,       Reg_Retail\n,       t_price_Per\n,       t_Unit\n,       Reg_GP_pctg\n,       case_allow_count\n,       case_allow_amt\n,       Case_Allow_amt_per_Unit\n,       Case_Start_Date\n,       Case_End_Date\n,       S2S_Allow_count\n,       S2S_Allow_amt\n,       S2S_Allow_amt_per_Unit\n,       S2S_Start_Date\n,       S2S_End_Date\n,       Scan_Allow_count\n,       Scan_Allow_amt\n,       Scan_Start_Date\n,       Scan_End_Date\n,       Redem_Scan_Allow_count\n,       Redem_Allow_amt\n,       Redem_Start_Date\n,       Redem_End_Date\n,       Total_Allow_Unit\n,       Net_Cost_with_Allow\n,       Promo_Multiple\n,       Promo_Price\n,       Coupon_Method\n,       Min_Purch\n,       Limit_Per_Txn\n,       Promo_GP_pctg\n,       Net_Promo_Price\n,       Price_Per\n,       t2_Unit\n,       Mark_down\n,       Promo_Start\n,       Promo_End\n,       pass_through\n,       NEW_Multiple\n,       NEW_Retail\n,       NEW_EDLP_GP_pctg\n,       NEW_Promo_Multiple\n,       NEW_Promo_Retail\n,       NEW_Promo_GPpctg\n,       NEW_Passthrough\n,       compet_code\n,       price_chk_date\n,       comp_reg_mult\n,       com_reg_price\n,       REG_CPI\n,       COMP_AD_MULT\n,       COMP_AD_PRICE\n,       Comments\n,       Modified_flag\n,       ROG_and_CIG\n,       Allowance_Counts\n,       Report_Date\n)\nSELECT  dsd.division_id\n,       'AIMT PAs 13 &amp; 14 ONLY' AS rpt_group\n,       CASE WHEN COALESCE(dsd.Net_Promo_Price, 0) &gt; 0 AND (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0)) = 0 THEN 'Y' ELSE ' ' END AS promo_no_allowance\n,       CASE WHEN COALESCE(dsd.S2S_Allow_amt, 0) + COALESCE(dsd.Scan_Allow_amt, 0) &gt; 0 AND COALESCE(dsd.Net_Promo_Price, 0) = 0 THEN 'Y' ELSE ' ' END AS allow_no_promo\n,       CASE WHEN malw.rog_and_cig IS NULL THEN ' ' ELSE 'Y' END AS missing_allowance\n,       CASE WHEN dsd.PND_Cost_Change_VND IS NULL THEN ' ' ELSE 'Y' END AS cost_change\n,       dsd.ad_plan\n,       dsd.Mark_down / NULLIF(dsd.reg_retail,'0') / NULLIF(dsd.Reg_Retail_Price_Fctr,'0') AS t_markdown_pctg -- dsd.Markdown_pctg\n,       CASE WHEN t_markdown_pctg &gt; 0 AND t_markdown_pctg &lt; 0.1 THEN 'Y' ELSE ' ' END AS less_10_Promo  -- dsd.less_10_Promo\n,       ((COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0)) / NULLIF(dsd.Vendor_Unit_Cost,'0')) ::DECIMAL(15,3) AS t_Allowance_pctg -- dsd.Allowance_pctg    -- COLUMN CH\n,       CASE WHEN t_Allowance_pctg &gt; 0 AND t_Allowance_pctg &lt; 0.1 THEN 'Y' ELSE ' ' END AS less_10_allowance  -- dsd.less_10_allowance\n,       CASE WHEN (dsd.mark_down / NULLIF(COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0),'0')) ::DECIMAL(5,2) &gt; 1 THEN 'Y' ELSE ' ' END AS greater_100_pass_through  --dsd.greater_100_pass_through\n\n--,       dsd.t_09_Retail MAYANK : 20190426 : flattening the formulas in excel\n,            CASE WHEN (round(dsd.Reg_Retail - floor(dsd.Reg_Retail),2) = 0.09) THEN 'Y' ELSE ' ' END AS t_09_Retail ,       -- MAYANK : marking blank CIGS as Lead Item (28/03/2019)\nCASE WHEN litm.division_id IS NOT NULL THEN 'Y'  WHEN dsd.div_promo_grp_cd = 0 THEN 'Y'\n--WHEN litm.division_id IS NULL THEN ' '\nELSE ' '            END AS lead_item -- dsd.lead_item\n,       dsd.Dominant_Price_Area\n,       CASE WHEN dsd.manuf IN ('21130', '79893', '58200', '11535', '41303', '41130') THEN 'Y' ELSE ' ' END AS t_OOB  -- dsd.OOB\n,       dsd.sskvi\n,       dsd.group_cd\n,       dsd.group_nm\n,       dsd.SMIC\n,       dsd.SMIC_name\n,       CASE\nWHEN dsd.rog_cd = 'SEAS' THEN '1-SEAS'\nWHEN dsd.rog_cd = 'SEAG' THEN '2-SEAG'\nWHEN dsd.rog_cd = 'ACME' THEN '1-ACME'\nWHEN dsd.rog_cd = 'SDEN' THEN '1-SDEN'\nWHEN dsd.rog_cd = 'ADEN' THEN '2-ADEN'\nWHEN dsd.rog_cd = 'AIMT' THEN '1-AIMT'\nWHEN dsd.rog_cd = 'AJWL' THEN '1-AJWL'\nWHEN dsd.rog_cd = 'SNCA' THEN '1-SNCA'\nWHEN dsd.rog_cd = 'SHAW' THEN '2-SHAW'\nWHEN dsd.rog_cd = 'SPRT' THEN '1-SPRT'\nWHEN dsd.rog_cd = 'APOR' THEN '2-APOR'\nWHEN dsd.rog_cd = 'SSEA' THEN '1-SSEA'\nWHEN dsd.rog_cd = 'SSPK' THEN '2-SSPK'\nWHEN dsd.rog_cd = 'SACG' THEN '3-SACG'\nWHEN dsd.rog_cd = 'ASHA' THEN '1-ASHA'\nWHEN dsd.rog_cd = 'AVMT' THEN '2-AVMT'\nWHEN dsd.rog_cd = 'VSOC' THEN '1-VSOC'\nWHEN dsd.rog_cd = 'ASOC' THEN '2-ASOC'\nWHEN dsd.rog_cd = 'PSOC' THEN '3-PSOC'\nWHEN dsd.rog_cd = 'RDAL' THEN '1-RDAL'\nWHEN dsd.rog_cd = 'ADAL' THEN '2-ADAL'\nWHEN dsd.rog_cd = 'RHOU' THEN '3-RHOU'\nWHEN dsd.rog_cd = 'AHOU' THEN '4-AHOU'\nWHEN dsd.rog_cd = 'SPHO' THEN '1-SPHO'\nWHEN dsd.rog_cd = 'APHO' THEN '2-APHO'\nWHEN dsd.rog_cd = 'ALAS' THEN '3-ALAS'\nWHEN dsd.rog_cd = 'VLAS' THEN '4-VLAS'\nWHEN dsd.rog_cd = 'SPHX' THEN '5-SPHX'\nWHEN dsd.rog_cd = 'TEST' THEN '6-TEST'\nELSE dsd.rog_cd\nEND ::VARCHAR(10) AS rog\n,       dsd.price_area_id               -- COLUMN S\n,       dsd.PA_name                     -- COLUMN T\n,       dsd.pricing_role\n,       dsd.OOB_gap_id\n,       dsd.DIV_PROMO_GRP_CD            -- COLUMN W CIG\n,       dsd.loc_common_retail_cd        -- COLUMN X\n,       dsd.vendor_name\n,       dsd.vend_nbr\n,       dsd.vend_sub_acct_nbr\n,       dsd.cost_area_id\n,       dsd.Manuf\n,       dsd.upc_id\n,       dsd.corp_item_cd\n,       dsd.item_description\n,       dsd.DST\n,       dsd.FACILITY\n,       dsd.dst_stat\n,       dsd.rtl_stat\n,       dsd.buyer_nm\n,       dsd.vend_conv_fctr\n,       dsd.t_pack_retail_qty\n,       dsd.size_dsc\n,       dsd.Row_Offset\n,       sua.AVG_NET_SALES_13_WK     AS UPC_13_Wk_Avg_Sales           -- COLUMN: AP\n,       sua.AVG_ITEM_QTY_13_WK      AS UPC_13_Wk_Avg_Qty\n,       sua.AVG_NET_SALES_13_WK / NULLIF(sua.AVG_ITEM_QTY_13_WK,'0') AS UPC_13_Wk_Avg_RTL  -- dsd.UPC_13_Wk_Avg_RTL\n,       CASE WHEN litm.division_id IS NULL THEN NULL ELSE 1 END ::INTEGER AS T_RANK_BY_ROG_AND_CPC\n,       (sua.NUM_STORES_SELLING * 1.00) / (sua.NUM_STORES_IN_ROG * 1.00) * 100 ::DECIMAL(5,2) AS pct_ACV_Stores\n--,       COALESCE(cig.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK) AS t_CPC_13_Wk_Avg_Sales -- dsd.CPC_13_Wk_Avg_Sales   -- COLUMN: AU\n,        CASE WHEN dsd.div_promo_grp_cd = 0 THEN COALESCE(cig_upc.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK)\nELSE COALESCE(cig.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK)\nEND AS t_CPC_13_Wk_Avg_Sales -- dsd.CPC_13_Wk_Avg_Sales   -- COLUMN: AU\n--,       COALESCE(cig.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK) AS t_CPC_13_Wk_Avg_Qty  -- dsd.CPC_13_Wk_Avg_Qty\n,       CASE\nWHEN dsd.div_promo_grp_cd = 0 THEN COALESCE(cig_upc.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK)\nELSE COALESCE(cig.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK)\nEND AS t_CPC_13_Wk_Avg_Qty  -- dsd.t_CPC_13_Wk_Avg_Qty\n,       t_CPC_13_Wk_Avg_Sales / NULLIF(t_CPC_13_Wk_Avg_Qty,'0')  AS t_CPC_13_Wk_Avg_RTL  --dsd.CPC_13_Wk_Avg_RTL\n,       dsd.PND_Cost_Change_VND\n,       dsd.PND_VEN_Date_Effective\n--,       dsd.New_Recc_Reg_Retail MAYANK : 20190426 : flattening the formulas in excel\n,            (dsd.PND_Cost_Change_VND/NULLIF(dsd.Vendor_Unit_Cost,'0'))*dsd.Reg_Retail ::DECIMAL(18,3) as New_Recc_Reg_Retail\n,       dsd.Vendor_Unit_Cost\n,       dsd.Unit_Item_Billing_Cost\n,       dsd.Prev_Retail_Price_Fctr\n,       dsd.Previous_Retail_Price\n,       dsd.Prev_Retail_Effective_Date\n,       dsd.Pending_EDLP_Mult\n,       dsd.Pending_EDLP_Retail\n,       dsd.Pending_EDLP_Chg_Date\n--,       dsd.Pending_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,            ((dsd.Pending_EDLP_Retail/NULLIF(dsd.Pending_EDLP_Mult,'0'))-dsd.Unit_Item_Billing_Cost)/NULLIF((dsd.Pending_EDLP_Retail/NULLIF(dsd.Pending_EDLP_Mult,'0')),'0') ::DECIMAL(15,3) as Pending_GP_pctg\n,       dsd.Reg_Retail_Price_Fctr\n,       dsd.Reg_Retail\n,       dsd.t_price_Per\n,       dsd.t_Unit\n--,       dsd.Reg_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,            ((dsd.Reg_Retail/NULLIF(dsd.Reg_Retail_Price_Fctr,'0'))-dsd.Unit_Item_Billing_Cost)/NULLIF((dsd.Reg_Retail/NULLIF(dsd.Reg_Retail_Price_Fctr,'0')),'0') ::DECIMAL(15,3) as Reg_GP_pctg\n,       dsd.case_allow_count\n,       dsd.case_allow_amt            AS case_allow_amt\n,       dsd.Case_Allow_amt_per_Unit   AS Case_Allow_amt_per_Unit\n,       dsd.Case_Start_Date\n,       dsd.Case_End_Date\n,       dsd.S2S_Allow_count\n,       dsd.S2S_Allow_amt             AS S2S_Allow_amt\n,       dsd.S2S_Allow_amt_per_Unit    AS S2S_Allow_amt_per_Unit\n,       dsd.S2S_Start_Date\n,       dsd.S2S_End_Date\n,       dsd.Scan_Allow_count\n,       dsd.Scan_Allow_amt            AS Scan_Allow_amt\n,       dsd.Scan_Start_Date\n,       dsd.Scan_End_Date\n,       dsd.Redem_Scan_Allow_count\n,       dsd.Redem_Allow_amt           AS Redem_Allow_amt\n,       dsd.Redem_Start_Date\n,       dsd.Redem_End_Date\n,       COALESCE(dsd.Case_Allow_amt_per_Unit, 0) +  COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) +  COALESCE(dsd.Scan_Allow_amt, 0) AS Total_Allow_Unit\n--,       dsd.Net_Cost_with_Allow MAYANK : 20190426 : flattening the formulas in excel\n,        (dsd.Vendor_Unit_Cost - (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0))) ::DECIMAL(18,3) as Net_Cost_with_Allow\n,       dsd.Promo_Multiple\n,       dsd.Promo_Price\n,       dsd.Coupon_Method\n,       dsd.Min_Purch\n,       dsd.Limit_Per_Txn\n--,       dsd.Promo_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,        ((dsd.Net_Promo_Price - (dsd.Vendor_Unit_Cost - (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0))))/NULLIF(dsd.Net_Promo_Price,'0')) ::DECIMAL(15,3) as Promo_GP_pctg\n,       dsd.Net_Promo_Price\n,       dsd.Price_Per\n,       dsd.t2_Unit\n,       dsd.Mark_down\n,       dsd.Promo_Start\n,       dsd.Promo_End\n,       (dsd.mark_down / NULLIF(COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0),'0')) ::DECIMAL(5,2) AS pass_through  -- dsd.Pass_Through  -- COLUMN CW\n,       dsd.NEW_Multiple\n,       dsd.NEW_Retail\n,       dsd.NEW_EDLP_GP_pctg\n,       dsd.NEW_Promo_Multiple\n,       dsd.NEW_Promo_Retail\n,       dsd.NEW_Promo_GPpctg\n,       dsd.NEW_Passthrough\n,       dsd.compet_code\n,       dsd.price_chk_date\n,       dsd.comp_reg_mult\n,       dsd.com_reg_price\n--,       dsd.REG_CPI MAYANK : 20190426 : flattening the formulas in excel\n,        CASE WHEN com_reg_price&gt;0 THEN (dsd.Reg_Retail/GREATEST(dsd.Reg_Retail_Price_Fctr,1) - dsd.com_reg_price/GREATEST(dsd.comp_reg_mult,1))/NULLIF(dsd.Reg_Retail/ GREATEST(dsd.Reg_Retail_Price_Fctr,1),'0')\nELSE NULL\nEND ::DECIMAL(18,3) AS REG_CPI\n,       dsd.COMP_AD_MULT\n,       dsd.COMP_AD_PRICE\n,       dsd.Comments\n,       dsd.Modified_flag\n,       dsd.ROG_and_CIG\n,       dsd.Allowance_Counts\n,       dsd.Report_Date\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6 dsd\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases sua\nON      sua.rog_cd = dsd.rog_cd\nAND     sua.upc_id = dsd.upc_id\nAND     sua.rpt_group = 'S30_03'\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       upc_id\n,       SUM(AVG_NET_SALES_13_WK) AS upc_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS upc_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nWHERE   rpt_group = 'S30_03'\nGROUP   BY 1,2\n) upc\nON      upc.division_id = dsd.division_id\nAND     upc.upc_id      = dsd.upc_id\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       DIV_PROMO_GRP_CD\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS cig_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nWHERE   rpt_group = 'S30_03'\nGROUP   BY 1,2\n) cig\nON      cig.division_id = dsd.division_id\nAND     cig.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\n--      MAYANK : 20190625 : creating this table for matching the upc and cig sales for blank cigs.\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       upc_id\n,       DIV_PROMO_GRP_CD\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS cig_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nGROUP   BY 1,2,3\n) cig_upc\nON      cig_upc.division_id = dsd.division_id\nAND     cig_upc.upc_id = dsd.upc_id\nAND     cig_upc.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       div_promo_grp_cd\n,       upc_id\nFROM    (\nSELECT  division_id\n,       div_promo_grp_cd\n,       upc_id\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nWHERE   div_promo_grp_cd &gt; 0\nAND     rpt_group = 'S30_03'\nGROUP   BY 1,2,3\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY division_id, div_promo_grp_cd ORDER by cig_sum_AVG_NET_SALES_13_WK DESC, upc_id ASC) = 1\n) litm\nON      litm.division_id = dsd.division_id\nAND     litm.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\nAND     litm.upc_id = dsd.upc_id\nLEFT    OUTER JOIN (\nSELECT  rog_and_cig\n,       COUNT(DISTINCT allowance_counts) AS cnt\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6\nGROUP   BY rog_and_cig\nHAVING  cnt &gt; 1\n) malw\nON      malw.rog_and_cig = dsd.rog_and_cig\nWHERE   dsd.division_id = 30\nand     dsd.price_area_id IN (13, 14);\n-- FUN_CAST_OPTR - Reformat casting\n-- NULLIFZERO: Translated NullifZero to nullif function\n-- MAYANK(20190425) : commented below lines to obtain group 1 reports\n-- AND     dsd.group_cd &gt; 1;\n</code></pre>"},{"location":"pricing_execution/#step-60","title":"Step 60:","text":"<pre><code>sql_step60 = \"\"\"\n-- Division 29, PA 88 &amp; 89 special report\nINSERT\nINTO    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_final\n(       division_id\n,       rpt_group\n,       promo_no_allowance\n,       allow_no_promo\n,       missing_allowance\n,       cost_change\n,       ad_plan\n,       t_markdown_pctg\n,       less_10_Promo\n,       t_Allowance_pctg\n,       less_10_allowance\n,       greater_100_pass_through\n,       t_09_Retail\n,       lead_item\n,       Dominant_Price_Area\n,       t_OOB\n,       sskvi\n,       group_cd\n,       group_nm\n,       SMIC\n,       SMIC_name\n,       rog\n,       price_area_id\n,       PA_name\n,       pricing_role\n,       OOB_gap_id\n,       DIV_PROMO_GRP_CD\n,       loc_common_retail_cd\n,       vendor_name\n,       vend_nbr\n,       vend_sub_acct_nbr\n,       cost_area_id\n,       Manuf\n,       upc_id\n,       corp_item_cd\n,       item_description\n,       DST\n,       FACILITY\n,       dst_stat\n,       rtl_stat\n,       buyer_nm\n,       vend_conv_fctr\n,       t_pack_retail_qty\n,       size_dsc\n,       Row_Offset\n,       UPC_13_Wk_Avg_Sales\n,       UPC_13_Wk_Avg_Qty\n,       UPC_13_Wk_Avg_RTL\n,       T_RANK_BY_ROG_AND_CPC\n,       pct_ACV_Stores\n,       t_CPC_13_Wk_Avg_Sales\n,       t_CPC_13_Wk_Avg_Qty\n,       t_CPC_13_Wk_Avg_RTL\n,       PND_Cost_Change_VND\n,       PND_VEN_Date_Effective\n,       New_Recc_Reg_Retail\n,       Vendor_Unit_Cost\n,       Unit_Item_Billing_Cost\n,       Prev_Retail_Price_Fctr\n,       Previous_Retail_Price\n,       Prev_Retail_Effective_Date\n,       Pending_EDLP_Mult\n,       Pending_EDLP_Retail\n,       Pending_EDLP_Chg_Date\n,       Pending_GP_pctg\n,       Reg_Retail_Price_Fctr\n,       Reg_Retail\n,       t_price_Per\n,       t_Unit\n,       Reg_GP_pctg\n,       case_allow_count\n,       case_allow_amt\n,       Case_Allow_amt_per_Unit\n,       Case_Start_Date\n,       Case_End_Date\n,       S2S_Allow_count\n,       S2S_Allow_amt\n,       S2S_Allow_amt_per_Unit\n,       S2S_Start_Date\n,       S2S_End_Date\n,       Scan_Allow_count\n,       Scan_Allow_amt\n,       Scan_Start_Date\n,       Scan_End_Date\n,       Redem_Scan_Allow_count\n,       Redem_Allow_amt\n,       Redem_Start_Date\n,       Redem_End_Date\n,       Total_Allow_Unit\n,       Net_Cost_with_Allow\n,       Promo_Multiple\n,       Promo_Price\n,       Coupon_Method\n,       Min_Purch\n,       Limit_Per_Txn\n,       Promo_GP_pctg\n,       Net_Promo_Price\n,       Price_Per\n,       t2_Unit\n,       Mark_down\n,       Promo_Start\n,       Promo_End\n,       pass_through\n,       NEW_Multiple\n,       NEW_Retail\n,       NEW_EDLP_GP_pctg\n,       NEW_Promo_Multiple\n,       NEW_Promo_Retail\n,       NEW_Promo_GPpctg\n,       NEW_Passthrough\n,       compet_code\n,       price_chk_date\n,       comp_reg_mult\n,       com_reg_price\n,       REG_CPI\n,       COMP_AD_MULT\n,       COMP_AD_PRICE\n,       Comments\n,       Modified_flag\n,       ROG_and_CIG\n,       Allowance_Counts\n,       Report_Date\n)\nSELECT  dsd.division_id\n,       'PSOC 88, 89' AS rpt_group\n,       CASE WHEN COALESCE(dsd.Net_Promo_Price, 0) &gt; 0 AND (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0)) = 0 THEN 'Y' ELSE ' ' END AS promo_no_allowance\n,       CASE WHEN COALESCE(dsd.S2S_Allow_amt, 0) + COALESCE(dsd.Scan_Allow_amt, 0) &gt; 0 AND COALESCE(dsd.Net_Promo_Price, 0) = 0 THEN 'Y' ELSE ' ' END AS allow_no_promo\n,       CASE WHEN malw.rog_and_cig IS NULL THEN ' ' ELSE 'Y' END AS missing_allowance\n,       CASE WHEN dsd.PND_Cost_Change_VND IS NULL THEN ' ' ELSE 'Y' END AS cost_change\n,       dsd.ad_plan\n,       dsd.Mark_down / NULLIF(dsd.reg_retail,'0') / NULLIF(dsd.Reg_Retail_Price_Fctr,'0') AS t_markdown_pctg -- dsd.Markdown_pctg\n,       CASE WHEN t_markdown_pctg &gt; 0 AND t_markdown_pctg &lt; 0.1 THEN 'Y' ELSE ' ' END AS less_10_Promo  -- dsd.less_10_Promo\n,       (((COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0))) / NULLIF(dsd.Vendor_Unit_Cost,'0')) ::DECIMAL(15,3) AS t_Allowance_pctg -- dsd.Allowance_pctg    -- COLUMN CH\n,       CASE WHEN t_Allowance_pctg &gt; 0 AND t_Allowance_pctg &lt; 0.1 THEN 'Y' ELSE ' ' END AS less_10_allowance  -- dsd.less_10_allowance\n,       CASE WHEN (dsd.mark_down / NULLIF(COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0),'0')) ::DECIMAL(5,2) &gt; 1 THEN 'Y' ELSE ' ' END AS greater_100_pass_through  --dsd.greater_100_pass_through\n\n--,       dsd.t_09_Retail MAYANK : 20190426 : flattening the formulas in excel\n,       CASE WHEN (round(dsd.Reg_Retail - floor(dsd.Reg_Retail),2) = 0.09) THEN 'Y' ELSE ' ' END AS t_09_Retail ,       -- MAYANK : marking blank CIGS as Lead Item (28/03/2019)\nCASE WHEN litm.division_id IS NOT NULL THEN 'Y'  WHEN dsd.div_promo_grp_cd = 0 THEN 'Y'\n--WHEN litm.division_id IS NULL THEN ' '\nELSE ' '            END AS lead_item -- dsd.lead_item\n,       dsd.Dominant_Price_Area\n,       CASE WHEN dsd.manuf IN ('21130', '79893', '58200', '11535', '41303', '41130') THEN 'Y' ELSE ' ' END AS t_OOB  -- dsd.OOB\n,       dsd.sskvi\n,       dsd.group_cd\n,       dsd.group_nm\n,       dsd.SMIC\n,       dsd.SMIC_name\n,       CASE\nWHEN dsd.rog_cd = 'SEAS' THEN '1-SEAS'\nWHEN dsd.rog_cd = 'SEAG' THEN '2-SEAG'\nWHEN dsd.rog_cd = 'ACME' THEN '1-ACME'\nWHEN dsd.rog_cd = 'SDEN' THEN '1-SDEN'\nWHEN dsd.rog_cd = 'ADEN' THEN '2-ADEN'\nWHEN dsd.rog_cd = 'AIMT' THEN '1-AIMT'\nWHEN dsd.rog_cd = 'AJWL' THEN '1-AJWL'\nWHEN dsd.rog_cd = 'SNCA' THEN '1-SNCA'\nWHEN dsd.rog_cd = 'SHAW' THEN '2-SHAW'\nWHEN dsd.rog_cd = 'SPRT' THEN '1-SPRT'\nWHEN dsd.rog_cd = 'APOR' THEN '2-APOR'\nWHEN dsd.rog_cd = 'SSEA' THEN '1-SSEA'\nWHEN dsd.rog_cd = 'SSPK' THEN '2-SSPK'\nWHEN dsd.rog_cd = 'SACG' THEN '3-SACG'\nWHEN dsd.rog_cd = 'ASHA' THEN '1-ASHA'\nWHEN dsd.rog_cd = 'AVMT' THEN '2-AVMT'\nWHEN dsd.rog_cd = 'VSOC' THEN '1-VSOC'\nWHEN dsd.rog_cd = 'ASOC' THEN '2-ASOC'\nWHEN dsd.rog_cd = 'PSOC' THEN '3-PSOC'\nWHEN dsd.rog_cd = 'RDAL' THEN '1-RDAL'\nWHEN dsd.rog_cd = 'ADAL' THEN '2-ADAL'\nWHEN dsd.rog_cd = 'RHOU' THEN '3-RHOU'\nWHEN dsd.rog_cd = 'AHOU' THEN '4-AHOU'\nWHEN dsd.rog_cd = 'SPHO' THEN '1-SPHO'\nWHEN dsd.rog_cd = 'APHO' THEN '2-APHO'\nWHEN dsd.rog_cd = 'ALAS' THEN '3-ALAS'\nWHEN dsd.rog_cd = 'VLAS' THEN '4-VLAS'\nWHEN dsd.rog_cd = 'SPHX' THEN '5-SPHX'\nWHEN dsd.rog_cd = 'TEST' THEN '6-TEST'\nELSE dsd.rog_cd\nEND ::VARCHAR(10) AS rog\n,       dsd.price_area_id               -- COLUMN S\n,       dsd.PA_name                     -- COLUMN T\n,       dsd.pricing_role\n,       dsd.OOB_gap_id\n,       dsd.DIV_PROMO_GRP_CD            -- COLUMN W CIG\n,       dsd.loc_common_retail_cd        -- COLUMN X\n,       dsd.vendor_name\n,       dsd.vend_nbr\n,       dsd.vend_sub_acct_nbr\n,       dsd.cost_area_id\n,       dsd.Manuf\n,       dsd.upc_id\n,       dsd.corp_item_cd\n,       dsd.item_description\n,       dsd.DST\n,       dsd.FACILITY\n,       dsd.dst_stat\n,       dsd.rtl_stat\n,       dsd.buyer_nm\n,       dsd.vend_conv_fctr\n,       dsd.t_pack_retail_qty\n,       dsd.size_dsc\n,       dsd.Row_Offset\n,       sua.AVG_NET_SALES_13_WK     AS UPC_13_Wk_Avg_Sales           -- COLUMN: AP\n,       sua.AVG_ITEM_QTY_13_WK      AS UPC_13_Wk_Avg_Qty\n,       sua.AVG_NET_SALES_13_WK / NULLIF(sua.AVG_ITEM_QTY_13_WK,'0') AS UPC_13_Wk_Avg_RTL  -- dsd.UPC_13_Wk_Avg_RTL\n,       CASE WHEN litm.division_id IS NULL THEN NULL ELSE 1 END ::INTEGER AS T_RANK_BY_ROG_AND_CPC\n,       (sua.NUM_STORES_SELLING * 1.00) / (sua.NUM_STORES_IN_ROG * 1.00) * 100 ::DECIMAL(5,2) AS pct_ACV_Stores\n--,       COALESCE(cig.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK) AS t_CPC_13_Wk_Avg_Sales -- dsd.CPC_13_Wk_Avg_Sales   -- COLUMN: AU\n,        CASE WHEN dsd.div_promo_grp_cd = 0 THEN COALESCE(cig_upc.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK)\nELSE COALESCE(cig.cig_sum_AVG_NET_SALES_13_WK, upc.upc_sum_AVG_NET_SALES_13_WK)\nEND AS t_CPC_13_Wk_Avg_Sales -- dsd.CPC_13_Wk_Avg_Sales   -- COLUMN: AU\n--,       COALESCE(cig.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK) AS t_CPC_13_Wk_Avg_Qty  -- dsd.CPC_13_Wk_Avg_Qty\n,       CASE\nWHEN dsd.div_promo_grp_cd = 0 THEN COALESCE(cig_upc.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK)\nELSE COALESCE(cig.cig_sum_AVG_ITEM_QTY_13_WK, upc.upc_sum_AVG_ITEM_QTY_13_WK)\nEND AS t_CPC_13_Wk_Avg_Qty  -- dsd.t_CPC_13_Wk_Avg_Qty\n,       t_CPC_13_Wk_Avg_Sales / NULLIF(t_CPC_13_Wk_Avg_Qty,'0')  AS t_CPC_13_Wk_Avg_RTL  --dsd.CPC_13_Wk_Avg_RTL\n,       dsd.PND_Cost_Change_VND\n,       dsd.PND_VEN_Date_Effective\n--,       dsd.New_Recc_Reg_Retail MAYANK : 20190426 : flattening the formulas in excel\n,       (dsd.PND_Cost_Change_VND/NULLIF(dsd.Vendor_Unit_Cost,'0'))*dsd.Reg_Retail ::DECIMAL(18,3) as New_Recc_Reg_Retail\n,       dsd.Vendor_Unit_Cost\n,       dsd.Unit_Item_Billing_Cost\n,       dsd.Prev_Retail_Price_Fctr\n,       dsd.Previous_Retail_Price\n,       dsd.Prev_Retail_Effective_Date\n,       dsd.Pending_EDLP_Mult\n,       dsd.Pending_EDLP_Retail\n,       dsd.Pending_EDLP_Chg_Date\n--,       dsd.Pending_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,       ((dsd.Pending_EDLP_Retail/NULLIF(dsd.Pending_EDLP_Mult,'0'))-dsd.Unit_Item_Billing_Cost)/NULLIF(dsd.Pending_EDLP_Retail/NULLIF(dsd.Pending_EDLP_Mult,'0'),'0') ::DECIMAL(15,3) as Pending_GP_pctg\n,       dsd.Reg_Retail_Price_Fctr\n,       dsd.Reg_Retail\n,       dsd.t_price_Per\n,       dsd.t_Unit\n--,       dsd.Reg_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,       ((dsd.Reg_Retail/NULLIF(dsd.Reg_Retail_Price_Fctr,'0'))-dsd.Unit_Item_Billing_Cost)/NULLIF(dsd.Reg_Retail/NULLIF(dsd.Reg_Retail_Price_Fctr,'0'),'0') ::DECIMAL(15,3) as Reg_GP_pctg\n,       dsd.case_allow_count\n,       dsd.case_allow_amt            AS case_allow_amt\n,       dsd.Case_Allow_amt_per_Unit   AS Case_Allow_amt_per_Unit\n,       dsd.Case_Start_Date\n,       dsd.Case_End_Date\n,       dsd.S2S_Allow_count\n,       dsd.S2S_Allow_amt             AS S2S_Allow_amt\n,       dsd.S2S_Allow_amt_per_Unit    AS S2S_Allow_amt_per_Unit\n,       dsd.S2S_Start_Date\n,       dsd.S2S_End_Date\n,       dsd.Scan_Allow_count\n,       dsd.Scan_Allow_amt            AS Scan_Allow_amt\n,       dsd.Scan_Start_Date\n,       dsd.Scan_End_Date\n,       dsd.Redem_Scan_Allow_count\n,       dsd.Redem_Allow_amt           AS Redem_Allow_amt\n,       dsd.Redem_Start_Date\n,       dsd.Redem_End_Date\n,       COALESCE(dsd.Case_Allow_amt_per_Unit, 0) +  COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) +  COALESCE(dsd.Scan_Allow_amt, 0) AS Total_Allow_Unit\n--,       dsd.Net_Cost_with_Allow MAYANK : 20190426 : flattening the formulas in excel\n,       (dsd.Vendor_Unit_Cost - (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0))) ::DECIMAL(18,3) as Net_Cost_with_Allow\n,       dsd.Promo_Multiple\n,       dsd.Promo_Price\n,       dsd.Coupon_Method\n,       dsd.Min_Purch\n,       dsd.Limit_Per_Txn\n--,       dsd.Promo_GP_pctg MAYANK : 20190426 : flattening the formulas in excel\n,       ((dsd.Net_Promo_Price - (dsd.Vendor_Unit_Cost - (COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0))))/NULLIF(dsd.Net_Promo_Price,'0')) ::DECIMAL(15,3) as Promo_GP_pctg\n,       dsd.Net_Promo_Price\n,       dsd.Price_Per\n,       dsd.t2_Unit\n,       dsd.Mark_down\n,       dsd.Promo_Start\n,       dsd.Promo_End\n,       (dsd.mark_down / NULLIF(COALESCE(dsd.Case_Allow_amt_per_Unit, 0) + COALESCE(dsd.S2S_Allow_amt_per_Unit, 0) + COALESCE(dsd.Scan_Allow_amt, 0),'0')) ::DECIMAL(5,2) AS pass_through  -- dsd.Pass_Through  -- COLUMN CW\n,       dsd.NEW_Multiple\n,       dsd.NEW_Retail\n,       dsd.NEW_EDLP_GP_pctg\n,       dsd.NEW_Promo_Multiple\n,       dsd.NEW_Promo_Retail\n,       dsd.NEW_Promo_GPpctg\n,       dsd.NEW_Passthrough\n,       dsd.compet_code\n,       dsd.price_chk_date\n,       dsd.comp_reg_mult\n,       dsd.com_reg_price\n--,       dsd.REG_CPI MAYANK : 20190426 : flattening the formulas in excel\n,       CASE WHEN com_reg_price&gt;0 THEN (dsd.Reg_Retail/GREATEST(dsd.Reg_Retail_Price_Fctr,1) - dsd.com_reg_price/GREATEST(dsd.comp_reg_mult,1))/NULLIF(dsd.Reg_Retail/ GREATEST(dsd.Reg_Retail_Price_Fctr,1),'0')\nELSE NULL\nEND ::DECIMAL(18,3) AS REG_CPI\n,       dsd.COMP_AD_MULT\n,       dsd.COMP_AD_PRICE\n,       dsd.Comments\n,       dsd.Modified_flag\n,       dsd.ROG_and_CIG\n,       dsd.Allowance_Counts\n,       dsd.Report_Date\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6 dsd\nLEFT    OUTER JOIN EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases sua\nON      sua.rog_cd = dsd.rog_cd\nAND     sua.upc_id = dsd.upc_id\nAND     sua.rpt_group = 'S29_02'\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       upc_id\n,       SUM(AVG_NET_SALES_13_WK) AS upc_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS upc_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nWHERE   rpt_group = 'S29_02'\nGROUP   BY 1,2\n) upc\nON      upc.division_id = dsd.division_id\nAND     upc.upc_id      = dsd.upc_id\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       DIV_PROMO_GRP_CD\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS cig_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nWHERE   rpt_group = 'S29_02'\nGROUP   BY 1,2\n) cig\nON      cig.division_id = dsd.division_id\nAND     cig.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\n--      MAYANK : 20190625 : creating this table for matching the upc and cig sales for blank cigs.\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       upc_id\n,       DIV_PROMO_GRP_CD\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\n,       SUM(AVG_ITEM_QTY_13_WK)  AS cig_sum_AVG_ITEM_QTY_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nGROUP   BY 1,2,3\n) cig_upc\nON      cig_upc.division_id = dsd.division_id\nAND     cig_upc.upc_id = dsd.upc_id\nAND     cig_upc.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\nLEFT    OUTER JOIN (\nSELECT  division_id\n,       div_promo_grp_cd\n,       upc_id\nFROM    (\nSELECT  division_id\n,       div_promo_grp_cd\n,       upc_id\n,       SUM(AVG_NET_SALES_13_WK) AS cig_sum_AVG_NET_SALES_13_WK\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_sua_sales_sp_cases\nWHERE   div_promo_grp_cd &gt; 0\nAND     rpt_group = 'S29_02'\nGROUP   BY 1,2,3\n) dt\nQUALIFY ROW_NUMBER() OVER (PARTITION BY division_id, div_promo_grp_cd ORDER by cig_sum_AVG_NET_SALES_13_WK DESC, upc_id ASC) = 1\n) litm\nON      litm.division_id = dsd.division_id\nAND     litm.DIV_PROMO_GRP_CD = dsd.DIV_PROMO_GRP_CD\nAND     litm.upc_id = dsd.upc_id\nLEFT    OUTER JOIN (\nSELECT  rog_and_cig\n,       COUNT(DISTINCT allowance_counts) AS cnt\nFROM    EDM_SANDBOX_PRD.MERCHAPPS.t_pe_dsd_whse_item_attr_6\nGROUP   BY rog_and_cig\nHAVING  cnt &gt; 1\n) malw\nON      malw.rog_and_cig = dsd.rog_and_cig\nWHERE   dsd.division_id = 29\nand     dsd.price_area_id IN (88, 89);\n</code></pre>"},{"location":"pricing_execution/#step-61","title":"Step 61:","text":"<pre><code>update EDM_SANDBOX_PRD.MERCHAPPS.T_PE_DSD_WHSE_FINAL set rog = '3-AKBA' where rog = 'AKBA' </code></pre>"},{"location":"pricing_execution/#step-62","title":"Step 62:","text":"<pre><code>update EDM_SANDBOX_PRD.MERCHAPPS.T_PE_DSD_WHSE_FINAL set rog = '2-SWMA' where rog = 'SWMA' </code></pre>"},{"location":"python_code/","title":"Graph API","text":""},{"location":"python_code/#python-code-collection","title":"Python code collection","text":""},{"location":"python_code/#1-graph-api-","title":"1. Graph API -","text":""},{"location":"python_code/#create-a-folder-in-onedrive-for-busienss-and-add-a-file-to-it","title":"create a folder in onedrive for busienss and add a file to it","text":"<pre><code>import requests\n\ndef create_folder_and_add_excel_file(folder_name, file_name):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    try:\n        access_token = session['access_token']\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    # Create folder\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/root/children'\n    data = {\n        'name': folder_name,\n        'folder': {}\n    }\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.post(endpoint, json=data, headers=headers)\n    if r.status_code != 201:\n        return \"Error creating folder: \" + r.text\n    folder_id = r.json()['id']\n\n    # Add Excel file\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{folder_id}/children'\n    data = {\n        'name': file_name,\n        'file': {}\n    }\n    r = requests.post(endpoint, json=data, headers=headers)\n    if r.status_code == 201:\n        return \"Folder and Excel file successfully created\"\n    else:\n        return \"Error adding Excel file: \" + r.text\n</code></pre>"},{"location":"python_code/#find-a-specific-file-in-onedrive-for-business-and-get-the-file-id","title":"find a specific file in onedrive for business and get the file id","text":"<pre><code>def get_file_id(file_name):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    try:\n        access_token = session['access_token']\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/root/search(q=\"{file_name}\")'\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.get(endpoint, headers=headers)\n    if r.status_code == 200:\n        data = r.json()\n        for item in data['value']:\n            if item['name'] == file_name:\n                return item['id']\n        return \"File not found\"\n    else:\n        return \"Error retrieving file ID: \" + r.text\n</code></pre>"},{"location":"python_code/#modify-an-excel-file-in-onedrive-for-business","title":"modify an excel file in onedrive for business","text":"<pre><code>import requests\n\ndef modify_excel_file(file_id, sheet_name, cell_address, new_value):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    try:\n        access_token = session['access_token']\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/workbook/worksheets/{sheet_name}/range(address={cell_address})/values'\n    data = {\n        \"values\": [[new_value]]\n    }\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.patch(endpoint, json=data, headers=headers)\n    if r.status_code == 200:\n        return \"Excel file successfully updated\"\n    else:\n        return \"Error updating Excel file: \" + r.text\n\n\n# In this example, the function first checks if the user is logged in by checking the existence of a \"user\" key in the session object. If the user is not logged in, the function redirects the user to the login page.\n\n# The function then retrieves the access token from the session object, which is required for making authorized requests to the Microsoft Graph API.\n\n# The endpoint URL for updating a specific cell in an Excel worksheet is set in the endpoint variable. The function then sends a PATCH request to the endpoint using the requests library, passing in the new value for the cell in a JSON object. The request includes the access token in the Authorization header, and the Content-Type header set to application/json.\n\n# Finally, the function returns a message indicating whether the Excel file was successfully updated or not.\n</code></pre>"},{"location":"python_code/#modify-the-excel-file-in-onedrive-for-business-to-add-a-dataframe-to-it","title":"modify the excel file in onedrive for business to add a dataframe to it","text":"<pre><code>import requests\nimport pandas as pd\n\ndef insert_dataframe_to_excel(file_id, sheet_name, dataframe):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    try:\n        access_token = session['access_token']\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/workbook/worksheets/{sheet_name}/range(address=\\'A1\\')/values'\n    data = {\n        \"values\": dataframe.values.tolist()\n    }\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.patch(endpoint, json=data, headers=headers)\n    if r.status_code == 200:\n        return \"DataFrame successfully inserted into Excel file\"\n    else:\n        return \"Error inserting DataFrame into Excel file: \" + r.text\n    ~~~\n\n    #### Now, share this file with somebody\n    ~~~python\n    import requests\n\ndef share_file_with_user(file_id, email):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    try:\n        access_token = session['access_token']\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/invite'\n    data = {\n        \"recipients\": [\n            {\n                \"email\": email\n            }\n        ],\n        \"message\": \"Please take a look at this file\",\n        \"requireSignIn\": True,\n        \"sendInvitation\": True,\n        \"roles\": [\n            \"write\"\n        ]\n    }\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.post(endpoint, json=data, headers=headers)\n    if r.status_code == 201:\n        return \"File successfully shared with user\"\n    else:\n        return \"Error sharing file with user: \" + r.text\n\n    ~~~ \n\n#### Now, check if user has granted permission to send email. If not, ask for permission and then send an email \n~~~python\nimport requests\n\ndef send_email_with_file_link(file_id, recipient_email, subject, message):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    try:\n        access_token = session['access_token']\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    # Check if the user has granted permission for the Mail.Send scope\n    endpoint = 'https://graph.microsoft.com/v1.0/me/mailboxSettings'\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.get(endpoint, headers=headers)\n    if r.status_code == 401:\n        # The user has not granted permission for the Mail.Send scope\n        # Redirect the user to the Microsoft authorization endpoint to request the scope\n        return redirect(url_for(\"authorize\", scopes=\"Mail.Send\"))\n\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}'\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.get(endpoint, headers=headers)\n    if r.status_code != 200:\n        return \"Error retrieving file information: \" + r.text\n    file_url = r.json()['webUrl']\n\n    endpoint = 'https://graph.microsoft.com/v1.0/me/sendMail'\n    data = {\n        \"message\": {\n            \"subject\": subject,\n            \"body\": {\n                \"contentType\": \"Text\",\n                \"content\": message + \"\\n\\n\" + file_url\n            },\n            \"toRecipients\": [\n                {\n                    \"emailAddress\": {\n                        \"address\": recipient_email\n                    }\n                }\n            ]\n        },\n        \"saveToSentItems\": \"false\"\n    }\n    r = requests.post(endpoint, json=data, headers=headers)\n    if r.status_code == 202:\n        return \"Email with file link successfully sent\"\n    else:\n        return \"Error sending email with file link: \" + r.text\n</code></pre>"},{"location":"python_code/#use-openpyxl-to-modify-the-excel-file-and-save-it-back-to-sharepoint","title":"use openpyxl to modify the excel file and save it back to sharepoint","text":"<pre><code>import requests\nimport openpyxl\n\ndef modify_excel_file_in_onedrive(file_id, dataframe):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    try:\n        access_token = session['access_token']\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    # Download the file from OneDrive\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    headers = {\n        'Authorization': 'Bearer ' + access_token\n    }\n    r = requests.get(endpoint, headers=headers)\n    if r.status_code != 200:\n        return \"Error downloading file: \" + r.text\n    with open(\"temp.xlsx\", \"wb\") as f:\n        f.write(r.content)\n\n    # Modify the file using openpyxl\n    add_dataframe_to_excel_file(\"temp.xlsx\", dataframe)\n\n    # Upload the modified file back to OneDrive\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    with open(\"temp.xlsx\", \"rb\") as f:\n        data = f.read()\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/octet-stream'\n    }\n    r = requests.put(endpoint, headers=headers, data=data)\n    if r.status_code == 200:\n        return \"File successfully modified\"\n    else:\n        return \"Error modifying file: \" + r.text\n</code></pre>"},{"location":"python_code/#now-copy-a-file-from-onedrive-to-a-new-location-and-then-share-it-wit-someone","title":"now, copy a file from onedrive to a new location and then share it wit someone.","text":"<pre><code>import requests\n\ndef copy_file_and_share(file_id, folder_name, recipient_email, subject, message):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    if \"Files.ReadWrite\" not in session.get(\"scopes\", []):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    try:\n        access_token = session['access_token']\n        refresh_token = session[\"refresh_token\"]\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    # Create a new folder in OneDrive\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/root/children'\n    data = {'name': folder_name, 'folder': {}}\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.post(endpoint, json=data, headers=headers)\n    if r.status_code != 201:\n        return \"Error creating folder: \" + r.text\n    folder_id = r.json()['id']\n\n    # Copy the file to the new folder\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/copy'\n    data = {'parentReference': {'id': folder_id}}\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.post(endpoint, json=data, headers=headers)\n    if r.status_code != 200:\n        return \"Error copying file: \" + r.text\n    copied_file_id = r.json()['id']\n\n    # Share the copied file with the recipient\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{copied_file_id}/invite'\n    data = {\n        \"requireSignIn\": False,\n        \"sendInvitation\": True,\n        \"recipients\": [\n            {\n                \"email\": recipient_email,\n                \"alias\": recipient_email\n            }\n        ],\n        \"message\": message\n    }\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    r = requests.post(endpoint, json=data, headers=headers)\n    if r.status_code != 202:\n        return \"Error sharing file: \" + r.text\n\n    return \"File successfully copied and shared\"\n</code></pre>"},{"location":"python_code/#use-openpyxl-to-add-a-chart-to-the-excel-and-save-it-back-to-onedrive","title":"use openpyxl to add a chart to the excel and save it back to onedrive","text":"<pre><code>import requests\nimport io\nimport openpyxl\n\ndef modify_excel_file_in_onedrive(file_id):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    if \"Files.ReadWrite\" not in session.get(\"scopes\", []):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    try:\n        access_token = session['access_token']\n        refresh_token = session[\"refresh_token\"]\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    # Download the file from OneDrive\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    headers = {'Authorization': 'Bearer ' + access_token}\n    r = requests.get(endpoint, headers=headers)\n    if r.status_code != 200:\n        return \"Error downloading file: \" + r.text\n    file = io.BytesIO(r.content)\n\n    # Modify the file using openpyxl\n    wb = openpyxl.load_workbook(file)\n    # Add code to modify the file using openpyxl here...\n    file.seek(0)\n    wb.save(file)\n\n    # Upload the modified file back to OneDrive\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/octet-stream'\n    }\n    r = requests.put(endpoint, headers=headers, data=file.read())\n    if r.status_code != 200:\n        return \"Error uploading file: \" + r.text\n\n    return \"File successfully modified and uploaded\"\n</code></pre>"},{"location":"python_code/#now-lets-add-all-the-functions-together-to-create-an-app-to-create-a-folder-in-onedrive-copy-a-file-from-onedrive-and-paste-it-in-the-folder-that-was-just-created-and-then-add-a-dataframe-into-the-file-use-the-openpyxl-to-format-the-dataframe-and-finally-share-the-file-with-somebody-we-will-also-need-to-check-if-scope-has-been-granted","title":"now, let's add all the functions together to create an app to create a folder in onedrive, copy a file from onedrive and paste it in the folder that was just created. and then, add a dataframe into the file. use the openpyxl to format the dataframe. and finally, share the file with somebody. we will also need to check if scope has been granted","text":"<pre><code>import requests\nimport io\nimport openpyxl\nimport pandas as pd\n\ndef create_folder_in_onedrive(folder_name):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    if \"Files.ReadWrite\" not in session.get(\"scopes\", []):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    try:\n        access_token = session['access_token']\n        refresh_token = session[\"refresh_token\"]\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/root/children'\n    try:\n        r = requests.get(endpoint,\n                         headers={'Authorization': 'Bearer ' + access_token})\n        data = {'name': folder_name, 'folder': {}, '@microsoft.graph.conflictBehavior': 'rename'}\n        r = requests.post(endpoint, json=data,\n                            headers={'Authorization': 'Bearer ' + access_token})\n        return r.json()[\"id\"]\n    except:\n        return \"Error creating folder\"\n\ndef copy_file_in_onedrive(file_id, folder_id):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    if \"Files.ReadWrite\" not in session.get(\"scopes\", []):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    try:\n        access_token = session['access_token']\n        refresh_token = session[\"refresh_token\"]\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/copy'\n    data = {\"parentReference\": {\"id\": folder_id}}\n    try:\n        r = requests.post(endpoint, json=data, headers={'Authorization': 'Bearer ' + access_token})\n        return r.json()[\"id\"]\n    except:\n        return \"Error copying file\"\n\ndef modify_excel_file_in_onedrive(file_id):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    if \"Files.ReadWrite\" not in session.get(\"scopes\", []):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    try:\n        access_token = session['access_token']\n        refresh_token = session[\"refresh_token\"]\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n\n    # Download the file from OneDrive\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    r = requests.get(endpoint, headers={'Authorization': 'Bearer ' + access_token})\n    file = io.BytesIO(r.content)\n\n    # Load the file into a pandas dataframe\n    df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\n\n    # Write the dataframe to the excel file using openpyxl\n    book = openpyxl.load_workbook(file)\n    writer = pd.ExcelWriter(file, engine='openpyxl') \n    writer.book = book\n    df.to_excel(writer, index=False, sheet_name='Sheet1')\n    writer.save()\n\n    # Upload the modified file back to OneDrive\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    file.seek(0)\n    r = requests.put(endpoint, data=file.read(), headers={'Authorization': 'Bearer ' + access_token,\n                                                           'Content-Type': 'application/octet-stream'})\n    return \"File modified successfully\"\n\ndef share_file_in_onedrive(file_id, email):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    if \"Mail.Send\" not in session.get(\"scopes\", []):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    try:\n        access_token = session['access_token']\n        refresh_token = session[\"refresh_token\"]\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/invite'\n    data = {\"recipients\": [{\"emailAddress\": {\"address\": email}}],\n            \"message\": \"Please check this file\",\n            \"requireSignIn\": True,\n            \"sendInvitation\": True,\n            \"roles\": [\"read\"]}\n    try:\n        r = requests.post(endpoint, json=data, headers={'Authorization': 'Bearer ' + access_token})\n        return \"File shared successfully\"\n    except:\n        return \"Error sharing file\"\n\ndef check_and_retrieve_modified_file(file_id):\n    if not session.get(\"user\"):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    if \"Files.ReadWrite\" not in session.get(\"scopes\", []):\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    try:\n        access_token = session['access_token']\n        refresh_token = session[\"refresh_token\"]\n    except:\n        session['next_url'] = request.path\n        return redirect(url_for(\"login\"))\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    r = requests.get(endpoint, headers={'Authorization': 'Bearer ' + access_token})\n    file = io.BytesIO(r.content)\n\n    # Load the data from the file into a pandas dataframe\n    df = pd.read_excel(file)\n    return df\n\n# Example usage\nfolder_id = create_folder_in_onedrive(\"Example Folder\")\nfile_id = copy_file_in_onedrive(\"FILE_ID\", folder_id)\nmodify_excel_file_in_onedrive(file_id)\nshare_file_in_onedrive(file_id, \"eddie.wy.zhu@gmail.com\")\ndf = check_and_retrieve_modified_file(file_id)\nprint(df)\n</code></pre>"},{"location":"python_code/#create-an-eletron-app-to-do-that","title":"create an eletron app to do that","text":"<pre><code>from flask import Flask, request, jsonify\nimport openpyxl\nimport pandas as pd\nimport requests\n\napp = Flask(__name__)\n\n@app.route('/create_folder', methods=['POST'])\ndef create_folder_in_onedrive():\n    data = request.get_json()\n    foldername = data['folder_name']\n    access_token = data['access_token']\n\n    endpoint = 'https://graph.microsoft.com/v1.0/me/drive/root/children'\n    r = requests.get(endpoint, headers={'Authorization': 'Bearer ' + access_token})\n    data = {'name': foldername, 'folder': {}, '@microsoft.graph.conflictBehavior': 'rename'}\n    r = requests.post(endpoint, json=data, headers={'Authorization': 'Bearer ' + access_token})\n    return jsonify({'response': r.json()})\n\n@app.route('/copy_file', methods=['POST'])\ndef copy_file_in_onedrive():\n    data = request.get_json()\n    file_id = data['file_id']\n    folder_id = data['folder_id']\n    access_token = data['access_token']\n\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/copy'\n    data = {'parentReference': {'id': folder_id}}\n    r = requests.post(endpoint, json=data, headers={'Authorization': 'Bearer ' + access_token})\n    return jsonify({'response': r.json()})\n\n@app.route('/modify_file', methods=['POST'])\ndef modify_excel_file_in_onedrive():\n    data = request.get_json()\n    file_id = data['file_id']\n    access_token = data['access_token']\n\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    r = requests.get(endpoint, headers={'Authorization': 'Bearer ' + access_token}, stream=True)\n    df = pd.read_excel(r.raw)\n    df['new_column'] = 'new_value'\n    buffer = io.BytesIO()\n    writer = pd.ExcelWriter(buffer, engine='openpyxl')\n    book = openpyxl.load_workbook(r.raw)\n    writer.book = book\n    df.to_excel(writer, index=False, sheet_name='Sheet1')\n    writer.save()\n    file = buffer.getvalue()\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    r = requests.put(endpoint, data=file, headers={'Authorization': 'Bearer ' + access_token, 'Content-Type':\n    'Content-Length': len(file)})\n    return jsonify({'response': r.json()})\n\n@app.route('/share_file', methods=['POST'])\ndef share_file_in_onedrive():\n    data = request.get_json()\n    file_id = data['file_id']\n    email = data['email']\n    access_token = data['access_token']\n\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/invite'\n    data = {\n        'recipients': [\n            {\n                'email': email\n            }\n        ],\n        'requireSignIn': False,\n        'sendInvitation': True,\n        'roles': [\n            'write'\n        ]\n    }\n    r = requests.post(endpoint, json=data, headers={'Authorization': 'Bearer ' + access_token})\n    return jsonify({'response': r.json()})\n\n@app.route('/check_file', methods=['POST'])\ndef check_and_retrieve_modified_file():\n    data = request.get_json()\n    file_id = data['file_id']\n    access_token = data['access_token']\n\n    endpoint = f'https://graph.microsoft.com/v1.0/me/drive/items/{file_id}/content'\n    r = requests.get(endpoint, headers={'Authorization': 'Bearer ' + access_token}, stream=True)\n    df = pd.read_excel(r.raw)\n    return jsonify({'data': df.to_dict()})\n\nif __name__ == '__main__':\n    app.run()\n</code></pre>"},{"location":"python_code/#frontend","title":"frontend","text":"<pre><code>const {app, BrowserWindow, ipcMain} = require('electron')\nconst path = require('path')\nconst url = require('url')\n\nlet mainWindow\n\nfunction createWindow () {\nmainWindow = new BrowserWindow({width: 800, height: 600})\nmainWindow.loadURL(url.format({\npathname: path.join(__dirname, 'index.html'),\nprotocol: 'file:',\nslashes: true\n}))\nmainWindow.on('closed', function () {\nmainWindow = null\n})\n}\n\napp.on('ready', createWindow)\n\napp.on('window-all-closed', function () {\nif (process.platform !== 'darwin') {\napp.quit()\n}\n})\n\napp.on('activate', function () {\nif (mainWindow === null) {\ncreateWindow()\n}\n})\n\nipcMain.on('create_folder', (event, folder_name, access_token) =&gt; {\nfetch('http://localhost:5000/create_folder', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\nfolder_name: folder_name,\naccess_token: access_token\n})\n})\n.then(res =&gt; res.json())\n.then(json =&gt; {\nevent.sender.send('create_folder_response', json)\n})\n})\n\nipcMain.on('copy_file', (event, file_id, folder_id, access_token) =&gt; {\nfetch('http://localhost:5000/copy_file', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\nfile_id: file_id,\nfolder_id: folder_id,\naccess_token: access_token\n})\n})\n.then(res =&gt; res.json())\n.then(json =&gt; {\nevent.sender.send('copy_file_response', json)\n})\n})\n\nipcMain.on('modify_file', (event, file_id, access_token) =&gt; {\nfetch('http://localhost:5000/modify_file', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\nfile_id: file_id,\naccess_token: access_token\n})\n})\n.then(res =&gt; res.json())\n.then(json =&gt; {\nevent.sender.send('modify_file_response', json)\n})\n})\n\nipcMain.on('share_file', (event, file_id, email, access_token) =&gt; {\nfetch('http://localhost:5000/share_file', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\nfile_id: file_id,\n\nemail: email,\naccess_token: access_token\n})\n})\n.then(res =&gt; res.json())\n.then(json =&gt; {\nevent.sender.send('share_file_response', json)\n})\n})\n\nipcMain.on('check_file', (event, file_id, access_token) =&gt; {\nfetch('http://localhost:5000/check_file', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\nfile_id: file_id,\naccess_token: access_token\n})\n})\n.then(res =&gt; res.json())\n.then(json =&gt; {\nevent.sender.send('check_file_response', json)\n})\n})\n</code></pre>"},{"location":"python_code/#html-file","title":"html file","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;OneDrive App&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Create Folder&lt;/h1&gt;\n    &lt;form&gt;\n      &lt;input type=\"text\" id=\"folder_name\" placeholder=\"Folder Name\"&gt;\n      &lt;input type=\"text\" id=\"access_token\" placeholder=\"Access Token\"&gt;\n      &lt;button id=\"create_folder_button\"&gt;Create Folder&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;br&gt;&lt;br&gt;\n    &lt;h1&gt;Copy File&lt;/h1&gt;\n    &lt;form&gt;\n      &lt;input type=\"text\" id=\"file_id\" placeholder=\"File ID\"&gt;\n      &lt;input type=\"text\" id=\"folder_id\" placeholder=\"Folder ID\"&gt;\n      &lt;input type=\"text\" id=\"access_token\" placeholder=\"Access Token\"&gt;\n      &lt;button id=\"copy_file_button\"&gt;Copy File&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;br&gt;&lt;br&gt;\n    &lt;h1&gt;Modify File&lt;/h1&gt;\n    &lt;form&gt;\n      &lt;input type=\"text\" id=\"file_id\" placeholder=\"File ID\"&gt;\n      &lt;input type=\"text\" id=\"access_token\" placeholder=\"Access Token\"&gt;\n      &lt;button id=\"modify_file_button\"&gt;Modify File&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;br&gt;&lt;br&gt;\n    &lt;h1&gt;Share File&lt;/h1&gt;\n    &lt;form&gt;\n      &lt;input type=\"text\" id=\"file_id\" placeholder=\"File ID\"&gt;\n      &lt;input type=\"text\" id=\"email\" placeholder=\"Email\"&gt;\n      &lt;input type=\"text\" id=\"access_token\" placeholder=\"Access Token\"&gt;\n      &lt;button id=\"share_file_button\"&gt;Share File&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;br&gt;&lt;br&gt;\n    &lt;h1&gt;Check File&lt;/h1&gt;\n    &lt;form&gt;\n      &lt;input type=\"text\" id=\"file_id\" placeholder=\"File ID\"&gt;\n      &lt;input type=\"text\" id=\"access_token\" placeholder=\"Access Token\"&gt;\n      &lt;button id=\"check_file_button\"&gt;Check File&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\nconst {ipcRenderer} = require('electron')\nconst createFolderButton = document.getElementById('create_folder_button')\nconst copyFileButton = document.getElementById('copy_file_button')\nconst modifyFileButton = document.getElementById('modify_file_button')\nconst shareFileButton = document.getElementById('share_file_button')\nconst checkFileButton = document.getElementById('check_file_button')\ncreateFolderButton.addEventListener('click', (event) =&gt; {\nevent.preventDefault()\nconst folderName = document.getElementById('folder_name').value\nconst accessToken = document.getElementById('access_token').value\nipcRenderer.send('create_folder', folderName, accessToken)\n})\ncopyFileButton.addEventListener('click', (event) =&gt; {\nevent.preventDefault()\nconst fileId = document.getElementById('file_id').value\nconst folderId = document.getElementById('folder_id').value\nconst accessToken = document.getElementById('access_token').value\nipcRenderer.send('copy_file', fileId, folderId, accessToken)\n})\nmodifyFileButton.addEventListener('click', (event) =&gt; {\nevent.preventDefault()\nconst fileId = document.getElementById('file_id').value\nconst accessToken = document.getElementById('access_token').value\nipcRenderer.send('modify_file', fileId, accessToken)\n})\nshareFileButton.addEventListener('click', (event) =&gt; {\nevent.preventDefault()\nconst fileId = document.getElementById('file_id').value\nconst email = document.getElementById('email').value\nconst accessToken = document.getElementById('access_token').value\nipcRenderer.send('share_file', fileId, email, accessToken)\n})\ncheckFileButton.addEventListener('click', (event) =&gt; {\nevent.preventDefault()\nconst fileId = document.getElementById('file_id').value\nconst accessToken = document.getElementById('access_token').value\nipcRenderer.send('check_file', fileId, accessToken)\n})\nipcRenderer.on('create_folder_response', (event, arg) =&gt; {\nconsole.log(arg)\n})\nipcRenderer.on('copy_file_response', (event, arg) =&gt; {\nconsole.log(arg)\n})\nipcRenderer.on('modify_file_response', (event, arg) =&gt; {\nconsole.log(arg)\n})\nipcRenderer.on('share_file_response', (event, arg) =&gt; {\nconsole.log(arg)\n})\nipcRenderer.on('check_file_response', (event, arg) =&gt; {\nconsole.log(arg)\n})\n&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"python_code/#script-to-start-flask-and-electron-in-the-package-single-app-start-appsh","title":"script to start flask and electron in the package single app - start-app.sh","text":"<pre><code>#!/usr/bin/env bash\n\n# Start the Flask backend\nFLASK_APP=app.py FLASK_ENV=development flask run &amp;\n\n# Store the PID of the Flask backend\nFLASK_PID=$!\n\n# Start the Electron frontend\nelectron .\n\n# Kill the Flask backend when Electron exits\ntrap \"kill $FLASK_PID\" EXIT\n</code></pre>"},{"location":"python_code/#forge-to-package-the-app","title":"forge to package the app","text":"<pre><code>{\n\"name\": \"onedrive-app\",\n\"productName\": \"OneDrive App\",\n\"version\": \"1.0.0\",\n\"description\": \"OneDrive App\",\n\"main\": \"main.js\",\n\"scripts\": {\n\"start\": \"electron-forge start\",\n\"package\": \"electron-forge package\",\n\"make\": \"electron-forge make\",\n\"publish\": \"electron-forge publish\",\n\"lint\": \"eslint .\",\n\"dist\": \"electron-forge make --platform=win32 --arch=x64\"\n},\n\"repository\": {\n\"type\": \"git\",\n\"url\": \"...\"\n},\n\"keywords\": [\n\"electron\",\n\"electron-forge\",\n\"react\",\n\"webpack\"\n],\n\"author\": {\n\"name\": \"...\"\n},\n\"license\": \"MIT\",\n\"config\": {\n\"forge\": {\n\"packagerConfig\": {\n// start the app with the start-app.sh script\n\"executableName\": \"start-app.sh\",\n},\n\"makers\": [\n{\n\"name\": \"@electron-forge/maker-squirrel\",\n\"config\": {\n\"name\": \"onedrive_app\"\n}\n},\n{\n\"name\": \"@electron-forge/maker-zip\",\n\"platforms\": [\n\"darwin\"\n]\n},\n{\n\"name\": \"@electron-forge/maker-deb\",\n\"config\": {}\n},\n{\n\"name\": \"@electron-forge/maker-rpm\",\n\"config\": {}\n}\n]\n}\n},\n\"devDependencies\": {\n\"@babel/core\": \"^7.4.5\",\n\"@babel/preset-env\": \"^7.4.5\",\n\"@babel/preset-react\": \"^7.0.0\",\n\"@electron-forge/cli\": \"^6.0.0-beta.50\",\n\"@electron-forge/maker-deb\": \"^6.0.0-beta.50\",\n\"@electron-forge/maker-rpm\": \"^6.0.0-beta.50\",\n\"@electron-forge/maker-squirrel\": \"^6.0.0-beta.50\",\n\"@electron-forge/maker-zip\": \"^6.0.0-beta.50\",\n\"@electron-forge/plugin-webpack\": \"^6.0.0-beta.50\",\n\"babel-loader\": \"^8.0.6\",\n\"css-loader\": \"^3.2.0\",\n\"electron\": \"^6.0.0\",\n\"electron-is-dev\": \"^1.1.0\",\n\"eslint\": \"^6.1.0\",\n\"eslint-config-airbnb\": \"^18.0.1\",\n\"eslint-config-prettier\": \"^6.0.0\",\n\"eslint-plugin-import\": \"^2.18.2\",\n\"eslint-plugin-jsx-a11y\": \"^6.2.3\",\n\"eslint-plugin-prettier\": \"^3.1.1\",\n\"eslint-plugin-react\": \"^7.14.3\",\n\"node-sass\": \"^4.12.0\",\n\"prettier\": \"^1.18.2\",\n\"react\": \"^16.8.6\",\n\"react-dom\": \"^16.8.6\",\n\"sass-loader\": \"^7.1.0\",\n\"style-loader\": \"^1.0.0\",\n\"webpack\": \"^4.35.2\"\n},\n\"dependencies\": {\n\"electron-is-dev\": \"^1.1.0\",\n\"electron-store\": \"^4.0.0\",\n\"electron-updater\": \"^4.0.6\",\n\"express\": \"^4.17.1\",\n\"flask\": \"^1.1.1\",\n\"flask-cors\": \"^3.0.8\",\n\"flask-restful\": \"^0.3.7\",\n\"flask-sqlalchemy\": \"^2.4.1\",\n\"flask-wtf\": \"^0.14.3\",\n\"python-shell\": \"^2.0.3\",\n\"request\": \"^2.88.0\",\n\"request-promise\": \"^4.2.4\",\n\"sqlite3\": \"^4.1.1\",\n\"wtf-forms\": \"^2.3.3\"\n}\n}   </code></pre>"},{"location":"python_code/#keep-the-app-updated","title":"keep the app updated","text":"<pre><code>To use an updater module in your Electron app, you'll need to include the module in your project and configure it to check for updates, download updates, and install them.\n\nHere's an example using the electron-updater module:\n\nInstall the electron-updater module: \nnpm install electron-updater\nconst { autoUpdater } = require('electron-updater');\nautoUpdater.checkForUpdatesAndNotify();\nautoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) =&gt; {\n  autoUpdater.quitAndInstall();\n});\n\nTo host update files on GitHub, you can use GitHub Releases to distribute updates to your Electron app.\n\nHere's an overview of how to use GitHub Releases to host update files:\n\nCreate a GitHub repository for your Electron app.\n\nCreate a new release in your repository by clicking on the \"Releases\" tab and then clicking the \"Create a new release\" button.\n\nUpload the update files for your Electron app to the release.\n\nIn your Electron app, configure the updater module to download updates from the GitHub release. The exact configuration will depend on the updater module you're using, but typically you'll need to specify the URL to the update file and the type of update (e.g. zip, dmg, etc.).\n\nWhen you want to release a new version of your Electron app, create a new release in GitHub with the updated files and the updater module will download and install the update for your users.\n\nBy using GitHub Releases to host updates, you can simplify the update process for your Electron app and provide a reliable and easy-to-use distribution method for your users. This approach can be especially useful if you have a small user base or if you don't need the advanced features of a more complex update server.\n</code></pre>"},{"location":"python_code/#this-is-the-code-to-parse-the-url-to-get-the-file-id","title":"this is the code to parse the URL to get the file id","text":"<pre><code>import urllib.parse\n\nurl = 'https://rxsafeway-my.sharepoint.com/:x:/r/personal/wzhu004_safeway_com/_layouts/15/Doc.aspx?sourcedoc=%7B8A54C385-AAA8-44AB-B23F-A354E47BFE8A%7D&amp;file=Book%201.xlsx&amp;action=default&amp;mobileredirect=true&amp;cid=3e24b0c4-e164-4abc-bd6b-001c2cc1eaad'\nparsed_url = urllib.parse.urlparse(url)\nquery_params = urllib.parse.parse_qs(parsed_url.query)\nfile_id = query_params['sourcedoc'][0]\nprint(file_id)\n</code></pre>"},{"location":"python_code/#this-is-to-access-the-file-shared-with-you-if-the-file-is-in-one-drive","title":"this is to access the file shared with you if the file is in one drive","text":"<pre><code>import requests\n\n# Replace ACCESS_TOKEN with the access token obtained from authentication\nheaders = {\n    'Authorization': 'Bearer ACCESS_TOKEN',\n    'Accept': 'application/json'\n}\n\n# Replace FILE_ID with the ID of the shared Excel file\nurl = f'https://graph.microsoft.com/v1.0/drives/FILE_ID/items/FILE_ID/content'\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    # The response content is the binary data of the Excel file\n    excel_file_content = response.content\nelse:\n    print(f'Failed to retrieve Excel file. Response code: {response.status_code}')\n</code></pre>"},{"location":"python_code/#this-is-to-access-the-file-shared-with-you-if-the-file-is-in-sharepoint","title":"this is to access the file shared with you if the file is in sharepoint","text":"<pre><code>import requests\n\n# Replace ACCESS_TOKEN with the access token obtained from authentication\nheaders = {\n    'Authorization': 'Bearer ACCESS_TOKEN',\n    'Accept': 'application/json'\n}\n\n# Replace FILE_ID with the ID of the shared Excel file\nurl = f'https://graph.microsoft.com/v1.0/shares/FILE_ID/driveItem/content'\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    # The response content is the binary data of the Excel file\n    excel_file_content = response.content\nelse:\n    print(f'Failed to retrieve Excel file. Response code: {response.status_code}')\n</code></pre>"},{"location":"supplychain_sql/","title":"Supply Chain SQL","text":""},{"location":"supplychain_sql/#store-inventory","title":"Store Inventory","text":"<pre><code>select corporate_item_cd,\nretail_item_dsc,\ndistribution_center_id,\nrog_id,\ntxn_dte,\nsum(onhand_qty) as onhand_qty,\nsum(oos_day_flg) as oos_day_flg\nfrom\n(SELECT  DISTINCT C.CORPORATE_ITEM_CD,\nC.RETAIL_ITEM_DSC, SOC.WAREHOUSE_ID,\nlpad(rs.FACILITY_NBR,4,'0') AS STORE_ID, rs.DIVISION_ID AS STORE_DIVISION,\nSOC.DISTRIBUTION_CENTER_ID,\nSOC.ROG_ID,\nii.ONHAND_QTY,\nii.TXN_DTE,\nii.WEEK_ID,\ncase when ONHAND_QTY &lt;= 0 then 1 else 0 end OOS_DAY_FLG\nFROM    (\nSELECT\nCL.CALENDAR_DT AS TXN_DTE, CL.FISCAL_YEAR_NBR||CL.FISCAL_WEEK_NBR AS WEEK_ID,\nFACILITY_INTEGRATION_ID,\nCORPORATE_ITEM_INTEGRATION_ID,\nONHAND_QTY\nFROM   (\nSELECT  FACILITY_INTEGRATION_ID\n,CORPORATE_ITEM_INTEGRATION_ID\n,TXN_DTE\n,ITEM_QTY AS ONHAND_QTY\n,lead(TXN_DTE,1,CURRENT_DATE + 1) over(PARTITION BY FACILITY_INTEGRATION_ID, CORPORATE_ITEM_INTEGRATION_ID ORDER BY TXN_DTE asc) as lead_txn_dte\nFROM    (\nSELECT  II.FACILITY_INTEGRATION_ID, II.CORPORATE_ITEM_INTEGRATION_ID, DATE(II.TRANSACTION_TS) TXN_DTE, II.ITEM_QTY\nFROM    EDM_VIEWS_PRD.DW_VIEWS.INVENTORY_ITEM II\nWHERE   DW_CURRENT_VERSION_IND = TRUE\nAND     DW_LOGICAL_DELETE_IND = FALSE\nAND     INVENTORY_TYPE_CD = 'PP'\nAND     DATE(TRANSACTION_TS) &gt;=  current_date - 7 QUALIFY ROW_NUMBER() OVER(PARTITION BY II.FACILITY_INTEGRATION_ID, II.CORPORATE_ITEM_INTEGRATION_ID, DATE(TRANSACTION_TS) ORDER BY TRANSACTION_TS DESC) = 1 )\n) inv\njoin    EDM_VIEWS_PRD.DW_VIEWS.CALENDAR cl on    cl.CALENDAR_DT &gt;= inv.txn_dte AND    cl.CALENDAR_DT &lt; lead_txn_dte WHERE   CL.CALENDAR_DT =  current_date - 1\nAND     CL.DW_CURRENT_VERSION_IND = TRUE\n) II\nJOIN   (\nselect *\nfrom EDM_VIEWS_PRD.DW_VIEWS.STORE_ORDER_CATALOG soc WHERE   SOC.DW_CURRENT_VERSION_IND = TRUE\nAND     SOC.DW_LOGICAL_DELETE_IND = FALSE\nAND     SOC.PERPETUAL_INVENTORY_IND = 'Y'\nQUALIFY row_number() over (partition by store_facility_integration_id, corporate_item_integration_id order by dw_first_effective_dt desc) = 1\n) SOC   ON SOC.store_facility_integration_id = II.FACILITY_INTEGRATION_ID AND SOC.corporate_item_integration_id = II.corporate_item_integration_id\nAND II.TXN_DTE between AUTHORIZATION_FIRST_EFFECTIVE_TS AND AUTHORIZATION_LAST_EFFECTIVE_TS\nJOIN    EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM C ON C.CORPORATE_ITEM_INTEGRATION_ID = SOC.CORPORATE_ITEM_INTEGRATION_ID\nJOIN EDM_VIEWS_PRD.DW_VIEWS.SMIC_GROUP SG ON C.SMIC_GROUP_CD = SG.SMIC_GROUP_CD\nJOIN EDM_VIEWS_PRD.DW_VIEWS.SMIC_CATEGORY SC ON C.SMIC_GROUP_CD = SC.SMIC_GROUP_CD  and C.SMIC_CATEGORY_CD = SC.SMIC_CATEGORY_CD\nJOIN EDM_VIEWS_PRD.DW_VIEWS.SMIC_CLASS SCL ON C.SMIC_GROUP_CD = SCL.SMIC_GROUP_CD and C.SMIC_CATEGORY_CD = SCL.SMIC_CATEGORY_CD\nand C.SMIC_CLASS_CD=SCL.SMIC_CLASS_CD\nJOIN    EDM_VIEWS_PRD.DW_VIEWS.RETAIL_STORE RS ON RS.FACILITY_INTEGRATION_ID = SOC.STORE_FACILITY_INTEGRATION_ID\nJOIN    EDM_VIEWS_PRD.DW_VIEWS.FACILITY_ADDRESS FA ON RS.FACILITY_INTEGRATION_ID = FA.FACILITY_INTEGRATION_ID\nWHERE   C.DW_CURRENT_VERSION_IND = TRUE\nAND     SG.DW_CURRENT_VERSION_IND = TRUE\nAND     SC.DW_CURRENT_VERSION_IND = TRUE\nAND     SCL.DW_CURRENT_VERSION_IND = TRUE\nAND     RS.DW_CURRENT_VERSION_IND = TRUE\nAND     RS.DW_LOGICAL_DELETE_IND = FALSE\nAND     FA.DW_CURRENT_VERSION_IND = TRUE\nAND     FA.DW_LOGICAL_DELETE_IND = FALSE) group by 1,2,3,4,5\n</code></pre>"},{"location":"supplychain_sql/#warehouse-inventory-activities","title":"Warehouse Inventory Activities","text":"<pre><code>select\ncic.corporate_item_cd\n, cic.ship_unit_pack_qty\n, winv.warehouse_id\n, wh.distribution_center_id as warehouse_nm\n, sum(transaction_qty) as sum_transaction_qty\n, sum(available_qty) as sum_available_qty\n, sum(allocated_qty) as sum_allocated_qty\n, sum(blocked_qty) as sum_blocked_qty\n, sum(inbound_transit_qty) as sum_inbound_transit_qty\n, sum(day_inbound_transit_qty) as sum_day_inbound_transit_qty\n, sum(sum_order_qty) as sum_on_order_qty\n, sum(total_onhand_qty) as sum_total_onhand_qty\nfrom edm_views_prd.dw_views.inventory_balance winv\njoin edm_views_prd.dw_views.corporate_item cic\non cic.corporate_item_integration_id = winv.corporate_item_integration_id and current_date between cic.dw_first_effective_dt and cic.dw_last_effective_dt and cic.corporation_id = 1\n-- join edm_views_prd.dw_views.supply_chain_item sci\n-- on sci.corporate_item_integration_id = winv.corporate_item_integration_id\n-- and current_date between sci.dw_first_effective_dt and sci.dw_last_effective_dt\njoin edm_views_prd.dw_views.warehouse wh\non wh.warehouse_id = winv.warehouse_id and wh.corporation_id=1 and current_date between wh.dw_first_effective_dt and wh.dw_last_effective_dt\njoin\n( select\nwarehouse_id\n, corporate_item_integration_id\n, max(transaction_ts) as max_ts\n\nfrom edm_views_prd.dw_views.inventory_balance\nwhere\ndw_current_version_ind = true\nand dw_logical_delete_ind = false\ngroup by\nwarehouse_id\n, corporate_item_integration_id\n) mxts\non mxts.warehouse_id = winv.warehouse_id\nand mxts.corporate_item_integration_id = winv.corporate_item_integration_id\nand mxts.max_ts = winv.transaction_ts  and cic.corporate_item_cd in (11101812)\nand winv.dw_current_version_ind = true and winv.dw_logical_delete_ind = false left join (select distribution_center_id, corporate_item_cd, max(sum_order_qty)  as sum_order_qty from \"EDM_BIZOPS_PRD\".\"MERCHAPPS\".\"zhu_warehouse_future_po\" where promised_delivery_ts between current_date and current_date + 7 group by 1,2) po on po.distribution_center_id = wh.distribution_center_id and po.corporate_item_cd = cic.corporate_item_cd group by 1, 2, 3, 4\n</code></pre>"},{"location":"supplychain_sql/#store-order-delivery","title":"Store Order Delivery","text":"<pre><code>SELECT SCHEDULE_GROUP_CD         AS DPATS_GROUP_CD,     RETAIL_STORE_FACILITY_NBR AS STORE_ID,\nDATA_BATCH_ID             AS DATA_BATCH_CD,\nEFFECTIVE_DT              AS SCHED_EFF_DT,\nCASE WHEN SDET.Process_Week_Day_Nm = 'SUNDAY'    AND Process_Week_Day_Nbr &lt; 8  THEN SCHED.Effective_Dt\nWHEN SDET.Process_Week_Day_Nm = 'SUNDAY'    AND Process_Week_Day_Nbr &gt; 7  THEN DATEADD(day, 7,  SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'MONDAY'    AND Process_Week_Day_Nbr &lt; 9  THEN DATEADD(day, 1,  SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'MONDAY'    AND Process_Week_Day_Nbr &gt; 8  THEN DATEADD(day, 8,  SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'TUESDAY'   AND Process_Week_Day_Nbr &lt; 10 THEN DATEADD(day, 2,  SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'TUESDAY'   AND Process_Week_Day_Nbr &gt; 9  THEN DATEADD(day, 9,  SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'WEDNESDAY' AND Process_Week_Day_Nbr &lt; 11 THEN DATEADD(day, 3,  SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'WEDNESDAY' AND Process_Week_Day_Nbr &gt; 10 THEN DATEADD(day, 10, SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'THURSDAY'  AND Process_Week_Day_Nbr &lt; 12 THEN DATEADD(day, 4,  SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'THURSDAY'  AND Process_Week_Day_Nbr &gt; 11 THEN DATEADD(day, 11, SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'FRIDAY'    AND Process_Week_Day_Nbr &lt; 13 THEN DATEADD(day, 5,  SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'FRIDAY'    AND Process_Week_Day_Nbr &gt; 12 THEN DATEADD(day, 12, SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'SATURDAY'  AND Process_Week_Day_Nbr &lt; 14 THEN DATEADD(day, 6,  SCHED.Effective_Dt)\nWHEN SDET.Process_Week_Day_Nm = 'SATURDAY'  AND Process_Week_Day_Nbr &gt; 13 THEN DATEADD(day, 13, SCHED.Effective_Dt) END AS ORDER_DT,\nSCHEDULE_CUTOFF_TM AS POLL_TM,\nDATEADD(day, SDET.Process_Week_Day_Nbr -1, SCHED.Effective_Dt)  AS PICK_DT,\nDATEADD(day, SDET.Delivery_Week_Day_Nbr -1, SCHED.Effective_Dt) AS DELIVERY_DT,\nDATEADD(day, SDET.Process_Week_Day_Nbr + SDET.Offset_Value_Week_Day_Nbr -1, SCHED.Effective_Dt) AS AVAIL_DT\n\nFROM DW_VIEWS.SHIPMENT_SCHEDULE SCHED\n\nJOIN DW_VIEWS.SHIPMENT_SCHEDULE_DETAIL SDET\nON SCHED.SHIPMENT_SCHEDULE_INTEGRATION_ID = SDET.SHIPMENT_SCHEDULE_INTEGRATION_ID\n\nJOIN DW_VIEWS.D1_RETAIL_STORE STR\nON SCHED.DESTINATION_FACILITY_INTEGRATION_ID = STR.FACILITY_INTEGRATION_ID\n\nWHERE SCHEDULE_GROUP_CD= '25'\n--WHERE sched_eff_dt ='2022-04-17'\n\nAND RETAIL_STORE_FACILITY_NBR IN ('1953')\nAND EFFECTIVE_DT = '2022-04-24'\n\nAND DATA_BATCH_ID = '0129'\nAND DATA_BATCH_ID NOT IN ('5601','5602','5603','5604','5605','5606','5607','5608','5613',\n5614','5615','5616','5651','8811','8812','8826','8832','8834','8841')\n\nORDER BY 1,6    -- STORE_ID, order_dt;\n</code></pre>"},{"location":"supplychain_sql/#warehouse-shipment-to-store","title":"Warehouse Shipment to Store","text":"<pre><code>SELECT DISTINCT SCIH.DIVISION_ID, WHSE.WAREHOUSE_ID, --WHSE_ID\nWHSE.WAREHOUSE_NM, --whs.whse_nm, \nSCIH.ORDER_NBR,\nSTORE.RETAIL_STORE_FACILITY_NBR,\nDTE.FISCAL_YEAR_NBR || LPAD(DTE.FISCAL_PERIOD_NBR,2,0),\nTO_CHAR(SUM(SCID.SHIPPED_QTY),'999,999,999.99') AS SHIPMENTS, SCIH.INVOICE_CREATE_DT\n\nFROM DW_VIEWS.SUPPLY_CHAIN_INVOICE_HEADER SCIH\n\nJOIN DW_VIEWS.SUPPLY_CHAIN_INVOICE_DETAIL SCID\nON SCIH.SUPPLY_CHAIN_INVOICE_INTEGRATION_ID = SCID.SUPPLY_CHAIN_INVOICE_INTEGRATION_ID\nAND SCID.DW_CURRENT_VERSION_IND = TRUE\n\nJOIN DW_VIEWS.D1_RETAIL_STORE STORE\nON SCIH.RETAIL_STORE_FACILITY_INTEGRATION_ID = STORE.FACILITY_INTEGRATION_ID\n\nJOIN DW_VIEWS.D0_FISCAL_DAY DTE\nON DTE.CALENDAR_DT = SCIH.INVOICE_CREATE_DT\n\nJOIN DW_VIEWS.DATA_BATCH WDR  --DSS.whse_databatch_rog wdr\nON SCIH.WAREHOUSE_ID = WDR.WAREHOUSE_ID\n\nJOIN DW_VIEWS.WAREHOUSE WHSE\nON WHSE.WAREHOUSE_ID = WDR.WAREHOUSE_ID\n\nWHERE 1 = 1\nAND SCIH.CORPORATION_ID = 1 --wsi.ship_corp_id = 1\nAND WDR.PRIMARY_IND = 'Y'\n--AND wsi.ship_corp_id = wsi.dest_corp_id\n--AND SCIH.INVOICE_CREATE_DT BETWEEN '04/06/2022' AND '04/28/2022' --CURRENT_DATE\nAND SCIH.INVOICE_CREATE_DT BETWEEN '2022-04-06' AND '2022-04-28' --CURRENT_DATE\nand STORE.RETAIL_STORE_FACILITY_NBR = '0169' --wsi.store_id in ('0169')\nand WHSE.WAREHOUSE_ID = '5229'  --wsi.whse_cd= '5229'\nAND SCIH.DW_CURRENT_VERSION_IND = TRUE\n\nGROUP BY SCIH.DIVISION_ID,\nSCIH.ORDER_NBR, --.wsi.whse_ordER_nbr,\n\nWHSE.WAREHOUSE_ID, --WHSE_ID\nWHSE.WAREHOUSE_NM, --whs.whse_nm, \nDTE.FISCAL_YEAR_NBR,  --dte.period_id\nDTE.FISCAL_PERIOD_NBR,  --dte.period_id\nSCIH.INVOICE_CREATE_DT\n</code></pre>"},{"location":"supplychain_sql/#warehouse-order-qty-pack","title":"Warehouse Order Qty Pack","text":"<pre><code>select warehouse_id, order_pack_qty from EDM_VIEWS_PRD.DW_VIEWS.SUPPLY_CHAIN_ITEM a join EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM b on a.corporate_item_integration_id = b.corporate_item_integration_id\nand current_date between a.dw_first_effective_dt and a.dw_last_effective_dt and current_date between b.dw_first_effective_dt and b.dw_last_effective_dt and a.DW_CURRENT_VERSION_IND = 1 and b.DW_CURRENT_VERSION_IND = 1\nand corporate_item_cd = 73500114\n</code></pre>"},{"location":"supplychain_sql/#volume-plan-for-supply-chain","title":"Volume plan for supply chain.","text":"<pre><code>WITH CAL AS (SELECT PROMOTION_WEEK_ID\n,PROMOTION_WEEK_START_DT FROM (SELECT DISTINCT PROMOTION_WEEK_ID\n,DIVISION_ID\n,PROMOTION_WEEK_START_DT ,1 FROM EDM_VIEWS_PRD.DW_VIEWS.D1_PROMOTION_CALENDAR_WEEK\nWHERE PROMOTION_WEEK_END_DT &lt; CURRENT_DATE()\nAND DIVISION_ID = '19')\n\nQUALIFY ROW_NUMBER() OVER (PARTITION BY DIVISION_ID,1 ORDER BY PROMOTION_WEEK_ID DESC) &lt; 60)    SELECT WEEK_ID,\nA.CORPORATE_ITEM_CD AS CIC,\nA.DIVISION_NM, --TRY_TO_NUMBER(WEEK1.DIVISION_ID) AS DIVISION_ID,\nCASE\nWHEN A.DIVISION_NM = 'PORTLAND' THEN 19\nWHEN A.DIVISION_NM = 'SEATTLE' THEN 27\nWHEN A.DIVISION_NM = 'NOR CALIFORNIA' THEN 25\nWHEN A.DIVISION_NM = 'SO CALIFORNIA' THEN 29\nWHEN A.DIVISION_NM = 'SOUTHWEST' THEN 17\nWHEN A.DIVISION_NM = 'DENVER' THEN 5\nWHEN A.DIVISION_NM = 'MID-ATLANTIC' THEN 34\nWHEN A.DIVISION_NM = 'INTERMOUNTAIN' THEN 30\nWHEN A.DIVISION_NM = 'JEWEL' THEN 32\nWHEN A.DIVISION_NM = 'SOUTHERN' THEN 20\nWHEN A.DIVISION_NM = 'SHAWS' THEN 33\nEND AS DIVISION_ID,    A.ROG_ID AS ROG,\nC.DISTRIBUTION_CENTER_ID AS DC,\nE.UPC_NBR AS UPC,\nITM.SHIP_UNIT_PACK_QTY AS \"Case size\",\nC.VENDOR_ID||C.VENDOR_SUB_ACCOUNT_ID||C.WIMS_SUB_VENDOR_NBR AS VEND_KEY,\nWEEK2.PROMOTION_WEEK_ID AS \"Time-shifted week ID\",\nWEEK2.PROMOTION_WEEK_START_DT AS \"Calendar date\",\nWEEK2.PROMOTION_WEEK_START_DT + 364 AS CALENDAR_DT,    ROUND((D.LEAD_TIME_DYS+7)/7) AS \"Total lead time (weeks)\",\nSUM(PROMOTED_UNIT_NBR) AS \"Promoted units\",\nSUM(NON_PROMO_UNIT_NBR) AS \"Non-promoted units\",\n\"Promoted units\" + \"Non-promoted units\" AS \"Total Units\",\nDIV0((\"Promoted units\" + \"Non-promoted units\"),ITM.SHIP_UNIT_PACK_QTY) AS \"Total Cases\" FROM EDM_VIEWS_PRD.DW_VIEWS.PROMO_PERF_RPT A\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM B\nON A.CORPORATE_ITEM_CD = B.CORPORATE_ITEM_CD\nAND B.DW_CURRENT_VERSION_IND = 1\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_REFERENCE E\nON E.CORPORATE_ITEM_INTEGRATION_ID = B.CORPORATE_ITEM_INTEGRATION_ID\nAND E.DW_CURRENT_VERSION_IND = 1\nINNER JOIN (SELECT DISTINCT\nCORPORATE_ITEM_INTEGRATION_ID\n,DISTRIBUTION_CENTER_ID\n,WAREHOUSE_ID\n,ROG_ID\n,VENDOR_ID\n,VENDOR_SUB_ACCOUNT_ID\n,WIMS_SUB_VENDOR_NBR\nFROM EDM_VIEWS_PRD.DW_VIEWS.STORE_ORDER_CATALOG WHERE DW_CURRENT_VERSION_IND = 1\nAND DISTRIBUTION_CENTER_ID IS NOT NULL\nAND WIMS_SUB_VENDOR_NBR IS NOT NULL) C\nON A.ROG_ID = C.ROG_ID\nAND B.CORPORATE_ITEM_INTEGRATION_ID = C.CORPORATE_ITEM_INTEGRATION_ID\nINNER JOIN (SELECT VENDOR_ID,VENDOR_SUB_ACCOUNT_ID,WIMS_SUB_VENDOR_NBR,LEAD_TIME_DYS,WAREHOUSE_ID,DISTRIBUTION_CENTER_ID FROM  EDM_VIEWS_PRD.DW_VIEWS.VENDOR_WAREHOUSE WHERE DISTRIBUTION_CENTER_ID &lt;&gt; ''\nQUALIFY ROW_NUMBER() OVER (PARTITION BY WAREHOUSE_ID,VENDOR_ID,VENDOR_SUB_ACCOUNT_ID,WIMS_SUB_VENDOR_NBR ORDER BY DW_LAST_EFFECTIVE_DT DESC) = 1) D\nON D.DISTRIBUTION_CENTER_ID = C.DISTRIBUTION_CENTER_ID\nAND D.VENDOR_ID = C.VENDOR_ID\nAND D.VENDOR_SUB_ACCOUNT_ID = C.VENDOR_SUB_ACCOUNT_ID\nAND D.WIMS_SUB_VENDOR_NBR = C.WIMS_SUB_VENDOR_NBR\nAND D.WAREHOUSE_ID = C.WAREHOUSE_ID /*INNER JOIN CAL WEEK1\n    ON TO_NUMBER(WEEK1.DIVISION_ID)::INTEGER = A.DIVISION_ID  \n    AND WEEK1.PROMOTION_WEEK_ID = A.WEEK_ID*/\nINNER JOIN CAL WEEK1\n--ON WEEK1.DIVISION_NM = A.DIVISION_NM\nON WEEK1.PROMOTION_WEEK_ID = A.WEEK_ID INNER JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_PROMOTION_CALENDAR_WEEK WEEK2\n--ON WEEK2.DIVISION_ID = WEEK1.DIVISION_ID\nON WEEK2.PROMOTION_WEEK_START_DT = WEEK1.PROMOTION_WEEK_START_DT - ROUND((D.LEAD_TIME_DYS+7)/7)*7\nAND WEEK2.DIVISION_ID = '19'\nINNER JOIN EDM_VIEWS_PRD.DW_VIEWS.SUPPLY_CHAIN_ITEM ITM\nON ITM.WAREHOUSE_ID = D.WAREHOUSE_ID\nAND ITM.WAREHOUSE_ID = C.WAREHOUSE_ID\nAND ITM.CORPORATE_ITEM_INTEGRATION_ID = B.CORPORATE_ITEM_INTEGRATION_ID\nAND ITM.DW_CURRENT_VERSION_IND = 1\n\nWHERE 1=1\n--AND CATEGORY_ID IN (2501,2505,2510,2515,2520,2525,2530,2535,3001,3002,3003,3004)\n--AND QUARTER_ID IN (20221,20222,20223,20224,20231) \nAND DEPARTMENT_ID IN (301,303,311,314,317,336)\n/*AND A.CORPORATE_ITEM_CD IN (30020337,30020334,30020425,30040167,30040160,30040207,30040199,30040213,30040128,30040162,\n                     30010374,30010376,25010054,25010057,25250643,25250644,30040053,30040087,30040089,30040083,\n                     30040077,30040064,30020183,30020326,30020327,25250643,25250644)*/\n\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13);\n</code></pre>"},{"location":"supplychain_sql/#all-warehouse-items","title":"All Warehouse Items","text":"<pre><code>select\ndistinct sci.division_id DIVISION,\nsci.distribution_center_id DST_CNTR,\nsci.warehouse_id FACILITY,\nci.corporate_item_cd CORP_ITEM_CD,\nci.Item_Dsc ITEM_DESCRIPTION,\ncase\nwhen sci.warehouse_id like '20%' then sci.System_Specific_Item_Id\nelse sci.branch_item_cd\nend WHS_ITEM,\nsci.Ship_Unit_Pack_Qty PACK_WHSE,\nsci.warehouse_item_status_cd STATUS_DST,\nci.Size_Qty || ' ' || ci.Size_UOM_Cd SIZE,\nwc.ITEM_BILLING_COST_AMT IB_COST,\nwc.VENDOR_ID || '-' || vm.vendor_nm VENDOR,\ncoalesce(ifc.SINGLE_SMOOTHED_VALUE_NBR, 0) as SSV1,\ncast(\nconcat(\nlpad(ssc.smic_group_cd, 2, '0'),\nlpad(ssc.SMIC_Category_Cd, 2, '0'),\nlpad(ssc.SMIC_Class_Cd, 2, '0'),\nlpad(ssc.SMIC_Sub_Class_Cd, 2, '0')\n) as int\n) as CODE_KEY,\nm.team_mgr_cd || '-' || m.team_mgr_nm MANAGER,\nb.buyer_id || '-' || b.buyer_nm BUYER,\ncase\nwhen sci.distribution_center_id = 'WSPK' then '32'\nelse whse.OLD_DISTRIBUTION_CENTER_CD\nend as DC_ID,\ncase\nwhen sci.warehouse_id = '3345' then '04'\nelse whse.PHYSICAL_WAREHOUSE_GROUP_ID\nend as WH_ID,\nsc.Section_Cd || '-' || sc.Section_Nm RETAIL_SECTION,\ndept.department_id || '-' || dept.department_nm DEPARTMENT,\n'' as FORECAST,\ng.SMIC_GROUP_CD || '-' || g.SMIC_GROUP_DSC GROUP_CLASSIFICATION,\ncat.SMIC_Group_Cd || cat.smic_category_nm || '-' || cat.SMIC_Category_DSC SMIC_CLASSIFICATION\nfrom\nEDM_VIEWS_PRD.DW_VIEWS.Supply_Chain_Item sci\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.corporate_item ci on ci.corporate_item_integration_id = sci.corporate_item_integration_id\nand ci.dw_current_version_ind = true\nand ci.dw_logical_delete_ind = false\nand sci.dw_current_version_ind = true\nand sci.dw_logical_delete_ind = false\nleft outer join (\nselect\n*\nfrom\nEDM_VIEWS_PRD.DW_VIEWS.vendor_warehouse_item_cost\nwhere\ndw_current_version_ind = true\nand dw_logical_delete_ind = false QUALIFY row_number() over (\npartition by WAREHOUSE_ID,\nCORPORATE_ITEM_INTEGRATION_ID\norder by\nsource_creation_dt desc\n) = 1\n) wc on wc.division_id = sci.division_id\nand wc.warehouse_id = sci.warehouse_id\nand wc.corporate_item_integration_id = sci.corporate_item_integration_id\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.SMIC_Sub_Class ssc on ci.smic_group_cd = ssc.smic_group_cd\nand ci.smic_category_cd = ssc.smic_category_cd\nand ci.smic_class_cd = ssc.smic_class_cd\nand ci.smic_sub_class_cd = ssc.smic_sub_class_cd\nand ssc.dw_current_version_ind = true\nand ssc.dw_logical_delete_ind = false\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.smic_group g on g.SMIC_GROUP_CD = ci.SMIC_Group_Cd\nand g.dw_current_version_ind = true\nand g.dw_logical_delete_ind = false\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.smic_category cat on cat.SMIC_group_cd = ci.SMIC_Group_Cd\nand cat.SMIC_Category_nm = ci.SMIC_Category_Cd\nand cat.dw_current_version_ind = true\nand cat.dw_logical_delete_ind = false\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.warehouse whse on whse.division_id = sci.division_id\nand whse.WAREHOUSE_ID = sci.warehouse_id\nand whse.dw_current_version_ind = true\nand whse.dw_logical_delete_ind = false\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.buyer b on sci.buyer_id = b.buyer_id\nand b.dw_current_version_ind = true\nand b.dw_logical_delete_ind = false\nleft outer join EDM_VIEWS_PRD.DW_BIZOPS_VIEWS.WMMGROPT m ON b.BUYER_MANAGER_CD = m.TEAM_MGR_CD\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.vendor_master vm on wc.VENDOR_ID = vm.vendor_id\nand vm.dw_current_version_ind = true\nand vm.dw_logical_delete_ind = false\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.Retail_Section r on r.Section_Cd = cat.Section_Cd\nand r.dw_current_version_ind = true\nand r.dw_logical_delete_ind = false\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.department dept on dept.department_id = r.Retail_Department_Id\nand dept.dw_current_version_ind = true\nand dept.dw_logical_delete_ind = false\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.Section sc on sc.section_cd = r.section_cd\nand sc.dw_current_version_ind = true\nand sc.dw_logical_delete_ind = false\nleft outer join EDM_VIEWS_PRD.DW_VIEWS.Item_forecast ifc on wc.division_id = ifc.division_id\nand wc.warehouse_id = ifc.warehouse_id\nand wc.corporate_item_integration_id = ifc.corporate_item_integration_id\nand ifc.dw_current_version_ind = true\nand ifc.dw_logical_delete_ind = false\nwhere\n1 = 1\nand sci.distribution_center_id like 'W%'\nand whse.WAREHOUSE_ID is not null\nand ci.corporate_item_cd is not null\nand b.BUYER_ID is not null\nand (\nvm.vendor_status_cd = 'A'\nor vm.vendor_status_cd is null\n)\n</code></pre>"},{"location":"supplychain_sql/#fresh-order-by-vendor","title":"Fresh Order by Vendor","text":"<pre><code>WITH STORE AS (\nSELECT FACILITY_INTEGRATION_ID, DIVISION_ID, ROG_ID, RETAIL_STORE_FACILITY_NBR AS STORE_ID\nFROM EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_STORE WHERE CORPORATION_ID = '001'\nAND DIVISION_ID IN ('05')    -----05,17,19,20,24,25,27,29,30,32,33,34\nAND FACILITY_STATUS_CD = 'OPEN'\n--AND RETAIL_STORE_FACILITY_NBR in ('1953')\n)\n\n, DATE AS (\nSELECT FISCAL_WEEK_ID, FISCAL_WEEK_START_DT, FISCAL_WEEK_END_DT\nFROM EDM_VIEWS_PRD.DW_VIEWS.D0_FISCAL_WEEK\n--WHERE FISCAL_WEEK_END_DT BETWEEN CURRENT_DATE - 182 AND CURRENT_DATE    -----6months\nWHERE FISCAL_YEAR_NBR IN (2021)\nAND FISCAL_PERIOD_END_DT &lt; CURRENT_DATE )\n\n, UPC_STR AS (  ------pulls only UPC/Stores where the item has either SOLD or SHIPPED in the last 18 months \nSELECT DISTINCT UPC.UPC_NBR\n, STR.FACILITY_INTEGRATION_ID\n, STR.ROG_ID\n, STR.DIVISION_ID\n, STR.STORE_ID\n\nFROM EDM_VIEWS_PRD.DW_VIEWS.D1_UPC UPC\n\nJOIN STORE STR\nON 1=1\n\nJOIN DATE DTE\nON 1=1\n\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.STORE_UPC_AGP AGP\nON AGP.FACILITY_INTEGRATION_ID = STR.FACILITY_INTEGRATION_ID\nAND AGP.UPC_NBR = UPC.UPC_NBR\nAND AGP.TRANSACTION_DT &gt;= FISCAL_WEEK_START_DT - 526\n\nLEFT JOIN EDM_VIEWS_PRD.DW_EDW_VIEWS.STORE_ITEM_SHIP_DAY SHP\nON SHP.STORE_ID = STR.STORE_ID\nAND SHP.UPC_ID = UPC.UPC_NBR\nAND SHP.TXN_DT &gt;= DTE.FISCAL_WEEK_START_DT - 526\n\nWHERE DW_LOGICAL_DELETE_IND = 'FALSE'\nAND SECTION_CD IN (\n'306' --FOOD SERVICE                \n,   '309' --DELI                     \n,   '315' --FLORAL                   \n,   '316' --IN STORE BAKERY          \n,   '336' --BAKERY PACKAGED OUTSIDE  \n,   '329' --PRODUCE                  \n,   '330','331' --SEAFOOD            \n,   '333','334' --MEAT                \n,   '341','342' --JAMBA &amp; CATERING                  \n)               --AND  SECTION_CD = '309'     -----if filtering for a single department\n--and upc.upc_nbr = 81781801199     -----if filtering for a single UPC\n\nAND (AGP.UPC_NBR IS NOT NULL\nOR SHP.UPC_ID IS NOT NULL)\n)\n\n, ROG_UPC AS (  SELECT DISTINCT\nUS.UPC_NBR\n, US.ROG_ID\n, US.DIVISION_ID\n\nFROM UPC_STR US\n\nJOIN DATE DTE\nON 1=1\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE ROG\nON ROG.ROG_ID = US.ROG_ID\nAND ROG.UPC_NBR = US.UPC_NBR\nAND ROG.DW_FIRST_EFFECTIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT\nAND ROG.DW_LAST_EFFECTIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\n)    , ROG_CIC AS (   ------pulls by ROG the UPC/CIC, including the appropriate Primal CIC for cuts\nSELECT DISTINCT\nUS.ROG_ID\n, COALESCE(BMI.PRIMAL_CORPORATE_ITEM_INTEGRATION_ID, ROG.CORPORATE_ITEM_INTEGRATION_ID) AS CORPORATE_ITEM_INTEGRATION_ID\n, CASE WHEN BMI.PRIMAL_CORPORATE_ITEM_INTEGRATION_ID IS NOT NULL THEN 'W' ELSE PRODUCT_SOURCE_IND END AS PRODUCT_SOURCE_IND\n, ROG.CORPORATE_ITEM_INTEGRATION_ID AS CII_ID\n\nFROM ROG_UPC US\n\nJOIN DATE DTE\nON 1=1\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE ROG\nON ROG.ROG_ID = US.ROG_ID\nAND ROG.UPC_NBR = US.UPC_NBR\nAND ROG.DW_FIRST_EFFECTIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT\nAND ROG.DW_LAST_EFFECTIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\n\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.BASE_MEAT_ITEM_YIELD BMI\nON BMI.DIVISION_ID = US.DIVISION_ID\nAND BMI.BASE_CORPORATE_ITEM_INTEGRATION_ID = ROG.CORPORATE_ITEM_INTEGRATION_ID\n\nWHERE CASE WHEN BMI.PRIMAL_CORPORATE_ITEM_INTEGRATION_ID IS NOT NULL THEN 'W' ELSE PRODUCT_SOURCE_IND END IS NOT NULL\n)            , DEFAULT_VENDOR AS (   SELECT  DISTINCT\nSTR.FACILITY_INTEGRATION_ID, RUS.ROG_ID\n, RUS.CORPORATE_ITEM_INTEGRATION_ID, RUS.CII_ID  , DTE.FISCAL_WEEK_ID                , AUT.VENDOR_ID, AUT.VENDOR_SUB_ACCOUNT_ID\n, 'AUT' AS SOURCE\n, 0 AS RNK_DV\n\nFROM ROG_CIC RUS\n\nJOIN STORE STR\nON STR.ROG_ID = RUS.ROG_ID\n\nJOIN DATE DTE\nON 1=1\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.AUTHORIZED_BACKDOOR_RECEIVING_ITEM AUT\nON AUT.CORPORATE_ITEM_INTEGRATION_ID = RUS.CORPORATE_ITEM_INTEGRATION_ID\nAND AUT.FACILITY_INTEGRATION_ID = STR.FACILITY_INTEGRATION_ID\nAND AUT.AUTHORIZED_ITEM_START_DT &lt;= DTE.FISCAL_WEEK_END_DT\nAND AUT.AUTHORIZED_ITEM_END_DT &gt;= DTE.FISCAL_WEEK_START_DT\nAND AUT.DW_LOGICAL_DELETE_IND = 'FALSE'\nAND AUT.DW_FIRST_EFFECTIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT     -----ensuring we get all the CIC/UPC relationships over time\nAND AUT.DW_LAST_EFFECTIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\n\nUNION ALL\n\nSELECT  DISTINCT\nSTR.FACILITY_INTEGRATION_ID, RUS.ROG_ID\n, RUS.CORPORATE_ITEM_INTEGRATION_ID, RUS.CII_ID  , DTE.FISCAL_WEEK_ID                , VI.VENDOR_ID, VI.VENDOR_SUB_ACCT_ID\n, 'WRG' AS SOURCE\n, RANK() OVER(PARTITION BY RUS.ROG_ID, RUS.CORPORATE_ITEM_INTEGRATION_ID, RUS.CII_ID, DTE.FISCAL_WEEK_ID\nORDER BY VI.DW_FIRST_EFFECTIVE_DT DESC) AS RNK_DV\n\nFROM ROG_CIC RUS\n\nJOIN STORE STR\nON STR.ROG_ID = RUS.ROG_ID\n\nJOIN DATE DTE\nON 1=1\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM C\nON C.CORPORATE_ITEM_INTEGRATION_ID = RUS.CORPORATE_ITEM_INTEGRATION_ID\nAND C.DW_CURRENT_VERSION_IND = 'TRUE'\n--AND C.DW_LOGICAL_DELETE_IND = 'FALSE'\n--AND C.DW_FIRST_EFFECTIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT -----ensuring we get all the CIC/UPC relationships over time\n--AND C.DW_LAST_EFFECTIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\n\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP_CORPORATE_ITEM ROG\nON ROG.CORPORATE_ITEM_INTEGRATION_ID = RUS.CORPORATE_ITEM_INTEGRATION_ID\nAND ROG.ROG_ID = RUS.ROG_ID\nAND (ROG.PRODUCT_SOURCE_IND = 'W'\nOR (ROG.PRODUCT_SOURCE_IND = 'D' AND C.ITEM_USAGE_TYPE_CD = 'S'))\n--AND ROG.DW_LOGICAL_DELETE_IND = 'FALSE'\nAND ROG.DW_CURRENT_VERSION_IND = 'TRUE'\n--AND ROG.DW_FIRST_EFFECTIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT   -----ensuring we get all the CIC/UPC relationships over time\n--AND ROG.DW_LAST_EFFECTIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.VENDOR_ITEM VI          ----- ADDED 02/15/23 TO ACCOMODATE FOR ROWS WITH MISSING VENDORS, THAT NEVER SHIPPED, HAVEN'T SHIPPED YET, OR BEFORE THEY SHIPPED BUT WERE VALID\n----DOES THIS NEED TO MOVE TO THE END AS A LEFT JOIN, NEED TO TEST TO MAKE SURE THIS IS NOT CAUSING ROWS TO DROP\nON VI.CORPORATE_ITEM_INTEGRATION_ID = RUS.CORPORATE_ITEM_INTEGRATION_ID\nAND VI.WAREHOUSE_ID = ROG.WAREHOUSE_ID\n--AND VI.DW_FIRST_EFFECTIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT\n--AND VI.DW_LAST_EFFECTIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\nAND VI.DW_LOGICAL_DELETE_IND = 'FALSE'        AND VI.DW_CURRENT_VERSION_IND = 'TRUE'\n\nQUALIFY RNK_DV = 1\n)\n\nSELECT FI.*\n, COALESCE(VEN.VENDOR_OUTLET_NM, CASE WHEN FI.VENDOR_ID = '000000' THEN 'OWN BRANDS' ELSE  ' ' END) AS VENDOR_OUTLET_NM\nFROM ( SELECT  DISTINCT\nSTR.DIVISION_ID\n, STR.ROG_ID\n, STR.STORE_ID\n, VLD.FACILITY_INTEGRATION_ID\n, CUR.RETAIL_SECTION_CD\n, CUR.UPC_NBR\n--, RUS.CII_ID\n, CIC.ITEM_USAGE_CD\n, CIC.ITEM_USAGE_TYPE_CD\n, CIC.CORPORATE_ITEM_CD\n, CIC.ITEM_DSC\n, DTE.FISCAL_WEEK_ID\n, CUR.PRODUCT_SOURCE_IND\n, COALESCE(FIN.SOURCE, VLD.SOURCE) AS SOURCEX\n\n, CU.PREFERED_CORPORATE_ITEM_SEQ_NBR AS PREF_CIC\n, CASE WHEN SOURCEX = 'BDR' THEN 1\nWHEN SOURCEX = 'WHS' THEN 2\nWHEN SOURCEX = 'AUT' THEN 3\nWHEN SOURCEX = 'WRG' THEN 4\nELSE 9 END AS PREF_SRC\n\n----this ranking puts DSD above WHSE if they ship in the same week to a given store using source and pref_cic and product_source_ind to rank\n, RANK() OVER(PARTITION BY VLD.FACILITY_INTEGRATION_ID, CUR.UPC_NBR, DTE.FISCAL_WEEK_ID     ORDER BY PREF_SRC ASC, PREF_CIC ASC, CUR.PRODUCT_SOURCE_IND, RECV DESC) AS RNK\n\n--------the LAG function allows you to pull the value from the prior row to propogate this value until it changes again (this fills in the NULLS or the default supplier\n, COALESCE(FIN.VENDOR_ID, CASE WHEN FIN.VENDOR_ID IS NULL AND CIC.ITEM_USAGE_TYPE_CD = 'S' THEN '000000'\nWHEN FIN.VENDOR_ID IS NULL THEN LAG(FIN.VENDOR_ID) IGNORE NULLS OVER (PARTITION BY VLD.FACILITY_INTEGRATION_ID, CUR.UPC_NBR ORDER BY DTE.FISCAL_WEEK_ID, RECV DESC)\nELSE VLD.VENDOR_ID END, VLD.VENDOR_ID) AS VENDOR_ID\n\n, COALESCE(FIN.VENDOR_SUB_ACCOUNT_ID, CASE WHEN FIN.VENDOR_SUB_ACCOUNT_ID IS NULL AND CIC.ITEM_USAGE_TYPE_CD = 'S' THEN '000'\nWHEN FIN.VENDOR_SUB_ACCOUNT_ID IS NULL THEN LAG(FIN.VENDOR_SUB_ACCOUNT_ID) IGNORE NULLS OVER (PARTITION BY VLD.FACILITY_INTEGRATION_ID, CUR.UPC_NBR ORDER BY DTE.FISCAL_WEEK_ID, RECV DESC)\nELSE VLD.VENDOR_SUB_ACCOUNT_ID END, VLD.VENDOR_SUB_ACCOUNT_ID) AS VENDOR_SUB_ACCOUNT_ID     FROM UPC_STR STR\n\nJOIN DATE DTE\nON 1=1\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE CUR\nON CUR.ROG_ID = STR.ROG_ID\nAND CUR.UPC_NBR = STR.UPC_NBR\nAND CUR.DW_FIRST_EFFECTIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT\nAND CUR.DW_LAST_EFFECTIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_REFERENCE CU ---pull this table in to get the pref cic seq nbr to use in ranking by week for dsd/whse/source/cic\nON CU.CORPORATE_ITEM_INTEGRATION_ID = CUR.CORPORATE_ITEM_INTEGRATION_ID\nAND CU.UPC_NBR = CUR.UPC_NBR\nAND CU.DW_FIRST_EFFECTIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT\nAND CU.DW_LAST_EFFECTIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\n\nJOIN DEFAULT_VENDOR VLD\nON VLD.ROG_ID = STR.ROG_ID\nAND VLD.FACILITY_INTEGRATION_ID = STR.FACILITY_INTEGRATION_ID\nAND VLD.CII_ID = CUR.CORPORATE_ITEM_INTEGRATION_ID\nAND VLD.FISCAL_WEEK_ID = DTE.FISCAL_WEEK_ID\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.D1_CORPORATE_ITEM CIC\nON CIC.CORPORATE_ITEM_INTEGRATION_ID = CUR.CORPORATE_ITEM_INTEGRATION_ID\n\nLEFT JOIN ( SELECT -----pulling warehouse vendors by store based on Whse POs Received into warehouse and verifying that this same CIC shipped to the store (see EXISTS statement)   note:  might need to think about the date logic on the ship to store vs the whse po receive\n'WHS' AS SOURCE\n, DIVISION_ID\n, ROG_ID\n, STORE_ID\n, FACILITY_INTEGRATION_ID\n--, RETAIL_SECTION_CD\n--, PRODUCT_SOURCE_IND\n--, UPC_NBR\n, CORPORATE_ITEM_INTEGRATION_ID\n, CII_ID\n, FISCAL_WEEK_ID\n, VENDOR_ID\n, VENDOR_SUB_ACCOUNT_ID\n, RECV\n\nFROM (\nSELECT TB1.*\n, RANK() OVER(PARTITION BY TB1.FACILITY_INTEGRATION_ID, CORPORATE_ITEM_INTEGRATION_ID, FISCAL_WEEK_ID\nORDER BY RECV DESC, DTE DESC, PURCHASE_ORDER_NBR DESC) AS RNK -----when multiple vendors delivery on the same day same amount, added PO#\n\nFROM ( SELECT  DISTINCT\nROG.DIVISION_ID\n, ROG.ROG_ID\n, STR.STORE_ID\n, STR.FACILITY_INTEGRATION_ID\n, HED.DISTRIBUTION_CENTER_ID\n, ROG.WAREHOUSE_ID\n, HED.VENDOR_ID\n, HED.VENDOR_SUB_ACCOUNT_ID\n, RUS.CII_ID\n, RUS.CORPORATE_ITEM_INTEGRATION_ID\n, DET.PURCHASE_ORDER_NBR\n, DTE.FISCAL_WEEK_ID\n\n, SUM(DET.RECEIVED_QTY) OVER(PARTITION BY ROG.WAREHOUSE_ID, RUS.CORPORATE_ITEM_INTEGRATION_ID, DTE.FISCAL_WEEK_ID, HED.VENDOR_ID, HED.VENDOR_SUB_ACCOUNT_ID)    AS RECV\n, MAX(HED.PURCHASE_ORDER_RECEIVE_DT) OVER(PARTITION BY  ROG.WAREHOUSE_ID, RUS.CORPORATE_ITEM_INTEGRATION_ID, DTE.FISCAL_WEEK_ID, HED.VENDOR_ID, HED.VENDOR_SUB_ACCOUNT_ID)  AS DTE\n\nFROM DATE DTE\n\nJOIN ROG_CIC RUS\nON RUS.PRODUCT_SOURCE_IND = 'W'\n\nJOIN STORE STR\nON STR.ROG_ID = RUS.ROG_ID\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_ORDER_GROUP_CORPORATE_ITEM ROG\nON ROG.CORPORATE_ITEM_INTEGRATION_ID = RUS.CORPORATE_ITEM_INTEGRATION_ID\nAND ROG.ROG_ID = RUS.ROG_ID\nAND ROG.DW_LOGICAL_DELETE_IND = 'FALSE'\nAND ROG.DW_CURRENT_VERSION_IND = 'TRUE'\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.WAREHOUSE_EXTENDED_RECEIVING_DETAIL DET\nON DET.CORPORATE_ITEM_INTEGRATION_ID = ROG.CORPORATE_ITEM_INTEGRATION_ID\nAND DET.DIVISION_ID = ROG.ORDERING_DIVISION_ID\nAND DET.WAREHOUSE_ID = ROG.WAREHOUSE_ID\nAND DET.STATUS_CD = 'R'\nAND DET.RECEIVED_QTY &gt; 0 JOIN EDM_VIEWS_PRD.DW_VIEWS.WAREHOUSE_EXTENDED_RECEIVING_HEADER HED\nON  HED.CORPORATION_ID = DET.CORPORATION_ID\nAND HED.DIVISION_ID = DET.DIVISION_ID\nAND HED.WAREHOUSE_ID = DET.WAREHOUSE_ID\nAND HED.PURCHASE_ORDER_NBR = DET.PURCHASE_ORDER_NBR\nAND HED.PURCHASE_ORDER_RECEIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT\nAND HED.PURCHASE_ORDER_RECEIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\n\nWHERE EXISTS (  ------checking to see if the item has been shipped to the store, but need to adjust the dates to look beyond the range of the PO recv date\nSELECT 1\nFROM EDM_VIEWS_PRD.DW_VIEWS.SUPPLY_CHAIN_INVOICE_HEADER HED\nJOIN EDM_VIEWS_PRD.DW_VIEWS.SUPPLY_CHAIN_INVOICE_DETAIL DET\nON DET.SUPPLY_CHAIN_INVOICE_INTEGRATION_ID = HED.SUPPLY_CHAIN_INVOICE_INTEGRATION_ID\nAND DET.CORPORATE_ITEM_INTEGRATION_ID = RUS.CORPORATE_ITEM_INTEGRATION_ID\nAND DET.SHIPPED_QTY &lt;&gt; 0\nAND DET.DW_CURRENT_VERSION_IND = 'TRUE'\nWHERE HED.REQUESTED_DELIVERY_DT &lt;= DTE.FISCAL_WEEK_END_DT\n----looking to see if the item has shipped to the store in the last year and a half\nAND HED.REQUESTED_DELIVERY_DT &gt;= DTE.FISCAL_WEEK_START_DT - 526\nAND HED.RETAIL_STORE_FACILITY_INTEGRATION_ID = STR.FACILITY_INTEGRATION_ID\nAND HED.DW_CURRENT_VERSION_IND = 'TRUE'\n)\n) AS TB1\n) AS TB2\n\nWHERE RNK = 1   UNION ALL          SELECT          -----pulling BDR vendors by store based on Invoices Received into store\n'BDR' AS SOURCE\n, DIVISION_ID\n, ROG_ID\n, STORE_ID\n, FACILITY_INTEGRATION_ID\n, UPC_NBR\n, UPC_NBR AS CII_ID\n, FISCAL_WEEK_ID\n, VENDOR_ID\n, VENDOR_SUB_ACCOUNT_ID\n, RECV\n\nFROM (\nSELECT TB1.*\n----when multiple vendors delivery on the same day same amount (same ranking as warehouse without PO/invoice)\n, RANK() OVER(PARTITION BY UPC_NBR, FISCAL_WEEK_ID ORDER BY RECV DESC, DTE DESC) AS RNK FROM (                                          SELECT  DISTINCT\nSTR.DIVISION_ID\n, STR.ROG_ID\n, STR.STORE_ID\n, STR.FACILITY_INTEGRATION_ID\n, RUS.UPC_NBR\n, DTE.FISCAL_WEEK_ID\n, HED.VENDOR_ID\n, HED.VENDOR_SUB_ACCOUNT_ID\n, SUM(CASE WHEN DET.INVOICE_CD = 'D' AND FINAL_UNIT_OF_MEASURE_CD = 'C' THEN DET.FINAL_PACK_QTY * DET.FINAL_INVOICE_QTY\nWHEN DET.INVOICE_CD = 'D' AND FINAL_UNIT_OF_MEASURE_CD = 'E'  THEN DET.FINAL_INVOICE_QTY\nWHEN DET.INVOICE_CD = 'D' AND FINAL_UNIT_OF_MEASURE_CD = 'L'   THEN DET.FINAL_INVOICE_QTY\nELSE 0 END) OVER(PARTITION BY DET.UPC_NBR, DTE.FISCAL_WEEK_ID, HED.VENDOR_ID, HED.VENDOR_SUB_ACCOUNT_ID)        AS RECV\n, MAX(HED.RECEIVE_DT) OVER(PARTITION BY  DET.UPC_NBR, DTE.FISCAL_WEEK_ID, HED.VENDOR_ID, HED.VENDOR_SUB_ACCOUNT_ID)     AS DTE\n\nFROM STORE STR\n\nJOIN ROG_UPC RUS\nON RUS.ROG_ID = STR.ROG_ID\n\nJOIN DATE DTE\nON 1=1\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.RECEIVE_DELIVERY_INVOICE_HEADER_DSD HED\nON  HED.RECEIVE_DT &lt;= DTE.FISCAL_WEEK_END_DT\nAND HED.RECEIVE_DT &gt;= DTE.FISCAL_WEEK_START_DT\nAND HED.FACILITY_INTEGRATION_ID = STR.FACILITY_INTEGRATION_ID\nAND HED.INVOICE_CD = 'D'\nAND HED.INVOICE_VOID_IND = '0'\nAND HED.DW_CURRENT_VERSION_IND = 'TRUE'\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.RECEIVE_DELIVERY_INVOICE_DETAIL_DSD DET\nON DET.FACILITY_INTEGRATION_ID = HED.FACILITY_INTEGRATION_ID\nAND DET.UPC_NBR = RUS.UPC_NBR\nAND DET.VENDOR_ID = HED.VENDOR_ID\nAND DET.BACKDOOR_VENDOR_SUB_ACCOUNT_ID = HED.BACKDOOR_VENDOR_SUB_ACCOUNT_ID\nAND DET.LOAD_DT = HED.LOAD_DT\nAND DET.INVOICE_CD = HED.INVOICE_CD\nAND DET.VENDOR_INVOICE_NBR = HED.VENDOR_INVOICE_NBR\nAND DET.ITEM_USAGE_TYPE_CD = 'R'\nAND DET.FINAL_RETAIL_PRICE_AMT &lt;&gt; 0\nAND DET.FINAL_PACK_QTY &lt;&gt; 0 AND DET.FINAL_INVOICE_QTY &lt;&gt; 0\nAND DET.DW_CURRENT_VERSION_IND = 'TRUE'\nAND DET.DW_LOGICAL_DELETE_IND = 'FALSE'\nAND DET.UPC_NBR IN (SELECT CUR.UPC_NBR\nFROM EDM_VIEWS_PRD.DW_VIEWS.CORPORATE_ITEM_UPC_ROG_REFERENCE CUR\nWHERE CUR.ROG_ID = STR.ROG_ID\nAND CUR.UPC_NBR = DET.UPC_NBR\nAND CUR.STATUS_CD &lt;&gt; 'D'\nAND CUR.DW_CURRENT_VERSION_IND = 'TRUE'\nAND CUR.DW_LOGICAL_DELETE_IND = 'FALSE' )\n\nWHERE 1=1\n) AS TB1\n) AS TB2\n\nWHERE RNK = 1   UNION ALL\n\nSELECT          -----pulling SBT vendors by store based on actual authorization to SBT Vendor\n'SBT' AS SOURCE\n, STR.DIVISION_ID\n, STR.ROG_ID\n, STR.STORE_ID\n, STR.FACILITY_INTEGRATION_ID\n, RUS.CORPORATE_ITEM_INTEGRATION_ID\n, CII_ID\n, DTE.FISCAL_WEEK_ID\n, AUT.VENDOR_ID\n, AUT.VENDOR_SUB_ACCOUNT_ID\n, 0 AS RECV\n\nFROM STORE STR\n\nJOIN ROG_CIC RUS\nON RUS.ROG_ID = STR.ROG_ID\n\nJOIN DATE DTE\nON 1=1\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.AUTHORIZED_BACKDOOR_RECEIVING_ITEM AUT\nON AUT.CORPORATE_ITEM_INTEGRATION_ID = RUS.CORPORATE_ITEM_INTEGRATION_ID\nAND AUT.FACILITY_INTEGRATION_ID = STR.FACILITY_INTEGRATION_ID\nAND AUT.AUTHORIZED_ITEM_START_DT &lt;= DTE.FISCAL_WEEK_END_DT\nAND AUT.AUTHORIZED_ITEM_END_DT &gt; DTE.FISCAL_WEEK_START_DT\nAND AUT.DW_CURRENT_VERSION_IND = 'TRUE'\nAND AUT.DW_LOGICAL_DELETE_IND = 'FALSE'\n\nJOIN (\n--------the top union gets the SBT vendors that are authorized to ALL stores without any exceptions at the store level\nSELECT\nSTR.ROG_ID\n, STR.FACILITY_INTEGRATION_ID\n, STR.STORE_ID\n, SBT.VENDOR_ID\n, SBT.VENDOR_SUB_ACCOUNT_ID\n, SBT.PAYMENT_START_DT, SBT.PAYMENT_END_DT\n\nFROM EDM_VIEWS_PRD.DW_VIEWS.SCAN_BASED_TRADING_VENDOR SBT\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.VENDOR_COST_AREA_FACILITY CAF\nON CAF.CORPORATION_ID = SBT.CORPORATION_ID\nAND CAF.DIVISION_ID = SBT.DIVISION_ID\nAND CAF.VENDOR_ID = SBT.VENDOR_ID\nAND CAF.VENDOR_SUB_ACCOUNT_ID = SBT.VENDOR_SUB_ACCOUNT_ID\nAND (CAF.ON_HOLD_IND &lt;&gt; 'H' OR CAF.ON_HOLD_IND IS NULL)\nAND CAF.DW_CURRENT_VERSION_IND = 'TRUE'\n\nJOIN STORE STR\nON STR.FACILITY_INTEGRATION_ID = CAF.FACILITY_INTEGRATION_ID\n\nWHERE SBT.PAYMENT_START_DT &lt; CURRENT_DATE\nAND SBT.PAYMENT_END_DT &gt; CURRENT_DATE\nAND SBT.DW_CURRENT_VERSION_IND = 'TRUE'\n\nAND NOT EXISTS (SELECT 1\nFROM EDM_VIEWS_PRD.DW_VIEWS.SCAN_BASED_TRADING_VENDOR_FACILITY SBF\nWHERE  SBF.CORPORATION_ID = SBT.CORPORATION_ID\nAND SBF.DIVISION_ID = SBT.DIVISION_ID\nAND SBF.VENDOR_ID = SBT.VENDOR_ID\nAND SBF.VENDOR_SUB_ACCOUNT_ID = SBT.VENDOR_SUB_ACCOUNT_ID\nAND SBF.FACILITY_INTEGRATION_ID = CAF.FACILITY_INTEGRATION_ID\nAND ((SBF.PAYMENT_CD = 'I' AND SBT.PAYMENT_END_DT &gt; CURRENT_DATE)\nOR (SBF.PAYMENT_CD = 'E' )  OR (SBF.PRODUCT_ACTIVITY_CD = 'E' AND SBF.PRODUCT_ACTIVITY_END_DT &gt; CURRENT_DATE)\n)            AND SBF.DW_CURRENT_VERSION_IND = 'TRUE')\n\nGROUP BY 1, 2, 3, 4, 5, 6, 7\n\nUNION ALL\n--------the 2nd union gets the SBT vendors that store level exceptions\nSELECT STR.ROG_ID\n, STR.FACILITY_INTEGRATION_ID\n, STR.STORE_ID\n, SBT.VENDOR_ID\n, SBT.VENDOR_SUB_ACCOUNT_ID\n, CASE WHEN SBF.PAYMENT_CD = 'E' AND SBF.PAYMENT_END_DT &lt;= CURRENT_DATE THEN SBF.PAYMENT_END_DT\nWHEN SBF.PAYMENT_CD = 'I' AND SBF.PAYMENT_END_DT &gt;= CURRENT_DATE THEN SBF.PAYMENT_START_DT\nELSE SBF.PAYMENT_START_DT END AS PAYMENT_START_DT\n, CASE WHEN SBF.PAYMENT_CD = 'E' AND SBF.PAYMENT_END_DT &lt;= CURRENT_DATE THEN SBT.PAYMENT_END_DT\nWHEN SBF.PAYMENT_CD = 'I' AND SBF.PAYMENT_END_DT &gt;= CURRENT_DATE THEN SBF.PAYMENT_END_DT\nELSE SBF.PAYMENT_END_DT END AS PAYMENT_END_DT\n\nFROM EDM_VIEWS_PRD.DW_VIEWS.SCAN_BASED_TRADING_VENDOR SBT\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.VENDOR_COST_AREA_FACILITY CAF\nON CAF.CORPORATION_ID = SBT.CORPORATION_ID\nAND CAF.DIVISION_ID = SBT.DIVISION_ID\nAND CAF.VENDOR_ID = SBT.VENDOR_ID\nAND CAF.VENDOR_SUB_ACCOUNT_ID = SBT.VENDOR_SUB_ACCOUNT_ID\nAND (CAF.ON_HOLD_IND &lt;&gt; 'H' OR CAF.ON_HOLD_IND IS NULL)\nAND CAF.DW_CURRENT_VERSION_IND = 'TRUE'\n\nJOIN STORE STR\nON STR.FACILITY_INTEGRATION_ID = CAF.FACILITY_INTEGRATION_ID\n\nJOIN EDM_VIEWS_PRD.DW_VIEWS.SCAN_BASED_TRADING_VENDOR_FACILITY SBF\nON  SBF.CORPORATION_ID = SBT.CORPORATION_ID\nAND SBF.DIVISION_ID = SBT.DIVISION_ID\nAND SBF.VENDOR_ID = SBT.VENDOR_ID\nAND SBF.VENDOR_SUB_ACCOUNT_ID = SBT.VENDOR_SUB_ACCOUNT_ID\nAND SBF.FACILITY_INTEGRATION_ID = CAF.FACILITY_INTEGRATION_ID\nAND ( (SBF.PAYMENT_CD = 'I' AND SBF.PAYMENT_START_DT &lt;= CURRENT_DATE AND SBF.PAYMENT_END_DT &gt;= CURRENT_DATE)\nOR  (SBF.PAYMENT_CD = 'E'  AND SBF.PAYMENT_END_DT &lt;= CURRENT_DATE)  )\nAND SBF.DW_CURRENT_VERSION_IND = 'TRUE'\n\nWHERE SBT.SALES_COLLECTION_START_DT &lt; CURRENT_DATE\nAND SBT.SALES_COLLECTION_END_DT &gt; CURRENT_DATE\nAND SBT.DW_CURRENT_VERSION_IND = 'TRUE'\n\nGROUP BY 1, 2, 3, 4, 5, 6, 7\n) AS DVS\nON   DVS.PAYMENT_START_DT &lt;= DTE.FISCAL_WEEK_END_DT\nAND DVS.PAYMENT_END_DT &gt;= DTE.FISCAL_WEEK_START_DT\nAND DVS.FACILITY_INTEGRATION_ID = STR.FACILITY_INTEGRATION_ID\nAND DVS.VENDOR_ID = AUT.VENDOR_ID\nAND DVS.VENDOR_SUB_ACCOUNT_ID = AUT.VENDOR_SUB_ACCOUNT_ID\n\nWHERE 1=1\n\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n) AS FIN\nON FIN.FACILITY_INTEGRATION_ID = VLD.FACILITY_INTEGRATION_ID\nAND FIN.FISCAL_WEEK_ID = DTE.FISCAL_WEEK_ID\nAND (\n(FIN.SOURCE = 'BDR' AND FIN.CII_ID = CUR.UPC_NBR )\nOR (FIN.SOURCE IN ('SBT','WHS') AND FIN.CII_ID = CUR.CORPORATE_ITEM_INTEGRATION_ID)\n)\n\nQUALIFY RNK = 1\n) AS FI\n\nLEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.VENDOR_OUTLET VEN\nON VEN.VENDOR_ID = FI.VENDOR_ID\nAND VEN.VENDOR_SUB_ACCOUNT_ID = FI.VENDOR_SUB_ACCOUNT_ID\nAND VEN.DW_CURRENT_VERSION_IND = 'TRUE'\nAND VEN.DW_LOGICAL_DELETE_IND = 'FALSE'\n);\n</code></pre>"},{"location":"translating_sql/","title":"SQL Intepretation","text":""},{"location":"translating_sql/#how-do-we-translate-user-inputs-into-sql","title":"how do we translate user inputs into sql.","text":"<pre><code>from sqlalchemy import create_engine, Column, Integer, String, Date, Float\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\n# create a SQLAlchemy engine\nengine = create_engine('sqlite:///example.db')\n\n# create a session factory\nSession = sessionmaker(bind=engine)\n\n# create a base class for our models\nBase = declarative_base()\n\n# define the model classes\nclass Sales(Base):\n    __tablename__ = 'sales'\n    id = Column(Integer, primary_key=True)\n    upc_id = Column(Integer)\n    txn_dte = Column(Date)\n    sales = Column(Float)\n    store_id = Column(Integer)\n\nclass Store(Base):\n    __tablename__ = 'stores'\n    id = Column(Integer, primary_key=True)\n    store_id = Column(Integer)\n    division_id = Column(Integer)\n\nclass Calendar(Base):\n    __tablename__ = 'calendar'\n    id = Column(Integer, primary_key=True)\n    txn_dte = Column(Date)\n    week_id = Column(Integer)\n\n# create the tables in the database\nBase.metadata.create_all(engine)\n\n# get user input\nselect_columns = input(\"Enter columns to SELECT separated by commas (e.g. 'sales, stores.division_id, calendar.week_id'): \").split(',')\ngroup_by_columns = input(\"Enter columns to GROUP BY separated by commas (e.g. 'stores.division_id, calendar.week_id'): \").split(',')\nstart_date = input(\"Enter start date (YYYY-MM-DD): \")\nend_date = input(\"Enter end date (YYYY-MM-DD): \")\ndivision_id = input(\"Enter division ID (leave blank for all): \")\nstore_id = input(\"Enter store ID (leave blank for all): \")\nupc_id = input(\"Enter UPC ID (leave blank for all): \")\n\n# create a session\nsession = Session()\n\n# build the query based on user input\nquery = session.query(*[Sales] + [getattr(table, column) for column in select_columns for table in [Store, Calendar] if column.startswith(table.__tablename__)])\nquery = query.join(Store, Sales.store_id == Store.store_id)\nquery = query.join(Calendar, Sales.txn_dte == Calendar.txn_dte)\nquery = query.group_by(*[getattr(table, column) for column in group_by_columns for table in [Sales, Store, Calendar] if column.startswith(table.__tablename__)])\nquery = query.filter(Sales.txn_dte.between(start_date, end_date))\nif division_id:\n    query = query.filter(Store.division_id == division_id)\nif store_id:\n    query = query.filter(Sales.store_id == store_id)\nif upc_id:\n    query = query.filter(Sales.upc_id == upc_id)\n\n# execute the query\nresults = query.all()\n\n# print the results\nfor result in results:\n    print(result)\n</code></pre>"},{"location":"translating_sql/#translate-nlp-to-sql","title":"translate NLP to sql","text":"<pre><code>import spacy\n\n# load the spaCy English model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# define a dictionary to map natural language keywords to column names\ncolumn_map = {\n    'sales': 'sales',\n    'division': 'stores.division_id',\n    'store': 'sales.store_id',\n    'upc': 'sales.upc_id'\n}\n\n# get user input\ninput_text = input(\"Enter a natural language query (e.g. 'sales by division in January 2022'): \")\n\n# parse the input using spaCy\ndoc = nlp(input_text)\n\n# extract relevant keywords\nselect_columns = []\ngroup_by_columns = []\nfilters = []\nfor token in doc:\n    if token.text in column_map:\n        select_columns.append(column_map[token.text])\n        group_by_columns.append(column_map[token.text])\n    elif token.text == 'by':\n        # ignore \"by\" in the input\n        pass\n    elif token.ent_type_ == 'DATE':\n        # assume any entity of type DATE is a date range\n        date_range = token.text.split(' to ')\n        start_date = date_range[0]\n        end_date = date_range[-1]\n        filters.append(('txn_dte', 'between', [start_date, end_date]))\n\n# create a session\nsession = Session()\n\n# build the query based on the extracted keywords\nquery = session.query(*[getattr(Sales, column) for column in select_columns])\nquery = query.join(Store, Sales.store_id == Store.store_id)\nquery = query.group_by(*[getattr(Sales, column) for column in group_by_columns])\nfor column, operator, values in filters:\n    query = query.filter(getattr(Sales, column).__getattribute__(operator)(*values))\n\n# execute the query\nresults = query.all()\n\n# print the results\nfor result in results:\n    print(result)\n</code></pre>"},{"location":"translating_sql/#more-complex-example-of-nlp-to-sql","title":"more complex example of NLP to SQL","text":"<p><pre><code>import spacy\nfrom spacy.symbols import nsubj, pobj, dobj\nfrom sqlalchemy import create_engine, Column, Integer, String, Date, Float\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\n# create a SQLAlchemy engine\nengine = create_engine('sqlite:///example.db')\n\n# create a session factory\nSession = sessionmaker(bind=engine)\n\n# create a base class for our models\nBase = declarative_base()\n\n# define the model classes\nclass Sales(Base):\n    __tablename__ = 'sales'\n    id = Column(Integer, primary_key=True)\n    upc_id = Column(Integer)\n    txn_dte = Column(Date)\n    sales = Column(Float)\n    store_id = Column(Integer)\n\nclass Store(Base):\n    __tablename__ = 'stores'\n    id = Column(Integer, primary_key=True)\n    store_id = Column(Integer)\n    division_id = Column(Integer)\n\nclass Calendar(Base):\n    __tablename__ = 'calendar'\n    id = Column(Integer, primary_key=True)\n    txn_dte = Column(Date)\n    week_id = Column(Integer)\n\n# create the tables in the database\nBase.metadata.create_all(engine)\n\n# load the spaCy English model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# define the named entity labels\nlabels = {'DIVISION', 'STORE', 'DATE_RANGE'}\n\n# define a dictionary to map named entities to column names\ncolumn_map = {\n    'DIVISION': 'stores.division_id',\n    'STORE': 'sales.store_id',\n    'DATE_RANGE': 'sales.txn_dte'\n}\n\n# define the expected query components and their corresponding dependency tags\nquery_components = {\n    'SELECT': {'nsubj', 'dobj'},\n    'FROM': {'pobj'},\n    'WHERE': {'nsubj', 'dobj', 'pobj'},\n    'GROUP BY': {'pobj'}\n}\n\n# get user input\ninput_text = \"get total sales in division 19 and store 101 from 202001 to 202004\"\n\n# parse the input using spaCy\ndoc = nlp(input_text)\n\n# extract the named entities and their labels\nnamed_entities = {ent.text: ent.label_ for ent in doc.ents if ent.label_ in labels}\n\n# extract the query components and their dependencies\nquery_dependencies = {chunk.text: chunk.root.dep_ for chunk in doc.noun_chunks if chunk.root.dep_ in query_components.values()}\n\n# map the named entities to the appropriate SQL columns\ncolumns = [column_map[named_entities[text]] for text in named_entities.keys()]\n\n# construct the SQL query based on the extracted components and named entities\nselect = ', '.join(columns)\nfrom_table = 'sales JOIN stores ON sales.store_id = stores.store_id'\nwhere_conditions = []\ngroup_by_columns = []\nfor text, dep in query_dependencies.items():\n    if dep == 'nsubj':\n        where_conditions.append(f\"{column_map[named_entities[text]]} == {text}\")\n    elif dep == 'dobj':\n        where_conditions.append(f\"{column_map[named_entities[text]]} == {text}\")\n        group_by_columns.append(column_map[named_entities[text]])\n    elif dep == 'pobj':\n        if text == 'from':\n            from_table = text.lemma_ + '_table'\n        else:\n            where_conditions.append(f\"{column_map[named_entities[text]]} BETWEEN {start_date} AND {end_date}\")\n            group_by_columns.append(column_map[named_entities[text]])\nwhere_clause = ' AND '.join(where_conditions)\ngroup_by = ', '.join(group_by_columns)\n\nsql_query = f\"SELECT {select} FROM {from_table} WHERE {where_clause} GROUP BY {group_by}\"\nprint(sql_query)\n\n# create a session\nsession = Session()\n\n# execute the SQL query\nresults = session.execute(sql_query)\n\n# calculate the total sales\ntotal_sales = sum(result[0] for result in results)\n\n# print the total sales\nprint(f\"Total sales in division 19 and store 101 from 202001 to 202004: {total_sales}\")\n</code></pre> <pre><code>To structure the NLP model to handle a user input like \"get total sales in division 19 and store 101 from 202001 to 202004\", you can use a combination of named entity recognition (NER) and dependency parsing to extract the relevant information from the input and map it to the appropriate SQL query.\n\nHere's a high-level overview of the steps you could take:\n\nDefine a set of labels for the named entities you want to extract, such as DIVISION, STORE, and DATE_RANGE.\n\nUse a NER model to extract the named entities from the input text and classify them with the appropriate label.\n\nUse dependency parsing to extract the relationships between the named entities and the query components they correspond to, such as SELECT, FROM, WHERE, and GROUP BY.\n\nUse the named entities and dependency parsing results to construct the SQL query, including the appropriate columns to select, tables to join, and filter conditions to apply.\n\nIn this continuation, we use the named entities and dependency parsing results to construct the SQL query. We first map the named entities to the appropriate SQL columns using a column_map dictionary.\n\nWe then extract the query components and their dependencies, and construct the SELECT, FROM, WHERE, and GROUP BY clauses of the SQL query based on the corresponding dependencies. We also extract the date range filter and add it to the WHERE clause.\n\nFinally, we execute the SQL query and calculate the total sales using a list comprehension and the built-in sum function. We then print the total sales to the console.\n\nNote that in this example, we assume that the Sales and Store tables have the necessary columns. You may need to modify the query to join additional tables or filter on other columns as necessary.\n</code></pre></p>"},{"location":"useful_websites/","title":"Useful Websites","text":""},{"location":"useful_websites/#collections-of-useful-websites","title":"collections of useful websites","text":""},{"location":"useful_websites/#data-visualization","title":"Data Visualization","text":"<pre><code>* [Data Visualization Catalog](http://datavizcatalogue.com/)\n* [Data Visualization Society](http://datavisualizationsociety.com/)\n* [Data Visualization Project](http://datavizproject.com/)\n* [Flowing Data](http://flowingdata.com/)\n* [Information is Beautiful](http://www.informationisbeautiful.net/)\n</code></pre>"},{"location":"useful_websites/#data-viz-tools-libraries","title":"Data Viz Tools &amp; Libraries","text":"<pre><code>* [Interactive Tools](https://github.com/finos/perspective/)\n* [Google Charts](https://developers.google.com/chart/)\n* [echarts](https://echarts.apache.org/en/index.html)\n* [ApexCharts](https://apexcharts.com/)\n</code></pre>"},{"location":"useful_websites/#data-science","title":"Data Science","text":"<pre><code>* [Data Science Central](http://www.datasciencecentral.com/)\n* [Data Science Weekly](http://www.datascienceweekly.org/)\n* [Data Science Stack Exchange](http://datascience.stackexchange.com/)\n* [Data Science at Scale](http://www.datascienceassn.org/sites/default/files/DSA-Data-Science-at-Scale.pdf)\n* [Data Science for Social Good](http://www.datascienceforsocialgood.org/)\n* [Hugging Face](https://huggingface.co/models/)\n* [OpenAI](https://openai.com/blog/)\n* [OpenAi Github](https://github.com/orgs/openai/repositories)\n</code></pre>"},{"location":"useful_websites/#javascript-libraries","title":"Javascript Libraries","text":"<pre><code>* [D3.js](https://d3js.org/)\n* [LocalForage](https://localforage.github.io/localForage/)\n* [LocalStorageDB](https://github.com/knadh/localStorageDB)\n* [Sortable](https://github.com/SortableJS/Sortable)\n* [Font Awesome](https://fontawesome.com/v4)\n* [Tabulator](http://tabulator.info/)\n* [Chart.js](https://www.chartjs.org/)\n* [AG Grid](https://www.ag-grid.com/)\n* [SheetJS](https://sheetjs.com/)\n* [DocxJS](https://docx.js.org/)\n</code></pre>"},{"location":"useful_websites/#python-libraries","title":"Python Libraries","text":"<pre><code>* [OpenPyXL](https://openpyxl.readthedocs.io/en/stable/)\n* [python-pptx](https://python-pptx.readthedocs.io/en/latest/)\n* [python-docx](https://python-docx.readthedocs.io/en/latest/)\n</code></pre>"},{"location":"useful_websites/#podcasts","title":"Podcasts","text":"<pre><code>* [Data Skeptic](http://dataskeptic.com/)\n* [Lenny's Podcast](https://www.lennyspodcast.com/)\n</code></pre>"},{"location":"useful_websites/#microsoft","title":"Microsoft","text":"<pre><code>* [Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer)\n* [External API ](https://learn.microsoft.com/en-us/office/dev/scripts/develop/external-calls)\n</code></pre>"},{"location":"useful_websites/#statistics","title":"Statistics","text":"<pre><code>* [Bayesian Methods](https://towardsdatascience.com/bayesian-inference-intuition-and-example-148fd8fb95d6)\n</code></pre>"},{"location":"useful_websites/#articles","title":"Articles","text":"<pre><code>* [Serve Flask App with Gunicorn](https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04)\n</code></pre>"},{"location":"useful_websites/#technologies","title":"Technologies","text":"<pre><code>* [Google Github](https://github.com/orgs/google/repositories?page=79)\n</code></pre>"},{"location":"useful_websites/#web-tools","title":"Web Tools","text":"<pre><code>* [Scaffold](https://app.scaffoldhub.io/scaffold/nodejs?frontend=react-material-ui)\n</code></pre>"}]}